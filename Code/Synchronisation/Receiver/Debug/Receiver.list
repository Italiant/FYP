
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800a410  0800a410  0001a410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e8  0800a6e8  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6e8  0800a6e8  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6e8  0800a6e8  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000358  0800aa48  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001fc8  0800aa48  00021fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001759b  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003263  00000000  00000000  0003791c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  0003ab80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  0003bb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b218  00000000  00000000  0003c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010188  00000000  00000000  00057c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008da7f  00000000  00000000  00067d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  000f5884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a3f4 	.word	0x0800a3f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800a3f4 	.word	0x0800a3f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fb6a 	bl	8001164 <HAL_Init>
	//HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f810 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f8b4 	bl	8000c00 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a98:	f006 fef8 	bl	800788c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000a9c:	f000 f864 	bl	8000b68 <MX_TIM2_Init>
	//uint16_t step = 0;
	//uint32_t v = 0;
	//char msg[10];
	//HAL_Delay(3000);
	//HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <main+0x28>)
 8000aa8:	f000 fe6d 	bl	8001786 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000aac:	e7fe      	b.n	8000aac <main+0x24>
 8000aae:	bf00      	nop
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2228      	movs	r2, #40	; 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f007 fbbc 	bl	8008240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 f9f0 	bl	8002ef0 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b16:	f000 f9f3 	bl	8000f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fc5a 	bl	80033f0 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b42:	f000 f9dd 	bl	8000f00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b46:	2310      	movs	r3, #16
 8000b48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fdb7 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b5c:	f000 f9d0 	bl	8000f00 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	; 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b8e:	2247      	movs	r2, #71	; 0x47
 8000b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b9a:	2231      	movs	r2, #49	; 0x31
 8000b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000bac:	f002 fe40 	bl	8003830 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f9a3 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000bc8:	f003 f80a 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f995 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000be4:	f003 f9d0 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 f987 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000634 	.word	0x20000634

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a33      	ldr	r2, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_GPIO_Init+0xe8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000c7a:	481c      	ldr	r0, [pc, #112]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c7c:	f000 fd83 	bl	8001786 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PB14 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_14;
 8000c80:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c9a:	f000 fc03 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_GPIO_Init+0xf0>)
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_GPIO_Init+0xec>)
 8000cb4:	f000 fbf6 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <MX_GPIO_Init+0xec>)
 8000ccc:	f000 fbea 	bl	80014a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f000 fba0 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cda:	2028      	movs	r0, #40	; 0x28
 8000cdc:	f000 fbb9 	bl	8001452 <HAL_NVIC_EnableIRQ>

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	10110000 	.word	0x10110000

08000cf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // trigger once when the first rising edge of the first bit of the start flag is detected
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TRIG_Pin) // check that it has been called on the right pin
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d04:	d117      	bne.n	8000d36 <HAL_GPIO_EXTI_Callback+0x42>
	{

		while(loop != 1)
 8000d06:	e012      	b.n	8000d2e <HAL_GPIO_EXTI_Callback+0x3a>
		{
			if(HAL_GPIO_ReadPin(test_GPIO_Port, test_Pin) == 1)
 8000d08:	2108      	movs	r1, #8
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d0c:	f000 fd24 	bl	8001758 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10b      	bne.n	8000d2e <HAL_GPIO_EXTI_Callback+0x3a>
			{
				HAL_TIM_Base_Start_IT(&htim2); // start the timer
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x50>)
 8000d18:	f002 fdda 	bl	80038d0 <HAL_TIM_Base_Start_IT>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // disable this trigger
 8000d1c:	2028      	movs	r0, #40	; 0x28
 8000d1e:	f000 fba6 	bl	800146e <HAL_NVIC_DisableIRQ>
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x54>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	6153      	str	r3, [r2, #20]
				loop = 1;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x58>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
		while(loop != 1)
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d1e8      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x14>
			}
		}
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // turn on the blue on board LED to signal that data is now being sampled
		//j++;
	}
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	20000634 	.word	0x20000634
 8000d48:	40010400 	.word	0x40010400
 8000d4c:	20000394 	.word	0x20000394

08000d50 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if ( htim == &htim2 ) // triggers every 0.5ms
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a59      	ldr	r2, [pc, #356]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f040 80aa 	bne.w	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x166>
		//sprintf(Msg, "Incoming Transmission:\r\n"); // visual to tell user that the program has started recording data
		//CDC_Transmit_FS(Msg, strlen(Msg)); // prints to putty
		//k = 1;
		//}

		if( wait < pulse_delay ) // initially 7 then 1 then 9 then 1 then 9....
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	da0b      	bge.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			wait++;
 8000d6e:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a53      	ldr	r2, [pc, #332]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d76:	6013      	str	r3, [r2, #0]
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4853      	ldr	r0, [pc, #332]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000d80:	f000 fd01 	bl	8001786 <HAL_GPIO_WritePin>
				wait = 0;
				pulse_delay = 1;
			}
		}
	}
}
 8000d84:	e097      	b.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x166>
			if(i == 8)
 8000d86:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d171      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x122>
				if(end_bit_flag != 1)
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d03c      	beq.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0xc0>
					c = strtol(binaryString, 0, 2); // method to convert the first 8 positions in the integer binarystring array to a character
 8000d96:	2202      	movs	r2, #2
 8000d98:	2100      	movs	r1, #0
 8000d9a:	484f      	ldr	r0, [pc, #316]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000d9c:	f007 ff44 	bl	8008c28 <strtol>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000da6:	701a      	strb	r2, [r3, #0]
					if(bytes == 32) // used to print the next entire transmission to a new line (len - 1)
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	d118      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x92>
						sprintf(Msg, "%c\r\n", c); //\r\n
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	494b      	ldr	r1, [pc, #300]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000db8:	484b      	ldr	r0, [pc, #300]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dba:	f007 fe99 	bl	8008af0 <siprintf>
						CDC_Transmit_FS(Msg, strlen(Msg));
 8000dbe:	484a      	ldr	r0, [pc, #296]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dc0:	f7ff f9c6 	bl	8000150 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4847      	ldr	r0, [pc, #284]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dca:	f006 fe31 	bl	8007a30 <CDC_Transmit_FS>
						bytes = 0;
 8000dce:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
						word_end = 1;
 8000dd4:	4b45      	ldr	r3, [pc, #276]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
						end_bit_flag = 1;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e013      	b.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0xba>
						sprintf(Msg, "%c", c); // prints one character at a time
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4941      	ldr	r1, [pc, #260]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000dea:	483f      	ldr	r0, [pc, #252]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dec:	f007 fe80 	bl	8008af0 <siprintf>
						CDC_Transmit_FS(Msg, strlen(Msg));
 8000df0:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000df2:	f7ff f9ad 	bl	8000150 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	483b      	ldr	r0, [pc, #236]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dfc:	f006 fe18 	bl	8007a30 <CDC_Transmit_FS>
						bytes++;
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e08:	6013      	str	r3, [r2, #0]
					wait = 1;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
				if(word_end == 1)
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d113      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0xf0>
					if(wait2 < 1)
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dc0b      	bgt.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0xe8>
						wait2++;
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e28:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e30:	4826      	ldr	r0, [pc, #152]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e32:	f000 fca8 	bl	8001786 <HAL_GPIO_WritePin>
}
 8000e36:	e03e      	b.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x166>
						word_end = 0;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	e03a      	b.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x166>
					loop = 0;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
					end_bit_flag = 0;
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
					i = 0;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
					HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e52:	2028      	movs	r0, #40	; 0x28
 8000e54:	f000 fafd 	bl	8001452 <HAL_NVIC_EnableIRQ>
					wait = 0; // reset pulse delay and set delay to 9 cycles to incorporate both the start and end flags
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
					wait2 = 0;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
					pulse_delay = 6;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e66:	2206      	movs	r2, #6
 8000e68:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000e6c:	f002 fd82 	bl	8003974 <HAL_TIM_Base_Stop_IT>
}
 8000e70:	e021      	b.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x166>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e7a:	f000 fc84 	bl	8001786 <HAL_GPIO_WritePin>
				g_TIMCALLBACK = HAL_GPIO_ReadPin(test_GPIO_Port, test_Pin);
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e82:	f000 fc69 	bl	8001758 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e8c:	601a      	str	r2, [r3, #0]
				binaryString[i] = g_TIMCALLBACK +'0'; // simple trick to convert an int to a char
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3230      	adds	r2, #48	; 0x30
 8000e9a:	b2d1      	uxtb	r1, r2
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e9e:	54d1      	strb	r1, [r2, r3]
				i++;
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ea8:	6013      	str	r3, [r2, #0]
				wait = 0;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
				pulse_delay = 1;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000634 	.word	0x20000634
 8000ec4:	20000384 	.word	0x20000384
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	40010c00 	.word	0x40010c00
 8000ed0:	20000374 	.word	0x20000374
 8000ed4:	20000388 	.word	0x20000388
 8000ed8:	20000378 	.word	0x20000378
 8000edc:	20000630 	.word	0x20000630
 8000ee0:	20000380 	.word	0x20000380
 8000ee4:	0800a410 	.word	0x0800a410
 8000ee8:	200005c8 	.word	0x200005c8
 8000eec:	2000038c 	.word	0x2000038c
 8000ef0:	0800a418 	.word	0x0800a418
 8000ef4:	20000390 	.word	0x20000390
 8000ef8:	20000394 	.word	0x20000394
 8000efc:	2000062c 	.word	0x2000062c

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//printf("Your shit");
  /* USER CODE END Error_Handler_Debug */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x60>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_MspInit+0x60>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d113      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_TIM_Base_MspInit+0x44>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_TIM_Base_MspInit+0x44>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 fa3b 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa4:	201c      	movs	r0, #28
 8000fa6:	f000 fa54 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f8f4 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001012:	f000 fd1a 	bl	8001a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20001cd8 	.word	0x20001cd8

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f002 fcd3 	bl	80039d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000634 	.word	0x20000634

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800103c:	f000 fbbc 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f007 f8ba 	bl	80081ec <__errno>
 8001078:	4602      	mov	r2, r0
 800107a:	230c      	movs	r3, #12
 800107c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20005000 	.word	0x20005000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000398 	.word	0x20000398
 80010ac:	20001fc8 	.word	0x20001fc8

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <SystemInit+0x5c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <SystemInit+0x5c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <SystemInit+0x5c>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <SystemInit+0x5c>)
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SystemInit+0x60>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <SystemInit+0x5c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <SystemInit+0x5c>)
 80010d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <SystemInit+0x5c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SystemInit+0x5c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <SystemInit+0x5c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <SystemInit+0x5c>)
 80010ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SystemInit+0x5c>)
 80010f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SystemInit+0x64>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
#endif 
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	f8ff0000 	.word	0xf8ff0000
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001118:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800112a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113e:	f7ff ffb7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f007 f859 	bl	80081f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001146:	f7ff fc9f 	bl	8000a88 <main>
  bx lr
 800114a:	4770      	bx	lr
  ldr r3, =_sidata
 800114c:	0800a6f0 	.word	0x0800a6f0
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001154:	20000358 	.word	0x20000358
  ldr r2, =_sbss
 8001158:	20000358 	.word	0x20000358
  ldr r3, = _ebss
 800115c:	20001fc8 	.word	0x20001fc8

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x28>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x28>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f945 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f808 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fec4 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f96b 	bl	800148a <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 f925 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000004 	.word	0x20000004
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <HAL_IncTick+0x20>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	2000000c 	.word	0x2000000c
 8001210:	20000810 	.word	0x20000810

08001214 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_GetTick+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000810 	.word	0x20000810

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <__NVIC_EnableIRQ+0x34>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db10      	blt.n	80012f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4909      	ldr	r1, [pc, #36]	; (8001304 <__NVIC_DisableIRQ+0x40>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	3320      	adds	r3, #32
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff90 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff0b 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff20 	bl	8001270 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff13 	bl	800128c <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff21 	bl	80012c4 <__NVIC_DisableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff94 	bl	80013c0 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e127      	b.n	8001708 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8116 	bne.w	8001702 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d034      	beq.n	8001548 <HAL_GPIO_Init+0xa4>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d80d      	bhi.n	80014fe <HAL_GPIO_Init+0x5a>
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d02b      	beq.n	800153e <HAL_GPIO_Init+0x9a>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d804      	bhi.n	80014f4 <HAL_GPIO_Init+0x50>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d031      	beq.n	8001552 <HAL_GPIO_Init+0xae>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d01c      	beq.n	800152c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f2:	e048      	b.n	8001586 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d043      	beq.n	8001580 <HAL_GPIO_Init+0xdc>
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d01b      	beq.n	8001534 <HAL_GPIO_Init+0x90>
          break;
 80014fc:	e043      	b.n	8001586 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014fe:	4a89      	ldr	r2, [pc, #548]	; (8001724 <HAL_GPIO_Init+0x280>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d026      	beq.n	8001552 <HAL_GPIO_Init+0xae>
 8001504:	4a87      	ldr	r2, [pc, #540]	; (8001724 <HAL_GPIO_Init+0x280>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d806      	bhi.n	8001518 <HAL_GPIO_Init+0x74>
 800150a:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_GPIO_Init+0x284>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d020      	beq.n	8001552 <HAL_GPIO_Init+0xae>
 8001510:	4a86      	ldr	r2, [pc, #536]	; (800172c <HAL_GPIO_Init+0x288>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01d      	beq.n	8001552 <HAL_GPIO_Init+0xae>
          break;
 8001516:	e036      	b.n	8001586 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001518:	4a85      	ldr	r2, [pc, #532]	; (8001730 <HAL_GPIO_Init+0x28c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0xae>
 800151e:	4a85      	ldr	r2, [pc, #532]	; (8001734 <HAL_GPIO_Init+0x290>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d016      	beq.n	8001552 <HAL_GPIO_Init+0xae>
 8001524:	4a84      	ldr	r2, [pc, #528]	; (8001738 <HAL_GPIO_Init+0x294>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0xae>
          break;
 800152a:	e02c      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e028      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	3304      	adds	r3, #4
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e023      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	3308      	adds	r3, #8
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e01e      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	330c      	adds	r3, #12
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e019      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155a:	2304      	movs	r3, #4
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e012      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	611a      	str	r2, [r3, #16]
          break;
 8001572:	e008      	b.n	8001586 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001574:	2308      	movs	r3, #8
 8001576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	615a      	str	r2, [r3, #20]
          break;
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2bff      	cmp	r3, #255	; 0xff
 800158a:	d801      	bhi.n	8001590 <HAL_GPIO_Init+0xec>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	e001      	b.n	8001594 <HAL_GPIO_Init+0xf0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d802      	bhi.n	80015a2 <HAL_GPIO_Init+0xfe>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x104>
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	3b08      	subs	r3, #8
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	210f      	movs	r1, #15
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	401a      	ands	r2, r3
 80015ba:	6a39      	ldr	r1, [r7, #32]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	431a      	orrs	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8096 	beq.w	8001702 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d6:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_GPIO_Init+0x298>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_GPIO_Init+0x298>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <HAL_GPIO_Init+0x298>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ee:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x29c>)
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4b      	ldr	r2, [pc, #300]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x19e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x19a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a49      	ldr	r2, [pc, #292]	; (800174c <HAL_GPIO_Init+0x2a8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x196>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x192>
 8001632:	2303      	movs	r3, #3
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x1a0>
 8001636:	2304      	movs	r3, #4
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x1a0>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x1a0>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x1a0>
 8001642:	2300      	movs	r3, #0
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001654:	493a      	ldr	r1, [pc, #232]	; (8001740 <HAL_GPIO_Init+0x29c>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4933      	ldr	r1, [pc, #204]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	492e      	ldr	r1, [pc, #184]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4929      	ldr	r1, [pc, #164]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	4924      	ldr	r1, [pc, #144]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
 80016ca:	e006      	b.n	80016da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	491f      	ldr	r1, [pc, #124]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	491a      	ldr	r1, [pc, #104]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60cb      	str	r3, [r1, #12]
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4915      	ldr	r1, [pc, #84]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 80016fe:	4013      	ands	r3, r2
 8001700:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3301      	adds	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f aed0 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 8001718:	bf00      	nop
 800171a:	372c      	adds	r7, #44	; 0x2c
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	10210000 	.word	0x10210000
 8001728:	10110000 	.word	0x10110000
 800172c:	10120000 	.word	0x10120000
 8001730:	10310000 	.word	0x10310000
 8001734:	10320000 	.word	0x10320000
 8001738:	10220000 	.word	0x10220000
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]
 8001792:	4613      	mov	r3, r2
 8001794:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001796:	787b      	ldrb	r3, [r7, #1]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179c:	887a      	ldrh	r2, [r7, #2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa8c 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af06      	add	r7, sp, #24
 80017ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0fd      	b.n	80019f6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f006 fa42 	bl	8007c98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fc47 	bl	80040b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	687e      	ldr	r6, [r7, #4]
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	602b      	str	r3, [r5, #0]
 800183c:	1d33      	adds	r3, r6, #4
 800183e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f002 fc11 	bl	8004068 <USB_CoreInit>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0ce      	b.n	80019f6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fc42 	bl	80040e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e04c      	b.n	8001904 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3301      	adds	r3, #1
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b298      	uxth	r0, r3
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3336      	adds	r3, #54	; 0x36
 80018a8:	4602      	mov	r2, r0
 80018aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3303      	adds	r3, #3
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3338      	adds	r3, #56	; 0x38
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	333c      	adds	r3, #60	; 0x3c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3340      	adds	r3, #64	; 0x40
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3ad      	bcc.n	800186a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e044      	b.n	800199e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3b5      	bcc.n	8001914 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	687e      	ldr	r6, [r7, #4]
 80019b0:	466d      	mov	r5, sp
 80019b2:	f106 0410 	add.w	r4, r6, #16
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	602b      	str	r3, [r5, #0]
 80019be:	1d33      	adds	r3, r6, #4
 80019c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c2:	6838      	ldr	r0, [r7, #0]
 80019c4:	f002 fb9c 	bl	8004100 <USB_DevInit>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00d      	b.n	80019f6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fb36 	bl	8006060 <USB_DevDisconnect>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_Start+0x16>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e016      	b.n	8001a42 <HAL_PCD_Start+0x44>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fb31 	bl	8004088 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a26:	2101      	movs	r1, #1
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f006 fba8 	bl	800817e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fb0a 	bl	800604c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fb0c 	bl	8006074 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a66:	d102      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fb61 	bl	8002130 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fafe 	bl	8006074 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d112      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f006 f976 	bl	8007d8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f925 	bl	8001cf4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fae0 	bl	8006074 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fac9 	bl	8006074 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aec:	d10b      	bne.n	8001b06 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b00:	b292      	uxth	r2, r2
 8001b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fab2 	bl	8006074 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1a:	d126      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0204 	bic.w	r2, r2, #4
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0208 	bic.w	r2, r2, #8
 8001b46:	b292      	uxth	r2, r2
 8001b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f006 f957 	bl	8007e00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fa80 	bl	8006074 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7e:	f040 8084 	bne.w	8001c8a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	77fb      	strb	r3, [r7, #31]
 8001b86:	e011      	b.n	8001bac <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	441a      	add	r2, r3
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
 8001b96:	8812      	ldrh	r2, [r2, #0]
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	f107 0120 	add.w	r1, r7, #32
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d9ea      	bls.n	8001b88 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001be2:	bf00      	nop
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f6      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	77fb      	strb	r3, [r7, #31]
 8001c12:	e010      	b.n	8001c36 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	7ffa      	ldrb	r2, [r7, #31]
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	440a      	add	r2, r1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	f107 0120 	add.w	r1, r7, #32
 8001c28:	440b      	add	r3, r1
 8001c2a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	3301      	adds	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d9eb      	bls.n	8001c14 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0204 	orr.w	r2, r2, #4
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f006 f8a1 	bl	8007dcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 f9f0 	bl	8006074 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9e:	d10e      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f006 f85a 	bl	8007d72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 f9d6 	bl	8006074 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd2:	d10b      	bne.n	8001cec <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_SetAddress+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e013      	b.n	8001d36 <HAL_PCD_SetAddress+0x42>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f97d 	bl	8006026 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	4608      	mov	r0, r1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	70fb      	strb	r3, [r7, #3]
 8001d50:	460b      	mov	r3, r1
 8001d52:	803b      	strh	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0e      	bge.n	8001d82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dac:	883a      	ldrh	r2, [r7, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	78ba      	ldrb	r2, [r7, #2]
 8001db6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dca:	78bb      	ldrb	r3, [r7, #2]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_EP_Open+0xa6>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_Open+0xc4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 f9a4 	bl	8004140 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e00:	7afb      	ldrb	r3, [r7, #11]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0e      	bge.n	8001e3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
 8001e3a:	e00e      	b.n	8001e5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_PCD_EP_Close+0x6a>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e00e      	b.n	8001e92 <HAL_PCD_EP_Close+0x88>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fcc6 	bl	8004814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 0207 	and.w	r2, r3, #7
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fe78 	bl	8004bec <USB_EPStartXfer>
 8001efc:	e005      	b.n	8001f0a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fe71 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 0207 	and.w	r2, r3, #7
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fe1e 	bl	8004bec <USB_EPStartXfer>
 8001fb0:	e005      	b.n	8001fbe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6979      	ldr	r1, [r7, #20]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fe17 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 0207 	and.w	r2, r3, #7
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d901      	bls.n	8001fe6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e04c      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0e      	bge.n	800200c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
 800200a:	e00c      	b.n	8002026 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_PCD_EP_SetStall+0x7e>
 8002042:	2302      	movs	r3, #2
 8002044:	e01c      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fee9 	bl	8005e2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f004 f80e 	bl	8006092 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d901      	bls.n	80020a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e040      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da0e      	bge.n	80020cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	705a      	strb	r2, [r3, #1]
 80020ca:	e00e      	b.n	80020ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0207 	and.w	r2, r3, #7
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_PCD_EP_ClrStall+0x82>
 8002106:	2302      	movs	r3, #2
 8002108:	e00e      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fed7 	bl	8005ecc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002138:	e2df      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002142:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002150:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8158 	bne.w	800240a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800215a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d152      	bne.n	800220a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002174:	81fb      	strh	r3, [r7, #14]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002184:	b29b      	uxth	r3, r3
 8002186:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3328      	adds	r3, #40	; 0x28
 800218c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3302      	adds	r3, #2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	441a      	add	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021c8:	2100      	movs	r1, #0
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f005 fdb7 	bl	8007d3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 828e 	beq.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8289 	bne.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b292      	uxth	r2, r2
 80021fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002208:	e277      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800221a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800221c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d034      	beq.n	800228e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	3306      	adds	r3, #6
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002262:	b29b      	uxth	r3, r3
 8002264:	f003 ff64 	bl	8006130 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29a      	uxth	r2, r3
 8002270:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002274:	4013      	ands	r3, r2
 8002276:	823b      	strh	r3, [r7, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	8a3a      	ldrh	r2, [r7, #16]
 800227e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002282:	b292      	uxth	r2, r2
 8002284:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fd2c 	bl	8007ce4 <HAL_PCD_SetupStageCallback>
 800228c:	e235      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800228e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002292:	2b00      	cmp	r3, #0
 8002294:	f280 8231 	bge.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022a4:	4013      	ands	r3, r2
 80022a6:	83bb      	strh	r3, [r7, #28]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	8bba      	ldrh	r2, [r7, #28]
 80022ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b2:	b292      	uxth	r2, r2
 80022b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	3306      	adds	r3, #6
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <PCD_EP_ISR_Handler+0x1ee>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	6959      	ldr	r1, [r3, #20]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002302:	b29b      	uxth	r3, r3
 8002304:	f003 ff14 	bl	8006130 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	441a      	add	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002316:	2100      	movs	r1, #0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 fcf5 	bl	8007d08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <PCD_EP_ISR_Handler+0x23c>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002350:	b29a      	uxth	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002364:	b29a      	uxth	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e02f      	b.n	80023cc <PCD_EP_ISR_Handler+0x29c>
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b3e      	cmp	r3, #62	; 0x3e
 8002372:	d813      	bhi.n	800239c <PCD_EP_ISR_Handler+0x26c>
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <PCD_EP_ISR_Handler+0x25e>
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	3301      	adds	r3, #1
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	b29b      	uxth	r3, r3
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	b29a      	uxth	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	e017      	b.n	80023cc <PCD_EP_ISR_Handler+0x29c>
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <PCD_EP_ISR_Handler+0x286>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	3b01      	subs	r3, #1
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023dc:	827b      	strh	r3, [r7, #18]
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023e4:	827b      	strh	r3, [r7, #18]
 80023e6:	8a7b      	ldrh	r3, [r7, #18]
 80023e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	b29b      	uxth	r3, r3
 8002406:	8013      	strh	r3, [r2, #0]
 8002408:	e177      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002420:	2b00      	cmp	r3, #0
 8002422:	f280 80ea 	bge.w	80025fa <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	f640 738f 	movw	r3, #3983	; 0xf8f
 800243c:	4013      	ands	r3, r2
 800243e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002454:	b292      	uxth	r2, r2
 8002456:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002458:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	7b1b      	ldrb	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d122      	bne.n	80024bc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	3306      	adds	r3, #6
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8087 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	88da      	ldrh	r2, [r3, #6]
 80024b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b6:	f003 fe3b 	bl	8006130 <USB_ReadPMA>
 80024ba:	e07c      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	78db      	ldrb	r3, [r3, #3]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d108      	bne.n	80024d6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c6:	461a      	mov	r2, r3
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f923 	bl	8002716 <HAL_PCD_EP_DB_Receive>
 80024d0:	4603      	mov	r3, r0
 80024d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024d4:	e06f      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d021      	beq.n	8002574 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	3302      	adds	r3, #2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002558:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800255a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02a      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	6959      	ldr	r1, [r3, #20]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	891a      	ldrh	r2, [r3, #8]
 800256c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256e:	f003 fddf 	bl	8006130 <USB_ReadPMA>
 8002572:	e020      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	3306      	adds	r3, #6
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800259e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	895a      	ldrh	r2, [r3, #10]
 80025b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b2:	f003 fdbd 	bl	8006130 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025bc:	441a      	add	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	441a      	add	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <PCD_EP_ISR_Handler+0x4b0>
 80025d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d206      	bcs.n	80025ee <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f005 fb8e 	bl	8007d08 <HAL_PCD_DataOutStageCallback>
 80025ec:	e005      	b.n	80025fa <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 faf9 	bl	8004bec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07a      	beq.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	843b      	strh	r3, [r7, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8c3b      	ldrh	r3, [r7, #32]
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d108      	bne.n	800266a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d141      	bne.n	80026ee <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	3302      	adds	r3, #2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002692:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	8bfb      	ldrh	r3, [r7, #30]
 800269a:	429a      	cmp	r2, r3
 800269c:	d906      	bls.n	80026ac <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	8bfb      	ldrh	r3, [r7, #30]
 80026a4:	1ad2      	subs	r2, r2, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	e002      	b.n	80026b2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f005 fb3c 	bl	8007d3e <HAL_PCD_DataInStageCallback>
 80026c6:	e018      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	8bfb      	ldrh	r3, [r7, #30]
 80026ce:	441a      	add	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	8bfb      	ldrh	r3, [r7, #30]
 80026da:	441a      	add	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 fa80 	bl	8004bec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026ec:	e005      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026f0:	461a      	mov	r2, r3
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f91b 	bl	8002930 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002702:	b29b      	uxth	r3, r3
 8002704:	b21b      	sxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f6ff ad17 	blt.w	800213a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b088      	sub	sp, #32
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07e      	beq.n	800282c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	3302      	adds	r3, #2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002756:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	8b7b      	ldrh	r3, [r7, #26]
 800275e:	429a      	cmp	r2, r3
 8002760:	d306      	bcc.n	8002770 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e002      	b.n	8002776 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d123      	bne.n	80027c6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	833b      	strh	r3, [r7, #24]
 800279a:	8b3b      	ldrh	r3, [r7, #24]
 800279c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027a0:	833b      	strh	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	8b3b      	ldrh	r3, [r7, #24]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01f      	beq.n	8002810 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	82fb      	strh	r3, [r7, #22]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280c:	b29b      	uxth	r3, r3
 800280e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002810:	8b7b      	ldrh	r3, [r7, #26]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	891a      	ldrh	r2, [r3, #8]
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	f003 fc83 	bl	8006130 <USB_ReadPMA>
 800282a:	e07c      	b.n	8002926 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	3306      	adds	r3, #6
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002854:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	8b7b      	ldrh	r3, [r7, #26]
 800285c:	429a      	cmp	r2, r3
 800285e:	d306      	bcc.n	800286e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	8b7b      	ldrh	r3, [r7, #26]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	619a      	str	r2, [r3, #24]
 800286c:	e002      	b.n	8002874 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d123      	bne.n	80028c4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	83fb      	strh	r3, [r7, #30]
 8002898:	8bfb      	ldrh	r3, [r7, #30]
 800289a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800289e:	83fb      	strh	r3, [r7, #30]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	8bfb      	ldrh	r3, [r7, #30]
 80028b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11f      	bne.n	800290e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	83bb      	strh	r3, [r7, #28]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8bbb      	ldrh	r3, [r7, #28]
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800290e:	8b7b      	ldrh	r3, [r7, #26]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	895a      	ldrh	r2, [r3, #10]
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	f003 fc05 	bl	8006130 <USB_ReadPMA>
    }
  }

  return count;
 8002926:	8b7b      	ldrh	r3, [r7, #26]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b092      	sub	sp, #72	; 0x48
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8132 	beq.w	8002bae <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	3302      	adds	r3, #2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002972:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800297a:	429a      	cmp	r2, r3
 800297c:	d906      	bls.n	800298c <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002984:	1ad2      	subs	r2, r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	619a      	str	r2, [r3, #24]
 800298a:	e002      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d12c      	bne.n	80029f4 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f005 f9cc 	bl	8007d3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 822f 	beq.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029cc:	827b      	strh	r3, [r7, #18]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	441a      	add	r2, r3
 80029dc:	8a7b      	ldrh	r3, [r7, #18]
 80029de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8013      	strh	r3, [r2, #0]
 80029f2:	e20d      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01f      	beq.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 81e3 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a50:	441a      	add	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d309      	bcc.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	1ad2      	subs	r2, r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	e014      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a96:	e009      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d155      	bne.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x230>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	011a      	lsls	r2, r3, #4
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d112      	bne.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	e047      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b0c:	d811      	bhi.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	3301      	adds	r3, #1
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	e032      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x218>
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e01b      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d117      	bne.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	011a      	lsls	r2, r3, #4
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6959      	ldr	r1, [r3, #20]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	891a      	ldrh	r2, [r3, #8]
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f003 fa7e 	bl	80060a8 <USB_WritePMA>
 8002bac:	e130      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3306      	adds	r3, #6
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d306      	bcc.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be8:	1ad2      	subs	r2, r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	619a      	str	r2, [r3, #24]
 8002bee:	e002      	b.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d12c      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f005 f89a 	bl	8007d3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 80fd 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e0db      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11f      	bne.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f040 80b1 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d309      	bcc.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	621a      	str	r2, [r3, #32]
 8002ce4:	e014      	b.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cfa:	e009      	b.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d155      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d32:	4413      	add	r3, r2
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	011a      	lsls	r2, r3, #4
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d44:	643b      	str	r3, [r7, #64]	; 0x40
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d112      	bne.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x442>
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	e044      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2b3e      	cmp	r3, #62	; 0x3e
 8002d76:	d811      	bhi.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x46c>
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e02f      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	3b01      	subs	r3, #1
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e018      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d114      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	4413      	add	r3, r2
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	011a      	lsls	r2, r3, #4
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6959      	ldr	r1, [r3, #20]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	895a      	ldrh	r2, [r3, #10]
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f003 f94c 	bl	80060a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	823b      	strh	r3, [r7, #16]
 8002e2c:	8a3b      	ldrh	r3, [r7, #16]
 8002e2e:	f083 0310 	eor.w	r3, r3, #16
 8002e32:	823b      	strh	r3, [r7, #16]
 8002e34:	8a3b      	ldrh	r3, [r7, #16]
 8002e36:	f083 0320 	eor.w	r3, r3, #32
 8002e3a:	823b      	strh	r3, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	8a3b      	ldrh	r3, [r7, #16]
 8002e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3748      	adds	r7, #72	; 0x48
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	817b      	strh	r3, [r7, #10]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e88:	897b      	ldrh	r3, [r7, #10]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e009      	b.n	8002eb4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ea0:	897a      	ldrh	r2, [r7, #10]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	80da      	strh	r2, [r3, #6]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e26c      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8087 	beq.w	800301e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1c:	4b8f      	ldr	r3, [pc, #572]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d112      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
 8002f28:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06c      	beq.n	800301c <HAL_RCC_OscConfig+0x12c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d168      	bne.n	800301c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e246      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x76>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e02e      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a77      	ldr	r2, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a71      	ldr	r2, [pc, #452]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f922 	bl	8001214 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f91e 	bl	8001214 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1fa      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xe4>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f90e 	bl	8001214 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f90a 	bl	8001214 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1e6      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x10c>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1ba      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe f8c3 	bl	8001214 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe f8bf 	bl	8001214 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e19b      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4927      	ldr	r1, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe f8a2 	bl	8001214 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe f89e 	bl	8001214 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e17a      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03a      	beq.n	8003174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d019      	beq.n	800313a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310c:	f7fe f882 	bl	8001214 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe f87e 	bl	8001214 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e15a      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 faa8 	bl	8003688 <RCC_Delay>
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe f868 	bl	8001214 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe f864 	bl	8001214 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d908      	bls.n	8003168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e140      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	42420000 	.word	0x42420000
 8003164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b9e      	ldr	r3, [pc, #632]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e9      	bne.n	8003148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a6 	beq.w	80032ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b97      	ldr	r3, [pc, #604]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a93      	ldr	r2, [pc, #588]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b8b      	ldr	r3, [pc, #556]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a8a      	ldr	r2, [pc, #552]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe f825 	bl	8001214 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe f821 	bl	8001214 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0fd      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x4f8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e02d      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x334>
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e01c      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x356>
 800322c:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a6c      	ldr	r2, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fd ffd5 	bl	8001214 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fd ffd1 	bl	8001214 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0ab      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCC_OscConfig+0x37e>
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fd ffbf 	bl	8001214 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fd ffbb 	bl	8001214 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e095      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8081 	beq.w	80033da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d061      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d146      	bne.n	800337a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fd ff8f 	bl	8001214 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fd ff8b 	bl	8001214 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e067      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a19      	ldr	r1, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	430b      	orrs	r3, r1
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fd ff5f 	bl	8001214 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd ff5b 	bl	8001214 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e037      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x46a>
 8003378:	e02f      	b.n	80033da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0x4fc>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd ff48 	bl	8001214 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd ff44 	bl	8001214 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e020      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x498>
 80033a6:	e018      	b.n	80033da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42420060 	.word	0x42420060

080033f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0d0      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d910      	bls.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 0207 	bic.w	r2, r3, #7
 800341a:	4965      	ldr	r1, [pc, #404]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800346e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	494d      	ldr	r1, [pc, #308]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d040      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d115      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e073      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e06b      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4936      	ldr	r1, [pc, #216]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fe98 	bl	8001214 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd fe94 	bl	8001214 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e053      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d210      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4922      	ldr	r1, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e032      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357e:	f000 f821 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003582:	4601      	mov	r1, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
 8003592:	fa21 f303 	lsr.w	r3, r1, r3
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1cc>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fdf6 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800a478 	.word	0x0800a478
 80035bc:	20000004 	.word	0x20000004
 80035c0:	20000008 	.word	0x20000008

080035c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b490      	push	{r4, r7}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035cc:	1d3c      	adds	r4, r7, #4
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035d4:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x40>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x46>
 8003602:	e02d      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003606:	623b      	str	r3, [r7, #32]
      break;
 8003608:	e02d      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003616:	4413      	add	r3, r2
 8003618:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800361c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c5b      	lsrs	r3, r3, #17
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003636:	4413      	add	r3, r2
 8003638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800363c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003642:	fb02 f203 	mul.w	r2, r2, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e004      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	623b      	str	r3, [r7, #32]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003662:	623b      	str	r3, [r7, #32]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6a3b      	ldr	r3, [r7, #32]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc90      	pop	{r4, r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	0800a41c 	.word	0x0800a41c
 8003678:	0800a42c 	.word	0x0800a42c
 800367c:	40021000 	.word	0x40021000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	003d0900 	.word	0x003d0900

08003688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <RCC_Delay+0x34>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <RCC_Delay+0x38>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a5b      	lsrs	r3, r3, #9
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a4:	bf00      	nop
  }
  while (Delay --);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f9      	bne.n	80036a4 <RCC_Delay+0x1c>
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000004 	.word	0x20000004
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	61d3      	str	r3, [r2, #28]
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d118      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003724:	f7fd fd76 	bl	8001214 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	e008      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372c:	f7fd fd72 	bl	8001214 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e06d      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800374a:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d027      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d014      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fd fd41 	bl	8001214 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fd3d 	bl	8001214 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e036      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ee      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4917      	ldr	r1, [pc, #92]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	490b      	ldr	r1, [pc, #44]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	42420440 	.word	0x42420440

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fb8a 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fa92 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e03a      	b.n	800395e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_TIM_Base_Start_IT+0x98>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d009      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_TIM_Base_Start_IT+0x9c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_TIM_Base_Start_IT+0xa0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d010      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	e007      	b.n	800395c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800

08003974 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	f241 1311 	movw	r3, #4369	; 0x1111
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_TIM_Base_Stop_IT+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	f240 4344 	movw	r3, #1092	; 0x444
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_Base_Stop_IT+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d122      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d11b      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0202 	mvn.w	r2, #2
 80039fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9a4 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f997 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9a6 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d122      	bne.n	8003a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d11b      	bne.n	8003a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0204 	mvn.w	r2, #4
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f97a 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f96d 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f97c 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d122      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0208 	mvn.w	r2, #8
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f950 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f943 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f952 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d122      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d11b      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0210 	mvn.w	r2, #16
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2208      	movs	r2, #8
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f926 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f919 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f928 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0201 	mvn.w	r2, #1
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd f8fe 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa6b 	bl	8004056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8ec 	bl	8003d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0220 	mvn.w	r2, #32
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa36 	bl	8004044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_ConfigClockSource+0x18>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0a6      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x166>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d067      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0x120>
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d80b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x6c>
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d073      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x140>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d802      	bhi.n	8003c42 <HAL_TIM_ConfigClockSource+0x62>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d06f      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c40:	e078      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d06c      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x140>
 8003c46:	2b30      	cmp	r3, #48	; 0x30
 8003c48:	d06a      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c4a:	e073      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d00d      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x8c>
 8003c50:	2b70      	cmp	r3, #112	; 0x70
 8003c52:	d804      	bhi.n	8003c5e <HAL_TIM_ConfigClockSource+0x7e>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d033      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0xe0>
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d041      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c5c:	e06a      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d066      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x152>
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d017      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c6a:	e063      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f000 f965 	bl	8003f4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	609a      	str	r2, [r3, #8]
      break;
 8003c98:	e04c      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f000 f94e 	bl	8003f4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cbc:	609a      	str	r2, [r3, #8]
      break;
 8003cbe:	e039      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f000 f8c5 	bl	8003e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2150      	movs	r1, #80	; 0x50
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f91c 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003cde:	e029      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f000 f8e3 	bl	8003eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2160      	movs	r1, #96	; 0x60
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f90c 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003cfe:	e019      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f000 f8a5 	bl	8003e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f8fc 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003d1e:	e009      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 f8f3 	bl	8003f16 <TIM_ITRx_SetConfig>
        break;
 8003d30:	e000      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 030a 	bic.w	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f043 0307 	orr.w	r3, r3, #7
 8003f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e046      	b.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10c      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800

08004044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 0014 	add.w	r0, r7, #20
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	b004      	add	sp, #16
 8004086:	4770      	bx	lr

08004088 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004098:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800409c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004100:	b084      	sub	sp, #16
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	f107 0014 	add.w	r0, r7, #20
 800410e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr

08004140 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004140:	b480      	push	{r7}
 8004142:	b09b      	sub	sp, #108	; 0x6c
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	78db      	ldrb	r3, [r3, #3]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d81f      	bhi.n	80041b2 <USB_ActivateEndpoint+0x72>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <USB_ActivateEndpoint+0x38>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	08004189 	.word	0x08004189
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041bb 	.word	0x080041bb
 8004184:	08004197 	.word	0x08004197
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004188:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800418c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004190:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004194:	e012      	b.n	80041bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004196:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800419e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a2:	e00b      	b.n	80041bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041b0:	e004      	b.n	80041bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041b8:	e000      	b.n	80041bc <USB_ActivateEndpoint+0x7c>
      break;
 80041ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7b1b      	ldrb	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 8149 	bne.w	80044c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8084 	beq.w	8004340 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	88db      	ldrh	r3, [r3, #6]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	81fb      	strh	r3, [r7, #14]
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <USB_ActivateEndpoint+0x17c>
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	81bb      	strh	r3, [r7, #12]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	89bb      	ldrh	r3, [r7, #12]
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	78db      	ldrb	r3, [r3, #3]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d020      	beq.n	8004306 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042da:	813b      	strh	r3, [r7, #8]
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	f083 0320 	eor.w	r3, r3, #32
 80042e2:	813b      	strh	r3, [r7, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]
 8004304:	e27f      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]
 800433e:	e262      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	4413      	add	r3, r2
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	4413      	add	r3, r2
 800435e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	88db      	ldrh	r3, [r3, #6]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	4413      	add	r3, r2
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	4413      	add	r3, r2
 8004392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d112      	bne.n	80043c6 <USB_ActivateEndpoint+0x286>
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e02f      	b.n	8004426 <USB_ActivateEndpoint+0x2e6>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b3e      	cmp	r3, #62	; 0x3e
 80043cc:	d813      	bhi.n	80043f6 <USB_ActivateEndpoint+0x2b6>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <USB_ActivateEndpoint+0x2a8>
 80043e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e4:	3301      	adds	r3, #1
 80043e6:	663b      	str	r3, [r7, #96]	; 0x60
 80043e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e017      	b.n	8004426 <USB_ActivateEndpoint+0x2e6>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	663b      	str	r3, [r7, #96]	; 0x60
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <USB_ActivateEndpoint+0x2d0>
 800440a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440c:	3b01      	subs	r3, #1
 800440e:	663b      	str	r3, [r7, #96]	; 0x60
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	b29b      	uxth	r3, r3
 8004414:	029b      	lsls	r3, r3, #10
 8004416:	b29b      	uxth	r3, r3
 8004418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004420:	b29a      	uxth	r2, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	83fb      	strh	r3, [r7, #30]
 8004434:	8bfb      	ldrh	r3, [r7, #30]
 8004436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <USB_ActivateEndpoint+0x336>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	83bb      	strh	r3, [r7, #28]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	8bbb      	ldrh	r3, [r7, #28]
 8004462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800446a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	837b      	strh	r3, [r7, #26]
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004494:	837b      	strh	r3, [r7, #26]
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800449c:	837b      	strh	r3, [r7, #26]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]
 80044be:	e1a2      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	4413      	add	r3, r2
 800450e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004518:	4413      	add	r3, r2
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	657b      	str	r3, [r7, #84]	; 0x54
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	891b      	ldrh	r3, [r3, #8]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	653b      	str	r3, [r7, #80]	; 0x50
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	4413      	add	r3, r2
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454c:	4413      	add	r3, r2
 800454e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	895b      	ldrh	r3, [r3, #10]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	b29b      	uxth	r3, r3
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004562:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 8091 	bne.w	8004690 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800457c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01b      	beq.n	80045be <USB_ActivateEndpoint+0x47e>
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80045cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <USB_ActivateEndpoint+0x4ce>
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800462c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800462e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004634:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	867b      	strh	r3, [r7, #50]	; 0x32
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
 800468e:	e0ba      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01d      	beq.n	80046e8 <USB_ActivateEndpoint+0x5a8>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01d      	beq.n	8004740 <USB_ActivateEndpoint+0x600>
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d024      	beq.n	8004792 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004766:	f083 0320 	eor.w	r3, r3, #32
 800476a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
 8004790:	e01d      	b.n	80047ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800480a:	4618      	mov	r0, r3
 800480c:	376c      	adds	r7, #108	; 0x6c
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004814:	b480      	push	{r7}
 8004816:	b08d      	sub	sp, #52	; 0x34
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7b1b      	ldrb	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 808e 	bne.w	8004944 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d044      	beq.n	80048ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	81bb      	strh	r3, [r7, #12]
 800483e:	89bb      	ldrh	r3, [r7, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_DeactivateEndpoint+0x6c>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	817b      	strh	r3, [r7, #10]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	813b      	strh	r3, [r7, #8]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	893b      	ldrh	r3, [r7, #8]
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
 80048b8:	e192      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	827b      	strh	r3, [r7, #18]
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <USB_DeactivateEndpoint+0xf6>
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	823b      	strh	r3, [r7, #16]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8a3b      	ldrh	r3, [r7, #16]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	81fb      	strh	r3, [r7, #14]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e14d      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80a5 	bne.w	8004a98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	843b      	strh	r3, [r7, #32]
 800495c:	8c3b      	ldrh	r3, [r7, #32]
 800495e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <USB_DeactivateEndpoint+0x18a>
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	83fb      	strh	r3, [r7, #30]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8bfb      	ldrh	r3, [r7, #30]
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	83bb      	strh	r3, [r7, #28]
 80049ac:	8bbb      	ldrh	r3, [r7, #28]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <USB_DeactivateEndpoint+0x1da>
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	837b      	strh	r3, [r7, #26]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	8b7b      	ldrh	r3, [r7, #26]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	833b      	strh	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	441a      	add	r2, r3
 8004a10:	8b3b      	ldrh	r3, [r7, #24]
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	82fb      	strh	r3, [r7, #22]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	82bb      	strh	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8abb      	ldrh	r3, [r7, #20]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
 8004a96:	e0a3      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_DeactivateEndpoint+0x2d4>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <USB_DeactivateEndpoint+0x324>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3734      	adds	r7, #52	; 0x34
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b0c4      	sub	sp, #272	; 0x110
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	6018      	str	r0, [r3, #0]
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 8557 	bne.w	80056b4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c06:	463b      	mov	r3, r7
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d905      	bls.n	8004c22 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c20:	e004      	b.n	8004c2c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	7b1b      	ldrb	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d12c      	bne.n	8004c90 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6959      	ldr	r1, [r3, #20]
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	88da      	ldrh	r2, [r3, #6]
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	1d38      	adds	r0, r7, #4
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	f001 fa2c 	bl	80060a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	463b      	mov	r3, r7
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	011a      	lsls	r2, r3, #4
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	f000 bcdd 	b.w	800564a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	f040 8347 	bne.w	800532a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	f240 82eb 	bls.w	8005284 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	463b      	mov	r3, r7
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8159 	beq.w	8004fd2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d164      	bne.n	8004dfa <USB_EPStartXfer+0x20e>
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	4413      	add	r3, r2
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011a      	lsls	r2, r3, #4
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d112      	bne.n	8004d88 <USB_EPStartXfer+0x19c>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	e054      	b.n	8004e32 <USB_EPStartXfer+0x246>
 8004d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8e:	d817      	bhi.n	8004dc0 <USB_EPStartXfer+0x1d4>
 8004d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <USB_EPStartXfer+0x1c4>
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004daa:	3301      	adds	r3, #1
 8004dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e038      	b.n	8004e32 <USB_EPStartXfer+0x246>
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <USB_EPStartXfer+0x1f4>
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e01b      	b.n	8004e32 <USB_EPStartXfer+0x246>
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d116      	bne.n	8004e32 <USB_EPStartXfer+0x246>
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	4413      	add	r3, r2
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	895b      	ldrh	r3, [r3, #10]
 8004e38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6959      	ldr	r1, [r3, #20]
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e4c:	1d38      	adds	r0, r7, #4
 8004e4e:	6800      	ldr	r0, [r0, #0]
 8004e50:	f001 f92a 	bl	80060a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5e:	441a      	add	r2, r3
 8004e60:	463b      	mov	r3, r7
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d909      	bls.n	8004e8a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	e008      	b.n	8004e9c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d164      	bne.n	8004f70 <USB_EPStartXfer+0x384>
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	1d3b      	adds	r3, r7, #4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d112      	bne.n	8004efe <USB_EPStartXfer+0x312>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e057      	b.n	8004fae <USB_EPStartXfer+0x3c2>
 8004efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f02:	2b3e      	cmp	r3, #62	; 0x3e
 8004f04:	d817      	bhi.n	8004f36 <USB_EPStartXfer+0x34a>
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <USB_EPStartXfer+0x33a>
 8004f1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f20:	3301      	adds	r3, #1
 8004f22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	029b      	lsls	r3, r3, #10
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e03b      	b.n	8004fae <USB_EPStartXfer+0x3c2>
 8004f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <USB_EPStartXfer+0x36a>
 8004f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e01e      	b.n	8004fae <USB_EPStartXfer+0x3c2>
 8004f70:	463b      	mov	r3, r7
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d119      	bne.n	8004fae <USB_EPStartXfer+0x3c2>
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	4413      	add	r3, r2
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	463b      	mov	r3, r7
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	891b      	ldrh	r3, [r3, #8]
 8004fb4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb8:	463b      	mov	r3, r7
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fc8:	1d38      	adds	r0, r7, #4
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	f001 f86c 	bl	80060a8 <USB_WritePMA>
 8004fd0:	e33b      	b.n	800564a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d164      	bne.n	80050a6 <USB_EPStartXfer+0x4ba>
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff0:	4413      	add	r3, r2
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	011a      	lsls	r2, r3, #4
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
 8005006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d112      	bne.n	8005034 <USB_EPStartXfer+0x448>
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005018:	b29a      	uxth	r2, r3
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	e057      	b.n	80050e4 <USB_EPStartXfer+0x4f8>
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005038:	2b3e      	cmp	r3, #62	; 0x3e
 800503a:	d817      	bhi.n	800506c <USB_EPStartXfer+0x480>
 800503c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <USB_EPStartXfer+0x470>
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005056:	3301      	adds	r3, #1
 8005058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800505c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005060:	b29b      	uxth	r3, r3
 8005062:	029b      	lsls	r3, r3, #10
 8005064:	b29a      	uxth	r2, r3
 8005066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e03b      	b.n	80050e4 <USB_EPStartXfer+0x4f8>
 800506c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <USB_EPStartXfer+0x4a0>
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005086:	3b01      	subs	r3, #1
 8005088:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	b29b      	uxth	r3, r3
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e01e      	b.n	80050e4 <USB_EPStartXfer+0x4f8>
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d119      	bne.n	80050e4 <USB_EPStartXfer+0x4f8>
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	657b      	str	r3, [r7, #84]	; 0x54
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c4:	4413      	add	r3, r2
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	011a      	lsls	r2, r3, #4
 80050d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
 80050da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050de:	b29a      	uxth	r2, r3
 80050e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	891b      	ldrh	r3, [r3, #8]
 80050ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ee:	463b      	mov	r3, r7
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6959      	ldr	r1, [r3, #20]
 80050f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050fe:	1d38      	adds	r0, r7, #4
 8005100:	6800      	ldr	r0, [r0, #0]
 8005102:	f000 ffd1 	bl	80060a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	441a      	add	r2, r3
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005118:	463b      	mov	r3, r7
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d909      	bls.n	800513c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	621a      	str	r2, [r3, #32]
 800513a:	e008      	b.n	800514e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005146:	463b      	mov	r3, r7
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d164      	bne.n	8005228 <USB_EPStartXfer+0x63c>
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005172:	4413      	add	r3, r2
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	011a      	lsls	r2, r3, #4
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	4413      	add	r3, r2
 8005182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
 8005188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d112      	bne.n	80051b6 <USB_EPStartXfer+0x5ca>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800519a:	b29a      	uxth	r2, r3
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e054      	b.n	8005260 <USB_EPStartXfer+0x674>
 80051b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ba:	2b3e      	cmp	r3, #62	; 0x3e
 80051bc:	d817      	bhi.n	80051ee <USB_EPStartXfer+0x602>
 80051be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <USB_EPStartXfer+0x5f2>
 80051d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051d8:	3301      	adds	r3, #1
 80051da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	e038      	b.n	8005260 <USB_EPStartXfer+0x674>
 80051ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <USB_EPStartXfer+0x622>
 8005204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005208:	3b01      	subs	r3, #1
 800520a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800520e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005220:	b29a      	uxth	r2, r3
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	e01b      	b.n	8005260 <USB_EPStartXfer+0x674>
 8005228:	463b      	mov	r3, r7
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d116      	bne.n	8005260 <USB_EPStartXfer+0x674>
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005240:	4413      	add	r3, r2
 8005242:	647b      	str	r3, [r7, #68]	; 0x44
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	011a      	lsls	r2, r3, #4
 800524c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524e:	4413      	add	r3, r2
 8005250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525a:	b29a      	uxth	r2, r3
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	895b      	ldrh	r3, [r3, #10]
 8005266:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6959      	ldr	r1, [r3, #20]
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005274:	b29b      	uxth	r3, r3
 8005276:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800527a:	1d38      	adds	r0, r7, #4
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f000 ff13 	bl	80060a8 <USB_WritePMA>
 8005282:	e1e2      	b.n	800564a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005284:	463b      	mov	r3, r7
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80052be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	663b      	str	r3, [r7, #96]	; 0x60
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e6:	4413      	add	r3, r2
 80052e8:	663b      	str	r3, [r7, #96]	; 0x60
 80052ea:	463b      	mov	r3, r7
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	011a      	lsls	r2, r3, #4
 80052f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052f4:	4413      	add	r3, r2
 80052f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005300:	b29a      	uxth	r2, r3
 8005302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005304:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	891b      	ldrh	r3, [r3, #8]
 800530c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	b29b      	uxth	r3, r3
 800531c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005320:	1d38      	adds	r0, r7, #4
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	f000 fec0 	bl	80060a8 <USB_WritePMA>
 8005328:	e18f      	b.n	800564a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800532a:	1d3b      	adds	r3, r7, #4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 808f 	beq.w	8005464 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	67bb      	str	r3, [r7, #120]	; 0x78
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d164      	bne.n	8005420 <USB_EPStartXfer+0x834>
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
 800535c:	1d3b      	adds	r3, r7, #4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800536a:	4413      	add	r3, r2
 800536c:	673b      	str	r3, [r7, #112]	; 0x70
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	011a      	lsls	r2, r3, #4
 8005376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005378:	4413      	add	r3, r2
 800537a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d112      	bne.n	80053ae <USB_EPStartXfer+0x7c2>
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005392:	b29a      	uxth	r2, r3
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e054      	b.n	8005458 <USB_EPStartXfer+0x86c>
 80053ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b2:	2b3e      	cmp	r3, #62	; 0x3e
 80053b4:	d817      	bhi.n	80053e6 <USB_EPStartXfer+0x7fa>
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <USB_EPStartXfer+0x7ea>
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	3301      	adds	r3, #1
 80053d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e038      	b.n	8005458 <USB_EPStartXfer+0x86c>
 80053e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <USB_EPStartXfer+0x81a>
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005400:	3b01      	subs	r3, #1
 8005402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540a:	b29b      	uxth	r3, r3
 800540c:	029b      	lsls	r3, r3, #10
 800540e:	b29b      	uxth	r3, r3
 8005410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005418:	b29a      	uxth	r2, r3
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e01b      	b.n	8005458 <USB_EPStartXfer+0x86c>
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d116      	bne.n	8005458 <USB_EPStartXfer+0x86c>
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005438:	4413      	add	r3, r2
 800543a:	67bb      	str	r3, [r7, #120]	; 0x78
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005446:	4413      	add	r3, r2
 8005448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800544c:	677b      	str	r3, [r7, #116]	; 0x74
 800544e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005452:	b29a      	uxth	r2, r3
 8005454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005458:	463b      	mov	r3, r7
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	895b      	ldrh	r3, [r3, #10]
 800545e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005462:	e097      	b.n	8005594 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d168      	bne.n	8005540 <USB_EPStartXfer+0x954>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005486:	4413      	add	r3, r2
 8005488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005498:	4413      	add	r3, r2
 800549a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d112      	bne.n	80054ce <USB_EPStartXfer+0x8e2>
 80054a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e05d      	b.n	800558a <USB_EPStartXfer+0x99e>
 80054ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d2:	2b3e      	cmp	r3, #62	; 0x3e
 80054d4:	d817      	bhi.n	8005506 <USB_EPStartXfer+0x91a>
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <USB_EPStartXfer+0x90a>
 80054ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054f0:	3301      	adds	r3, #1
 80054f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e041      	b.n	800558a <USB_EPStartXfer+0x99e>
 8005506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <USB_EPStartXfer+0x93a>
 800551c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005520:	3b01      	subs	r3, #1
 8005522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005526:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e024      	b.n	800558a <USB_EPStartXfer+0x99e>
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d11f      	bne.n	800558a <USB_EPStartXfer+0x99e>
 800554a:	1d3b      	adds	r3, r7, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005562:	4413      	add	r3, r2
 8005564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005574:	4413      	add	r3, r2
 8005576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800557e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	891b      	ldrh	r3, [r3, #8]
 8005590:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055a4:	1d38      	adds	r0, r7, #4
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	f000 fd7e 	bl	80060a8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d122      	bne.n	80055fc <USB_EPStartXfer+0xa10>
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80055e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e026      	b.n	800564a <USB_EPStartXfer+0xa5e>
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d121      	bne.n	800564a <USB_EPStartXfer+0xa5e>
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f107 020e 	add.w	r2, r7, #14
 8005660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005668:	8013      	strh	r3, [r2, #0]
 800566a:	f107 030e 	add.w	r3, r7, #14
 800566e:	f107 020e 	add.w	r2, r7, #14
 8005672:	8812      	ldrh	r2, [r2, #0]
 8005674:	f082 0210 	eor.w	r2, r2, #16
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	f107 030e 	add.w	r3, r7, #14
 800567e:	f107 020e 	add.w	r2, r7, #14
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	f082 0220 	eor.w	r2, r2, #32
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	f107 030e 	add.w	r3, r7, #14
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]
 80056b2:	e3b5      	b.n	8005e20 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	7b1b      	ldrb	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 8090 	bne.w	80057e0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d90e      	bls.n	80056ee <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	463b      	mov	r3, r7
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	619a      	str	r2, [r3, #24]
 80056ec:	e008      	b.n	8005700 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005718:	4413      	add	r3, r2
 800571a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800571e:	463b      	mov	r3, r7
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800572a:	4413      	add	r3, r2
 800572c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d116      	bne.n	800576a <USB_EPStartXfer+0xb7e>
 800573c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005748:	b29a      	uxth	r2, r3
 800574a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005760:	b29a      	uxth	r2, r3
 8005762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e32c      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576e:	2b3e      	cmp	r3, #62	; 0x3e
 8005770:	d818      	bhi.n	80057a4 <USB_EPStartXfer+0xbb8>
 8005772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <USB_EPStartXfer+0xba6>
 8005788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800578c:	3301      	adds	r3, #1
 800578e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005796:	b29b      	uxth	r3, r3
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e30f      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
 80057a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <USB_EPStartXfer+0xbd8>
 80057ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057be:	3b01      	subs	r3, #1
 80057c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e2f1      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	78db      	ldrb	r3, [r3, #3]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f040 818f 	bne.w	8005b0a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d175      	bne.n	80058e2 <USB_EPStartXfer+0xcf6>
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800580e:	4413      	add	r3, r2
 8005810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005820:	4413      	add	r3, r2
 8005822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582a:	463b      	mov	r3, r7
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d116      	bne.n	8005862 <USB_EPStartXfer+0xc76>
 8005834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29a      	uxth	r2, r3
 800585a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e065      	b.n	800592e <USB_EPStartXfer+0xd42>
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b3e      	cmp	r3, #62	; 0x3e
 800586a:	d81a      	bhi.n	80058a2 <USB_EPStartXfer+0xcb6>
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <USB_EPStartXfer+0xca4>
 8005886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800588a:	3301      	adds	r3, #1
 800588c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e045      	b.n	800592e <USB_EPStartXfer+0xd42>
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ae:	463b      	mov	r3, r7
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <USB_EPStartXfer+0xcda>
 80058bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	e025      	b.n	800592e <USB_EPStartXfer+0xd42>
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d120      	bne.n	800592e <USB_EPStartXfer+0xd42>
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058f4:	1d3b      	adds	r3, r7, #4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005904:	4413      	add	r3, r2
 8005906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	011a      	lsls	r2, r3, #4
 8005912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005916:	4413      	add	r3, r2
 8005918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d175      	bne.n	8005a2c <USB_EPStartXfer+0xe40>
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005958:	4413      	add	r3, r2
 800595a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	011a      	lsls	r2, r3, #4
 8005966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800596a:	4413      	add	r3, r2
 800596c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d116      	bne.n	80059ac <USB_EPStartXfer+0xdc0>
 800597e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800598a:	b29a      	uxth	r2, r3
 800598c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e061      	b.n	8005a70 <USB_EPStartXfer+0xe84>
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b3e      	cmp	r3, #62	; 0x3e
 80059b4:	d81a      	bhi.n	80059ec <USB_EPStartXfer+0xe00>
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059c2:	463b      	mov	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <USB_EPStartXfer+0xdee>
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	3301      	adds	r3, #1
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	b29b      	uxth	r3, r3
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	e041      	b.n	8005a70 <USB_EPStartXfer+0xe84>
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <USB_EPStartXfer+0xe24>
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e021      	b.n	8005a70 <USB_EPStartXfer+0xe84>
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d11c      	bne.n	8005a70 <USB_EPStartXfer+0xe84>
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a46:	4413      	add	r3, r2
 8005a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	011a      	lsls	r2, r3, #4
 8005a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a6e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81a4 	beq.w	8005dc4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a90:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USB_EPStartXfer+0xebc>
 8005a9c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10d      	bne.n	8005ac4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005aa8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 8187 	bne.w	8005dc4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ab6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 8180 	bne.w	8005dc4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ac4:	1d3b      	adds	r3, r7, #4
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]
 8005b08:	e15c      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 8155 	bne.w	8005dc0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d90e      	bls.n	8005b44 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	619a      	str	r2, [r3, #24]
 8005b42:	e008      	b.n	8005b56 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d16f      	bne.n	8005c40 <USB_EPStartXfer+0x1054>
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b78:	4413      	add	r3, r2
 8005b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b7e:	463b      	mov	r3, r7
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	011a      	lsls	r2, r3, #4
 8005b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d116      	bne.n	8005bca <USB_EPStartXfer+0xfde>
 8005b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	e05f      	b.n	8005c8a <USB_EPStartXfer+0x109e>
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bce:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd0:	d818      	bhi.n	8005c04 <USB_EPStartXfer+0x1018>
 8005bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <USB_EPStartXfer+0x1006>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e042      	b.n	8005c8a <USB_EPStartXfer+0x109e>
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <USB_EPStartXfer+0x1038>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	e024      	b.n	8005c8a <USB_EPStartXfer+0x109e>
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11f      	bne.n	8005c8a <USB_EPStartXfer+0x109e>
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c62:	4413      	add	r3, r2
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	011a      	lsls	r2, r3, #4
 8005c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d16f      	bne.n	8005d7c <USB_EPStartXfer+0x1190>
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	011a      	lsls	r2, r3, #4
 8005cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <USB_EPStartXfer+0x111a>
 8005cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e05e      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
 8005d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0c:	d818      	bhi.n	8005d40 <USB_EPStartXfer+0x1154>
 8005d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <USB_EPStartXfer+0x1142>
 8005d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e041      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
 8005d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <USB_EPStartXfer+0x1174>
 8005d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	029b      	lsls	r3, r3, #10
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e023      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d11e      	bne.n	8005dc4 <USB_EPStartXfer+0x11d8>
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d96:	4413      	add	r3, r2
 8005d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e001      	b.n	8005dc4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e02e      	b.n	8005e22 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005de2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005de6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005dee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005df2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005df6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d020      	beq.n	8005e80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e54:	81bb      	strh	r3, [r7, #12]
 8005e56:	89bb      	ldrh	r3, [r7, #12]
 8005e58:	f083 0310 	eor.w	r3, r3, #16
 8005e5c:	81bb      	strh	r3, [r7, #12]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	89bb      	ldrh	r3, [r7, #12]
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
 8005e7e:	e01f      	b.n	8005ec0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	81fb      	strh	r3, [r7, #14]
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e9e:	81fb      	strh	r3, [r7, #14]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	7b1b      	ldrb	r3, [r3, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 809d 	bne.w	800601a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d04c      	beq.n	8005f82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	823b      	strh	r3, [r7, #16]
 8005ef6:	8a3b      	ldrh	r3, [r7, #16]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <USB_EPClearStall+0x6c>
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	81fb      	strh	r3, [r7, #14]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	89fb      	ldrh	r3, [r7, #14]
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	78db      	ldrb	r3, [r3, #3]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d06c      	beq.n	800601a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f56:	81bb      	strh	r3, [r7, #12]
 8005f58:	89bb      	ldrh	r3, [r7, #12]
 8005f5a:	f083 0320 	eor.w	r3, r3, #32
 8005f5e:	81bb      	strh	r3, [r7, #12]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	89bb      	ldrh	r3, [r7, #12]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
 8005f80:	e04b      	b.n	800601a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	82fb      	strh	r3, [r7, #22]
 8005f90:	8afb      	ldrh	r3, [r7, #22]
 8005f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01b      	beq.n	8005fd2 <USB_EPClearStall+0x106>
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	82bb      	strh	r3, [r7, #20]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	8abb      	ldrh	r3, [r7, #20]
 8005fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	827b      	strh	r3, [r7, #18]
 8005fea:	8a7b      	ldrh	r3, [r7, #18]
 8005fec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ff0:	827b      	strh	r3, [r7, #18]
 8005ff2:	8a7b      	ldrh	r3, [r7, #18]
 8005ff4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ff8:	827b      	strh	r3, [r7, #18]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	8a7b      	ldrh	r3, [r7, #18]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2280      	movs	r2, #128	; 0x80
 800603c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006082:	b29b      	uxth	r3, r3
 8006084:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b08d      	sub	sp, #52	; 0x34
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4611      	mov	r1, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	460b      	mov	r3, r1
 80060b8:	80fb      	strh	r3, [r7, #6]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060be:	88bb      	ldrh	r3, [r7, #4]
 80060c0:	3301      	adds	r3, #1
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	005a      	lsls	r2, r3, #1
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e0:	e01e      	b.n	8006120 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	3301      	adds	r3, #1
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	b29a      	uxth	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	3302      	adds	r3, #2
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	3302      	adds	r3, #2
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	3301      	adds	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	3b01      	subs	r3, #1
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1dd      	bne.n	80060e2 <USB_WritePMA+0x3a>
  }
}
 8006126:	bf00      	nop
 8006128:	3734      	adds	r7, #52	; 0x34
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006130:	b480      	push	{r7}
 8006132:	b08b      	sub	sp, #44	; 0x2c
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	460b      	mov	r3, r1
 8006140:	80fb      	strh	r3, [r7, #6]
 8006142:	4613      	mov	r3, r2
 8006144:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006146:	88bb      	ldrh	r3, [r7, #4]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	005a      	lsls	r2, r3, #1
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	e01b      	b.n	80061a2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	3302      	adds	r3, #2
 8006176:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	b2da      	uxtb	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	3302      	adds	r3, #2
 800619a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	3b01      	subs	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e0      	bne.n	800616a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80061a8:	88bb      	ldrh	r3, [r7, #4]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	701a      	strb	r2, [r3, #0]
  }
}
 80061c4:	bf00      	nop
 80061c6:	372c      	adds	r7, #44	; 0x2c
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7c1b      	ldrb	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d115      	bne.n	8006212 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ea:	2202      	movs	r2, #2
 80061ec:	2181      	movs	r1, #129	; 0x81
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fe89 	bl	8007f06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061fe:	2202      	movs	r2, #2
 8006200:	2101      	movs	r1, #1
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fe7f 	bl	8007f06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006210:	e012      	b.n	8006238 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006212:	2340      	movs	r3, #64	; 0x40
 8006214:	2202      	movs	r2, #2
 8006216:	2181      	movs	r1, #129	; 0x81
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fe74 	bl	8007f06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	2202      	movs	r2, #2
 8006228:	2101      	movs	r1, #1
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fe6b 	bl	8007f06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006238:	2308      	movs	r3, #8
 800623a:	2203      	movs	r2, #3
 800623c:	2182      	movs	r1, #130	; 0x82
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fe61 	bl	8007f06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800624a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800624e:	f001 ff81 	bl	8008154 <USBD_static_malloc>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e026      	b.n	80062b8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7c1b      	ldrb	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800629a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629e:	2101      	movs	r1, #1
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 ff21 	bl	80080e8 <USBD_LL_PrepareReceive>
 80062a6:	e007      	b.n	80062b8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	2101      	movs	r1, #1
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 ff18 	bl	80080e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80062d2:	2181      	movs	r1, #129	; 0x81
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fe3c 	bl	8007f52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80062e0:	2101      	movs	r1, #1
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fe35 	bl	8007f52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062f0:	2182      	movs	r1, #130	; 0x82
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe2d 	bl	8007f52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006318:	4618      	mov	r0, r3
 800631a:	f001 ff27 	bl	800816c <USBD_static_free>
    pdev->pClassData = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006356:	2b00      	cmp	r3, #0
 8006358:	d039      	beq.n	80063ce <USBD_CDC_Setup+0x9e>
 800635a:	2b20      	cmp	r3, #32
 800635c:	d17c      	bne.n	8006458 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	88db      	ldrh	r3, [r3, #6]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d029      	beq.n	80063ba <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b25b      	sxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	da11      	bge.n	8006394 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800637c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	88d2      	ldrh	r2, [r2, #6]
 8006382:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006384:	6939      	ldr	r1, [r7, #16]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	88db      	ldrh	r3, [r3, #6]
 800638a:	461a      	mov	r2, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f9f9 	bl	8007784 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006392:	e068      	b.n	8006466 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785a      	ldrb	r2, [r3, #1]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063aa:	6939      	ldr	r1, [r7, #16]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fa14 	bl	80077e0 <USBD_CtlPrepareRx>
      break;
 80063b8:	e055      	b.n	8006466 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7850      	ldrb	r0, [r2, #1]
 80063c6:	2200      	movs	r2, #0
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	4798      	blx	r3
      break;
 80063cc:	e04b      	b.n	8006466 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b0a      	cmp	r3, #10
 80063d4:	d017      	beq.n	8006406 <USBD_CDC_Setup+0xd6>
 80063d6:	2b0b      	cmp	r3, #11
 80063d8:	d029      	beq.n	800642e <USBD_CDC_Setup+0xfe>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d133      	bne.n	8006446 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d107      	bne.n	80063f8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	2202      	movs	r2, #2
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f9c7 	bl	8007784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063f6:	e02e      	b.n	8006456 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f958 	bl	80076b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006400:	2302      	movs	r3, #2
 8006402:	75fb      	strb	r3, [r7, #23]
          break;
 8006404:	e027      	b.n	8006456 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	2b03      	cmp	r3, #3
 800640e:	d107      	bne.n	8006420 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006410:	f107 030f 	add.w	r3, r7, #15
 8006414:	2201      	movs	r2, #1
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f9b3 	bl	8007784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800641e:	e01a      	b.n	8006456 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f944 	bl	80076b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006428:	2302      	movs	r3, #2
 800642a:	75fb      	strb	r3, [r7, #23]
          break;
 800642c:	e013      	b.n	8006456 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	2b03      	cmp	r3, #3
 8006436:	d00d      	beq.n	8006454 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f938 	bl	80076b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006440:	2302      	movs	r3, #2
 8006442:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006444:	e006      	b.n	8006454 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f931 	bl	80076b0 <USBD_CtlError>
          ret = USBD_FAIL;
 800644e:	2302      	movs	r3, #2
 8006450:	75fb      	strb	r3, [r7, #23]
          break;
 8006452:	e000      	b.n	8006456 <USBD_CDC_Setup+0x126>
          break;
 8006454:	bf00      	nop
      }
      break;
 8006456:	e006      	b.n	8006466 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f928 	bl	80076b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006460:	2302      	movs	r3, #2
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	bf00      	nop
  }

  return ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d03a      	beq.n	800650c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	331c      	adds	r3, #28
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d029      	beq.n	8006500 <USBD_CDC_DataIn+0x90>
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	331c      	adds	r3, #28
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	78f9      	ldrb	r1, [r7, #3]
 80064c0:	68b8      	ldr	r0, [r7, #8]
 80064c2:	460b      	mov	r3, r1
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4403      	add	r3, r0
 80064cc:	3338      	adds	r3, #56	; 0x38
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064d4:	fb03 f301 	mul.w	r3, r3, r1
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d110      	bne.n	8006500 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	331c      	adds	r3, #28
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064f2:	78f9      	ldrb	r1, [r7, #3]
 80064f4:	2300      	movs	r3, #0
 80064f6:	2200      	movs	r2, #0
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fdd2 	bl	80080a2 <USBD_LL_Transmit>
 80064fe:	e003      	b.n	8006508 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fdfd 	bl	800812e <USBD_LL_GetRxDataSize>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800655a:	4611      	mov	r1, r2
 800655c:	4798      	blx	r3

    return USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006582:	2b00      	cmp	r3, #0
 8006584:	d015      	beq.n	80065b2 <USBD_CDC_EP0_RxReady+0x46>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800658c:	2bff      	cmp	r3, #255	; 0xff
 800658e:	d010      	beq.n	80065b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800659e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065a6:	b292      	uxth	r2, r2
 80065a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2243      	movs	r2, #67	; 0x43
 80065c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80065ca:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000098 	.word	0x20000098

080065dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2243      	movs	r2, #67	; 0x43
 80065e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000054 	.word	0x20000054

080065fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2243      	movs	r2, #67	; 0x43
 8006608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800660a:	4b03      	ldr	r3, [pc, #12]	; (8006618 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	200000dc 	.word	0x200000dc

0800661c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	220a      	movs	r2, #10
 8006628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000010 	.word	0x20000010

0800663c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006646:	2302      	movs	r3, #2
 8006648:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01c      	beq.n	8006714 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d115      	bne.n	8006710 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006702:	b29b      	uxth	r3, r3
 8006704:	2181      	movs	r1, #129	; 0x81
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fccb 	bl	80080a2 <USBD_LL_Transmit>

      return USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e002      	b.n	8006716 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006714:	2302      	movs	r3, #2
  }
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7c1b      	ldrb	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fccb 	bl	80080e8 <USBD_LL_PrepareReceive>
 8006752:	e007      	b.n	8006764 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	2101      	movs	r1, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fcc2 	bl	80080e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e000      	b.n	800676a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006768:	2302      	movs	r3, #2
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006786:	2302      	movs	r3, #2
 8006788:	e01a      	b.n	80067c0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	79fa      	ldrb	r2, [r7, #7]
 80067b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fb2f 	bl	8007e1c <USBD_LL_Init>

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e001      	b.n	80067ee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80067ea:	2302      	movs	r3, #2
 80067ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fb64 	bl	8007ed0 <USBD_LL_Start>

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006832:	2302      	movs	r3, #2
 8006834:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	4611      	mov	r1, r2
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	4611      	mov	r1, r2
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3

  return USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fecb 	bl	8007638 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d00c      	beq.n	80068e0 <USBD_LL_SetupStage+0x56>
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d302      	bcc.n	80068d0 <USBD_LL_SetupStage+0x46>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d010      	beq.n	80068f0 <USBD_LL_SetupStage+0x66>
 80068ce:	e017      	b.n	8006900 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9cb 	bl	8006c74 <USBD_StdDevReq>
      break;
 80068de:	e01a      	b.n	8006916 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa2d 	bl	8006d48 <USBD_StdItfReq>
      break;
 80068ee:	e012      	b.n	8006916 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fa6b 	bl	8006dd4 <USBD_StdEPReq>
      break;
 80068fe:	e00a      	b.n	8006916 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fb3e 	bl	8007f90 <USBD_LL_StallEP>
      break;
 8006914:	bf00      	nop
  }

  return USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	460b      	mov	r3, r1
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d14b      	bne.n	80069cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800693a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006942:	2b03      	cmp	r3, #3
 8006944:	d134      	bne.n	80069b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	429a      	cmp	r2, r3
 8006950:	d919      	bls.n	8006986 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006968:	429a      	cmp	r2, r3
 800696a:	d203      	bcs.n	8006974 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006970:	b29b      	uxth	r3, r3
 8006972:	e002      	b.n	800697a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 ff4c 	bl	800781c <USBD_CtlContinueRx>
 8006984:	e038      	b.n	80069f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006998:	2b03      	cmp	r3, #3
 800699a:	d105      	bne.n	80069a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 ff49 	bl	8007840 <USBD_CtlSendStatus>
 80069ae:	e023      	b.n	80069f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d11e      	bne.n	80069f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069c2:	2100      	movs	r1, #0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fae3 	bl	8007f90 <USBD_LL_StallEP>
 80069ca:	e015      	b.n	80069f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00d      	beq.n	80069f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d108      	bne.n	80069f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	7afa      	ldrb	r2, [r7, #11]
 80069ec:	4611      	mov	r1, r2
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	4798      	blx	r3
 80069f2:	e001      	b.n	80069f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e000      	b.n	80069fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d17f      	bne.n	8006b16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d15c      	bne.n	8006ae0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d915      	bls.n	8006a5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 feb6 	bl	80077bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 fb46 	bl	80080e8 <USBD_LL_PrepareReceive>
 8006a5c:	e04e      	b.n	8006afc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	6912      	ldr	r2, [r2, #16]
 8006a66:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a6a:	fb02 f201 	mul.w	r2, r2, r1
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11c      	bne.n	8006aae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d316      	bcc.n	8006aae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d20f      	bcs.n	8006aae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2100      	movs	r1, #0
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fe92 	bl	80077bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f001 fb1e 	bl	80080e8 <USBD_LL_PrepareReceive>
 8006aac:	e026      	b.n	8006afc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d105      	bne.n	8006ad0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 fa5c 	bl	8007f90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fec4 	bl	8007866 <USBD_CtlReceiveStatus>
 8006ade:	e00d      	b.n	8006afc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d004      	beq.n	8006af4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 fa4a 	bl	8007f90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11d      	bne.n	8006b42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fe83 	bl	8006812 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b14:	e015      	b.n	8006b42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d108      	bne.n	8006b3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	7afa      	ldrb	r2, [r7, #11]
 8006b36:	4611      	mov	r1, r2
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	4798      	blx	r3
 8006b3c:	e001      	b.n	8006b42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e000      	b.n	8006b44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f9d3 	bl	8007f06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	2200      	movs	r2, #0
 8006b74:	2180      	movs	r1, #128	; 0x80
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f9c5 	bl	8007f06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2240      	movs	r2, #64	; 0x40
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6852      	ldr	r2, [r2, #4]
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
  }

  return USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2204      	movs	r2, #4
 8006c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d105      	bne.n	8006c32 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d10b      	bne.n	8006c68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d004      	beq.n	8006c98 <USBD_StdDevReq+0x24>
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d002      	beq.n	8006c98 <USBD_StdDevReq+0x24>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <USBD_StdDevReq+0x34>
 8006c96:	e04c      	b.n	8006d32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
      break;
 8006ca6:	e049      	b.n	8006d3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d83a      	bhi.n	8006d26 <USBD_StdDevReq+0xb2>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <USBD_StdDevReq+0x44>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006d09 	.word	0x08006d09
 8006cbc:	08006d1d 	.word	0x08006d1d
 8006cc0:	08006d27 	.word	0x08006d27
 8006cc4:	08006d13 	.word	0x08006d13
 8006cc8:	08006d27 	.word	0x08006d27
 8006ccc:	08006ceb 	.word	0x08006ceb
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006d27 	.word	0x08006d27
 8006cd8:	08006cff 	.word	0x08006cff
 8006cdc:	08006cf5 	.word	0x08006cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9d4 	bl	8007090 <USBD_GetDescriptor>
          break;
 8006ce8:	e022      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb37 	bl	8007360 <USBD_SetAddress>
          break;
 8006cf2:	e01d      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb74 	bl	80073e4 <USBD_SetConfig>
          break;
 8006cfc:	e018      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbfd 	bl	8007500 <USBD_GetConfig>
          break;
 8006d06:	e013      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc2c 	bl	8007568 <USBD_GetStatus>
          break;
 8006d10:	e00e      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fc5a 	bl	80075ce <USBD_SetFeature>
          break;
 8006d1a:	e009      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fc69 	bl	80075f6 <USBD_ClrFeature>
          break;
 8006d24:	e004      	b.n	8006d30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fcc1 	bl	80076b0 <USBD_CtlError>
          break;
 8006d2e:	bf00      	nop
      }
      break;
 8006d30:	e004      	b.n	8006d3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fcbb 	bl	80076b0 <USBD_CtlError>
      break;
 8006d3a:	bf00      	nop
  }

  return ret;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d003      	beq.n	8006d6a <USBD_StdItfReq+0x22>
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d001      	beq.n	8006d6a <USBD_StdItfReq+0x22>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d12a      	bne.n	8006dc0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d70:	3b01      	subs	r3, #1
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d81d      	bhi.n	8006db2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	889b      	ldrh	r3, [r3, #4]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d813      	bhi.n	8006da8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d110      	bne.n	8006dbc <USBD_StdItfReq+0x74>
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fd4d 	bl	8007840 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006da6:	e009      	b.n	8006dbc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc80 	bl	80076b0 <USBD_CtlError>
          break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc7b 	bl	80076b0 <USBD_CtlError>
          break;
 8006dba:	e000      	b.n	8006dbe <USBD_StdItfReq+0x76>
          break;
 8006dbc:	bf00      	nop
      }
      break;
 8006dbe:	e004      	b.n	8006dca <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fc74 	bl	80076b0 <USBD_CtlError>
      break;
 8006dc8:	bf00      	nop
  }

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	889b      	ldrh	r3, [r3, #4]
 8006de6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d004      	beq.n	8006dfe <USBD_StdEPReq+0x2a>
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d002      	beq.n	8006dfe <USBD_StdEPReq+0x2a>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d008      	beq.n	8006e0e <USBD_StdEPReq+0x3a>
 8006dfc:	e13d      	b.n	800707a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
      break;
 8006e0c:	e13a      	b.n	8007084 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d10a      	bne.n	8006e30 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	e12a      	b.n	8007086 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d03e      	beq.n	8006eb6 <USBD_StdEPReq+0xe2>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d002      	beq.n	8006e42 <USBD_StdEPReq+0x6e>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d070      	beq.n	8006f22 <USBD_StdEPReq+0x14e>
 8006e40:	e115      	b.n	800706e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d002      	beq.n	8006e52 <USBD_StdEPReq+0x7e>
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d015      	beq.n	8006e7c <USBD_StdEPReq+0xa8>
 8006e50:	e02b      	b.n	8006eaa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <USBD_StdEPReq+0x9e>
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d009      	beq.n	8006e72 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f894 	bl	8007f90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f890 	bl	8007f90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e70:	e020      	b.n	8006eb4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc1b 	bl	80076b0 <USBD_CtlError>
              break;
 8006e7a:	e01b      	b.n	8006eb4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	885b      	ldrh	r3, [r3, #2]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10e      	bne.n	8006ea2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <USBD_StdEPReq+0xce>
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d008      	beq.n	8006ea2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	88db      	ldrh	r3, [r3, #6]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f877 	bl	8007f90 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fccc 	bl	8007840 <USBD_CtlSendStatus>

              break;
 8006ea8:	e004      	b.n	8006eb4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbff 	bl	80076b0 <USBD_CtlError>
              break;
 8006eb2:	bf00      	nop
          }
          break;
 8006eb4:	e0e0      	b.n	8007078 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d002      	beq.n	8006ec6 <USBD_StdEPReq+0xf2>
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d015      	beq.n	8006ef0 <USBD_StdEPReq+0x11c>
 8006ec4:	e026      	b.n	8006f14 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <USBD_StdEPReq+0x112>
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d009      	beq.n	8006ee6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f85a 	bl	8007f90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006edc:	2180      	movs	r1, #128	; 0x80
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f856 	bl	8007f90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ee4:	e01c      	b.n	8006f20 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fbe1 	bl	80076b0 <USBD_CtlError>
              break;
 8006eee:	e017      	b.n	8006f20 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d112      	bne.n	8006f1e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f861 	bl	8007fce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc97 	bl	8007840 <USBD_CtlSendStatus>
              }
              break;
 8006f12:	e004      	b.n	8006f1e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fbca 	bl	80076b0 <USBD_CtlError>
              break;
 8006f1c:	e000      	b.n	8006f20 <USBD_StdEPReq+0x14c>
              break;
 8006f1e:	bf00      	nop
          }
          break;
 8006f20:	e0aa      	b.n	8007078 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d002      	beq.n	8006f32 <USBD_StdEPReq+0x15e>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d032      	beq.n	8006f96 <USBD_StdEPReq+0x1c2>
 8006f30:	e097      	b.n	8007062 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <USBD_StdEPReq+0x174>
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d004      	beq.n	8006f48 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fbb5 	bl	80076b0 <USBD_CtlError>
                break;
 8006f46:	e091      	b.n	800706c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da0b      	bge.n	8006f68 <USBD_StdEPReq+0x194>
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	3310      	adds	r3, #16
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	3304      	adds	r3, #4
 8006f66:	e00b      	b.n	8006f80 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3304      	adds	r3, #4
 8006f80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fbf8 	bl	8007784 <USBD_CtlSendData>
              break;
 8006f94:	e06a      	b.n	800706c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da11      	bge.n	8006fc2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	f003 020f 	and.w	r2, r3, #15
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d117      	bne.n	8006fe8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb78 	bl	80076b0 <USBD_CtlError>
                  break;
 8006fc0:	e054      	b.n	800706c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb65 	bl	80076b0 <USBD_CtlError>
                  break;
 8006fe6:	e041      	b.n	800706c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da0b      	bge.n	8007008 <USBD_StdEPReq+0x234>
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3310      	adds	r3, #16
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	e00b      	b.n	8007020 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	3304      	adds	r3, #4
 8007020:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <USBD_StdEPReq+0x25a>
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d103      	bne.n	8007036 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e00e      	b.n	8007054 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 ffe6 	bl	800800c <USBD_LL_IsStallEP>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	e002      	b.n	8007054 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2202      	movs	r2, #2
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb92 	bl	8007784 <USBD_CtlSendData>
              break;
 8007060:	e004      	b.n	800706c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb23 	bl	80076b0 <USBD_CtlError>
              break;
 800706a:	bf00      	nop
          }
          break;
 800706c:	e004      	b.n	8007078 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb1d 	bl	80076b0 <USBD_CtlError>
          break;
 8007076:	bf00      	nop
      }
      break;
 8007078:	e004      	b.n	8007084 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fb17 	bl	80076b0 <USBD_CtlError>
      break;
 8007082:	bf00      	nop
  }

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	2b06      	cmp	r3, #6
 80070b2:	f200 8128 	bhi.w	8007306 <USBD_GetDescriptor+0x276>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <USBD_GetDescriptor+0x2c>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070d9 	.word	0x080070d9
 80070c0:	080070f1 	.word	0x080070f1
 80070c4:	08007131 	.word	0x08007131
 80070c8:	08007307 	.word	0x08007307
 80070cc:	08007307 	.word	0x08007307
 80070d0:	080072a7 	.word	0x080072a7
 80070d4:	080072d3 	.word	0x080072d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7c12      	ldrb	r2, [r2, #16]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
      break;
 80070ee:	e112      	b.n	8007316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7c1b      	ldrb	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10d      	bne.n	8007114 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	f107 0208 	add.w	r2, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007112:	e100      	b.n	8007316 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	f107 0208 	add.w	r2, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	2202      	movs	r2, #2
 800712c:	701a      	strb	r2, [r3, #0]
      break;
 800712e:	e0f2      	b.n	8007316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	885b      	ldrh	r3, [r3, #2]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b05      	cmp	r3, #5
 8007138:	f200 80ac 	bhi.w	8007294 <USBD_GetDescriptor+0x204>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBD_GetDescriptor+0xb4>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	0800715d 	.word	0x0800715d
 8007148:	08007191 	.word	0x08007191
 800714c:	080071c5 	.word	0x080071c5
 8007150:	080071f9 	.word	0x080071f9
 8007154:	0800722d 	.word	0x0800722d
 8007158:	08007261 	.word	0x08007261
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7c12      	ldrb	r2, [r2, #16]
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800717e:	e091      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa94 	bl	80076b0 <USBD_CtlError>
            err++;
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	3301      	adds	r3, #1
 800718c:	72fb      	strb	r3, [r7, #11]
          break;
 800718e:	e089      	b.n	80072a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7c12      	ldrb	r2, [r2, #16]
 80071a8:	f107 0108 	add.w	r1, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071b2:	e077      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa7a 	bl	80076b0 <USBD_CtlError>
            err++;
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	3301      	adds	r3, #1
 80071c0:	72fb      	strb	r3, [r7, #11]
          break;
 80071c2:	e06f      	b.n	80072a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7c12      	ldrb	r2, [r2, #16]
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e6:	e05d      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa60 	bl	80076b0 <USBD_CtlError>
            err++;
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	3301      	adds	r3, #1
 80071f4:	72fb      	strb	r3, [r7, #11]
          break;
 80071f6:	e055      	b.n	80072a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721a:	e043      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa46 	bl	80076b0 <USBD_CtlError>
            err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
          break;
 800722a:	e03b      	b.n	80072a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7c12      	ldrb	r2, [r2, #16]
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800724e:	e029      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa2c 	bl	80076b0 <USBD_CtlError>
            err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
          break;
 800725e:	e021      	b.n	80072a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	7c12      	ldrb	r2, [r2, #16]
 8007278:	f107 0108 	add.w	r1, r7, #8
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007282:	e00f      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa12 	bl	80076b0 <USBD_CtlError>
            err++;
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	3301      	adds	r3, #1
 8007290:	72fb      	strb	r3, [r7, #11]
          break;
 8007292:	e007      	b.n	80072a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa0a 	bl	80076b0 <USBD_CtlError>
          err++;
 800729c:	7afb      	ldrb	r3, [r7, #11]
 800729e:	3301      	adds	r3, #1
 80072a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072a2:	e038      	b.n	8007316 <USBD_GetDescriptor+0x286>
 80072a4:	e037      	b.n	8007316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7c1b      	ldrb	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d109      	bne.n	80072c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	f107 0208 	add.w	r2, r7, #8
 80072ba:	4610      	mov	r0, r2
 80072bc:	4798      	blx	r3
 80072be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072c0:	e029      	b.n	8007316 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f9f3 	bl	80076b0 <USBD_CtlError>
        err++;
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	3301      	adds	r3, #1
 80072ce:	72fb      	strb	r3, [r7, #11]
      break;
 80072d0:	e021      	b.n	8007316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7c1b      	ldrb	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10d      	bne.n	80072f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f107 0208 	add.w	r2, r7, #8
 80072e6:	4610      	mov	r0, r2
 80072e8:	4798      	blx	r3
 80072ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	2207      	movs	r2, #7
 80072f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072f4:	e00f      	b.n	8007316 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f9d9 	bl	80076b0 <USBD_CtlError>
        err++;
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	3301      	adds	r3, #1
 8007302:	72fb      	strb	r3, [r7, #11]
      break;
 8007304:	e007      	b.n	8007316 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f9d1 	bl	80076b0 <USBD_CtlError>
      err++;
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	3301      	adds	r3, #1
 8007312:	72fb      	strb	r3, [r7, #11]
      break;
 8007314:	bf00      	nop
  }

  if (err != 0U)
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d011      	beq.n	8007346 <USBD_GetDescriptor+0x2b6>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	88db      	ldrh	r3, [r3, #6]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	88da      	ldrh	r2, [r3, #6]
 800732e:	893b      	ldrh	r3, [r7, #8]
 8007330:	4293      	cmp	r3, r2
 8007332:	bf28      	it	cs
 8007334:	4613      	movcs	r3, r2
 8007336:	b29b      	uxth	r3, r3
 8007338:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800733a:	893b      	ldrh	r3, [r7, #8]
 800733c:	461a      	mov	r2, r3
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa1f 	bl	8007784 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	88db      	ldrh	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa76 	bl	8007840 <USBD_CtlSendStatus>
 8007354:	e000      	b.n	8007358 <USBD_GetDescriptor+0x2c8>
    return;
 8007356:	bf00      	nop
    }
  }
}
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop

08007360 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	889b      	ldrh	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d130      	bne.n	80073d4 <USBD_SetAddress+0x74>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88db      	ldrh	r3, [r3, #6]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d12c      	bne.n	80073d4 <USBD_SetAddress+0x74>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	2b7f      	cmp	r3, #127	; 0x7f
 8007380:	d828      	bhi.n	80073d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	2b03      	cmp	r3, #3
 8007396:	d104      	bne.n	80073a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f988 	bl	80076b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a0:	e01c      	b.n	80073dc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fe58 	bl	8008064 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa43 	bl	8007840 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c8:	e008      	b.n	80073dc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d2:	e003      	b.n	80073dc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f96a 	bl	80076b0 <USBD_CtlError>
  }
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	4b41      	ldr	r3, [pc, #260]	; (80074fc <USBD_SetConfig+0x118>)
 80073f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073f8:	4b40      	ldr	r3, [pc, #256]	; (80074fc <USBD_SetConfig+0x118>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d904      	bls.n	800740a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f954 	bl	80076b0 <USBD_CtlError>
 8007408:	e075      	b.n	80074f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	2b02      	cmp	r3, #2
 8007412:	d002      	beq.n	800741a <USBD_SetConfig+0x36>
 8007414:	2b03      	cmp	r3, #3
 8007416:	d023      	beq.n	8007460 <USBD_SetConfig+0x7c>
 8007418:	e062      	b.n	80074e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800741a:	4b38      	ldr	r3, [pc, #224]	; (80074fc <USBD_SetConfig+0x118>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01a      	beq.n	8007458 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007422:	4b36      	ldr	r3, [pc, #216]	; (80074fc <USBD_SetConfig+0x118>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2203      	movs	r2, #3
 8007430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007434:	4b31      	ldr	r3, [pc, #196]	; (80074fc <USBD_SetConfig+0x118>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff f9f3 	bl	8006826 <USBD_SetClassConfig>
 8007440:	4603      	mov	r3, r0
 8007442:	2b02      	cmp	r3, #2
 8007444:	d104      	bne.n	8007450 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f931 	bl	80076b0 <USBD_CtlError>
            return;
 800744e:	e052      	b.n	80074f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f9f5 	bl	8007840 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007456:	e04e      	b.n	80074f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f9f1 	bl	8007840 <USBD_CtlSendStatus>
        break;
 800745e:	e04a      	b.n	80074f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007460:	4b26      	ldr	r3, [pc, #152]	; (80074fc <USBD_SetConfig+0x118>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d112      	bne.n	800748e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007470:	4b22      	ldr	r3, [pc, #136]	; (80074fc <USBD_SetConfig+0x118>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <USBD_SetConfig+0x118>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff f9ef 	bl	8006864 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9da 	bl	8007840 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800748c:	e033      	b.n	80074f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800748e:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <USBD_SetConfig+0x118>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d01d      	beq.n	80074d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff f9dd 	bl	8006864 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074aa:	4b14      	ldr	r3, [pc, #80]	; (80074fc <USBD_SetConfig+0x118>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <USBD_SetConfig+0x118>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff f9b3 	bl	8006826 <USBD_SetClassConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d104      	bne.n	80074d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8f1 	bl	80076b0 <USBD_CtlError>
            return;
 80074ce:	e012      	b.n	80074f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9b5 	bl	8007840 <USBD_CtlSendStatus>
        break;
 80074d6:	e00e      	b.n	80074f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f9b1 	bl	8007840 <USBD_CtlSendStatus>
        break;
 80074de:	e00a      	b.n	80074f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8e4 	bl	80076b0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <USBD_SetConfig+0x118>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff f9b8 	bl	8006864 <USBD_ClrClassConfig>
        break;
 80074f4:	bf00      	nop
    }
  }
}
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	2000039c 	.word	0x2000039c

08007500 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	88db      	ldrh	r3, [r3, #6]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d004      	beq.n	800751c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f8cb 	bl	80076b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800751a:	e021      	b.n	8007560 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007522:	2b01      	cmp	r3, #1
 8007524:	db17      	blt.n	8007556 <USBD_GetConfig+0x56>
 8007526:	2b02      	cmp	r3, #2
 8007528:	dd02      	ble.n	8007530 <USBD_GetConfig+0x30>
 800752a:	2b03      	cmp	r3, #3
 800752c:	d00b      	beq.n	8007546 <USBD_GetConfig+0x46>
 800752e:	e012      	b.n	8007556 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3308      	adds	r3, #8
 800753a:	2201      	movs	r2, #1
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f920 	bl	8007784 <USBD_CtlSendData>
        break;
 8007544:	e00c      	b.n	8007560 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f918 	bl	8007784 <USBD_CtlSendData>
        break;
 8007554:	e004      	b.n	8007560 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8a9 	bl	80076b0 <USBD_CtlError>
        break;
 800755e:	bf00      	nop
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	3b01      	subs	r3, #1
 800757a:	2b02      	cmp	r3, #2
 800757c:	d81e      	bhi.n	80075bc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	88db      	ldrh	r3, [r3, #6]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d004      	beq.n	8007590 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f891 	bl	80076b0 <USBD_CtlError>
        break;
 800758e:	e01a      	b.n	80075c6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f043 0202 	orr.w	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	330c      	adds	r3, #12
 80075b0:	2202      	movs	r2, #2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8e5 	bl	8007784 <USBD_CtlSendData>
      break;
 80075ba:	e004      	b.n	80075c6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f876 	bl	80076b0 <USBD_CtlError>
      break;
 80075c4:	bf00      	nop
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d106      	bne.n	80075ee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f929 	bl	8007840 <USBD_CtlSendStatus>
  }
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	3b01      	subs	r3, #1
 8007608:	2b02      	cmp	r3, #2
 800760a:	d80b      	bhi.n	8007624 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	885b      	ldrh	r3, [r3, #2]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10c      	bne.n	800762e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f90f 	bl	8007840 <USBD_CtlSendStatus>
      }
      break;
 8007622:	e004      	b.n	800762e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f842 	bl	80076b0 <USBD_CtlError>
      break;
 800762c:	e000      	b.n	8007630 <USBD_ClrFeature+0x3a>
      break;
 800762e:	bf00      	nop
  }
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	785a      	ldrb	r2, [r3, #1]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	3302      	adds	r3, #2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b29a      	uxth	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	3303      	adds	r3, #3
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b29b      	uxth	r3, r3
 8007666:	4413      	add	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	3305      	adds	r3, #5
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	4413      	add	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	3306      	adds	r3, #6
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29a      	uxth	r2, r3
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	3307      	adds	r3, #7
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	b29b      	uxth	r3, r3
 800769e:	4413      	add	r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	80da      	strh	r2, [r3, #6]

}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fc67 	bl	8007f90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc63 	bl	8007f90 <USBD_LL_StallEP>
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b086      	sub	sp, #24
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d032      	beq.n	800774e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f834 	bl	8007756 <USBD_GetLen>
 80076ee:	4603      	mov	r3, r0
 80076f0:	3301      	adds	r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	75fa      	strb	r2, [r7, #23]
 8007702:	461a      	mov	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4413      	add	r3, r2
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	75fa      	strb	r2, [r7, #23]
 8007714:	461a      	mov	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	2203      	movs	r2, #3
 800771c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800771e:	e012      	b.n	8007746 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	60fa      	str	r2, [r7, #12]
 8007726:	7dfa      	ldrb	r2, [r7, #23]
 8007728:	1c51      	adds	r1, r2, #1
 800772a:	75f9      	strb	r1, [r7, #23]
 800772c:	4611      	mov	r1, r2
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	440a      	add	r2, r1
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	75fa      	strb	r2, [r7, #23]
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4413      	add	r3, r2
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e8      	bne.n	8007720 <USBD_GetString+0x4e>
    }
  }
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007762:	e005      	b.n	8007770 <USBD_GetLen+0x1a>
  {
    len++;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	3301      	adds	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
    buf++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3301      	adds	r3, #1
 800776e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f5      	bne.n	8007764 <USBD_GetLen+0xe>
  }

  return len;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2202      	movs	r2, #2
 8007796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fc78 	bl	80080a2 <USBD_LL_Transmit>

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	2100      	movs	r1, #0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fc66 	bl	80080a2 <USBD_LL_Transmit>

  return USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2203      	movs	r2, #3
 80077f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fc6b 	bl	80080e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fc59 	bl	80080e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2204      	movs	r2, #4
 800784c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007850:	2300      	movs	r3, #0
 8007852:	2200      	movs	r2, #0
 8007854:	2100      	movs	r1, #0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fc23 	bl	80080a2 <USBD_LL_Transmit>

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2205      	movs	r2, #5
 8007872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007876:	2300      	movs	r3, #0
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc33 	bl	80080e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007890:	2200      	movs	r2, #0
 8007892:	4912      	ldr	r1, [pc, #72]	; (80078dc <MX_USB_DEVICE_Init+0x50>)
 8007894:	4812      	ldr	r0, [pc, #72]	; (80078e0 <MX_USB_DEVICE_Init+0x54>)
 8007896:	f7fe ff6c 	bl	8006772 <USBD_Init>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078a0:	f7f9 fb2e 	bl	8000f00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078a4:	490f      	ldr	r1, [pc, #60]	; (80078e4 <MX_USB_DEVICE_Init+0x58>)
 80078a6:	480e      	ldr	r0, [pc, #56]	; (80078e0 <MX_USB_DEVICE_Init+0x54>)
 80078a8:	f7fe ff8e 	bl	80067c8 <USBD_RegisterClass>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078b2:	f7f9 fb25 	bl	8000f00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078b6:	490c      	ldr	r1, [pc, #48]	; (80078e8 <MX_USB_DEVICE_Init+0x5c>)
 80078b8:	4809      	ldr	r0, [pc, #36]	; (80078e0 <MX_USB_DEVICE_Init+0x54>)
 80078ba:	f7fe febf 	bl	800663c <USBD_CDC_RegisterInterface>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078c4:	f7f9 fb1c 	bl	8000f00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <MX_USB_DEVICE_Init+0x54>)
 80078ca:	f7fe ff96 	bl	80067fa <USBD_Start>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078d4:	f7f9 fb14 	bl	8000f00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078d8:	bf00      	nop
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000138 	.word	0x20000138
 80078e0:	20000814 	.word	0x20000814
 80078e4:	2000001c 	.word	0x2000001c
 80078e8:	20000128 	.word	0x20000128

080078ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078f0:	2200      	movs	r2, #0
 80078f2:	4905      	ldr	r1, [pc, #20]	; (8007908 <CDC_Init_FS+0x1c>)
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <CDC_Init_FS+0x20>)
 80078f6:	f7fe feb7 	bl	8006668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078fa:	4905      	ldr	r1, [pc, #20]	; (8007910 <CDC_Init_FS+0x24>)
 80078fc:	4803      	ldr	r0, [pc, #12]	; (800790c <CDC_Init_FS+0x20>)
 80078fe:	f7fe fecc 	bl	800669a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	200012d8 	.word	0x200012d8
 800790c:	20000814 	.word	0x20000814
 8007910:	20000ad8 	.word	0x20000ad8

08007914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
	...

08007924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
 8007930:	4613      	mov	r3, r2
 8007932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	2b23      	cmp	r3, #35	; 0x23
 8007938:	d85c      	bhi.n	80079f4 <CDC_Control_FS+0xd0>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <CDC_Control_FS+0x1c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	080079f5 	.word	0x080079f5
 8007944:	080079f5 	.word	0x080079f5
 8007948:	080079f5 	.word	0x080079f5
 800794c:	080079f5 	.word	0x080079f5
 8007950:	080079f5 	.word	0x080079f5
 8007954:	080079f5 	.word	0x080079f5
 8007958:	080079f5 	.word	0x080079f5
 800795c:	080079f5 	.word	0x080079f5
 8007960:	080079f5 	.word	0x080079f5
 8007964:	080079f5 	.word	0x080079f5
 8007968:	080079f5 	.word	0x080079f5
 800796c:	080079f5 	.word	0x080079f5
 8007970:	080079f5 	.word	0x080079f5
 8007974:	080079f5 	.word	0x080079f5
 8007978:	080079f5 	.word	0x080079f5
 800797c:	080079f5 	.word	0x080079f5
 8007980:	080079f5 	.word	0x080079f5
 8007984:	080079f5 	.word	0x080079f5
 8007988:	080079f5 	.word	0x080079f5
 800798c:	080079f5 	.word	0x080079f5
 8007990:	080079f5 	.word	0x080079f5
 8007994:	080079f5 	.word	0x080079f5
 8007998:	080079f5 	.word	0x080079f5
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	080079f5 	.word	0x080079f5
 80079a8:	080079f5 	.word	0x080079f5
 80079ac:	080079f5 	.word	0x080079f5
 80079b0:	080079f5 	.word	0x080079f5
 80079b4:	080079f5 	.word	0x080079f5
 80079b8:	080079f5 	.word	0x080079f5
 80079bc:	080079f5 	.word	0x080079f5
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079e3 	.word	0x080079e3
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	080079f5 	.word	0x080079f5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <CDC_Control_FS+0xe0>)
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	6810      	ldr	r0, [r2, #0]
 80079d6:	6018      	str	r0, [r3, #0]
 80079d8:	8891      	ldrh	r1, [r2, #4]
 80079da:	7992      	ldrb	r2, [r2, #6]
 80079dc:	8099      	strh	r1, [r3, #4]
 80079de:	719a      	strb	r2, [r3, #6]
    break;
 80079e0:	e009      	b.n	80079f6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	4a07      	ldr	r2, [pc, #28]	; (8007a04 <CDC_Control_FS+0xe0>)
 80079e6:	6810      	ldr	r0, [r2, #0]
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	8891      	ldrh	r1, [r2, #4]
 80079ec:	7992      	ldrb	r2, [r2, #6]
 80079ee:	8099      	strh	r1, [r3, #4]
 80079f0:	719a      	strb	r2, [r3, #6]
    break;
 80079f2:	e000      	b.n	80079f6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079f4:	bf00      	nop
  }

  return (USBD_OK);
 80079f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000120 	.word	0x20000120

08007a08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4805      	ldr	r0, [pc, #20]	; (8007a2c <CDC_Receive_FS+0x24>)
 8007a16:	f7fe fe40 	bl	800669a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a1a:	4804      	ldr	r0, [pc, #16]	; (8007a2c <CDC_Receive_FS+0x24>)
 8007a1c:	f7fe fe7f 	bl	800671e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000814 	.word	0x20000814

08007a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e00b      	b.n	8007a6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4806      	ldr	r0, [pc, #24]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a5e:	f7fe fe03 	bl	8006668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a64:	f7fe fe2c 	bl	80066c0 <USBD_CDC_TransmitPacket>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000814 	.word	0x20000814

08007a7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2212      	movs	r2, #18
 8007a8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000154 	.word	0x20000154

08007aa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ab2:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20000168 	.word	0x20000168

08007ac4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d105      	bne.n	8007ae2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ada:	4808      	ldr	r0, [pc, #32]	; (8007afc <USBD_FS_ProductStrDescriptor+0x38>)
 8007adc:	f7ff fdf9 	bl	80076d2 <USBD_GetString>
 8007ae0:	e004      	b.n	8007aec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4904      	ldr	r1, [pc, #16]	; (8007af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae6:	4805      	ldr	r0, [pc, #20]	; (8007afc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae8:	f7ff fdf3 	bl	80076d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20001ad8 	.word	0x20001ad8
 8007afc:	0800a430 	.word	0x0800a430

08007b00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	4904      	ldr	r1, [pc, #16]	; (8007b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b10:	4804      	ldr	r0, [pc, #16]	; (8007b24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b12:	f7ff fdde 	bl	80076d2 <USBD_GetString>
  return USBD_StrDesc;
 8007b16:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001ad8 	.word	0x20001ad8
 8007b24:	0800a448 	.word	0x0800a448

08007b28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	221a      	movs	r2, #26
 8007b38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b3a:	f000 f843 	bl	8007bc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b3e:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	2000016c 	.word	0x2000016c

08007b4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4907      	ldr	r1, [pc, #28]	; (8007b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b62:	4808      	ldr	r0, [pc, #32]	; (8007b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b64:	f7ff fdb5 	bl	80076d2 <USBD_GetString>
 8007b68:	e004      	b.n	8007b74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4904      	ldr	r1, [pc, #16]	; (8007b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6e:	4805      	ldr	r0, [pc, #20]	; (8007b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b70:	f7ff fdaf 	bl	80076d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20001ad8 	.word	0x20001ad8
 8007b84:	0800a45c 	.word	0x0800a45c

08007b88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d105      	bne.n	8007ba6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4907      	ldr	r1, [pc, #28]	; (8007bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b9e:	4808      	ldr	r0, [pc, #32]	; (8007bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ba0:	f7ff fd97 	bl	80076d2 <USBD_GetString>
 8007ba4:	e004      	b.n	8007bb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	4904      	ldr	r1, [pc, #16]	; (8007bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bac:	f7ff fd91 	bl	80076d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20001ad8 	.word	0x20001ad8
 8007bc0:	0800a468 	.word	0x0800a468

08007bc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <Get_SerialNum+0x44>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bd0:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <Get_SerialNum+0x48>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bd6:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <Get_SerialNum+0x4c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bea:	2208      	movs	r2, #8
 8007bec:	4909      	ldr	r1, [pc, #36]	; (8007c14 <Get_SerialNum+0x50>)
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f814 	bl	8007c1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	4908      	ldr	r1, [pc, #32]	; (8007c18 <Get_SerialNum+0x54>)
 8007bf8:	68b8      	ldr	r0, [r7, #8]
 8007bfa:	f000 f80f 	bl	8007c1c <IntToUnicode>
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	1ffff7e8 	.word	0x1ffff7e8
 8007c0c:	1ffff7ec 	.word	0x1ffff7ec
 8007c10:	1ffff7f0 	.word	0x1ffff7f0
 8007c14:	2000016e 	.word	0x2000016e
 8007c18:	2000017e 	.word	0x2000017e

08007c1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]
 8007c32:	e027      	b.n	8007c84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0f1b      	lsrs	r3, r3, #28
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d80b      	bhi.n	8007c54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0f1b      	lsrs	r3, r3, #28
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4619      	mov	r1, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	3230      	adds	r2, #48	; 0x30
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	e00a      	b.n	8007c6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	0f1b      	lsrs	r3, r3, #28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	440b      	add	r3, r1
 8007c64:	3237      	adds	r2, #55	; 0x37
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	3301      	adds	r3, #1
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	3301      	adds	r3, #1
 8007c82:	75fb      	strb	r3, [r7, #23]
 8007c84:	7dfa      	ldrb	r2, [r7, #23]
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3d3      	bcc.n	8007c34 <IntToUnicode+0x18>
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr
	...

08007c98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <HAL_PCD_MspInit+0x44>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d113      	bne.n	8007cd2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <HAL_PCD_MspInit+0x48>)
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	4a0c      	ldr	r2, [pc, #48]	; (8007ce0 <HAL_PCD_MspInit+0x48>)
 8007cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cb4:	61d3      	str	r3, [r2, #28]
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <HAL_PCD_MspInit+0x48>)
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	2014      	movs	r0, #20
 8007cc8:	f7f9 fba7 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ccc:	2014      	movs	r0, #20
 8007cce:	f7f9 fbc0 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40005c00 	.word	0x40005c00
 8007ce0:	40021000 	.word	0x40021000

08007ce4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe fdc5 	bl	800688a <USBD_LL_SetupStage>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	440b      	add	r3, r1
 8007d28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	4619      	mov	r1, r3
 8007d32:	f7fe fdf5 	bl	8006920 <USBD_LL_DataOutStage>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	440b      	add	r3, r1
 8007d5e:	333c      	adds	r3, #60	; 0x3c
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f7fe fe4c 	bl	8006a02 <USBD_LL_DataInStage>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe ff5c 	bl	8006c3e <USBD_LL_SOF>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d001      	beq.n	8007da6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007da2:	f7f9 f8ad 	bl	8000f00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dac:	7bfa      	ldrb	r2, [r7, #15]
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe ff0c 	bl	8006bce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fec5 	bl	8006b4c <USBD_LL_Reset>
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe ff06 	bl	8006bec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <HAL_PCD_SuspendCallback+0x30>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	4a03      	ldr	r2, [pc, #12]	; (8007dfc <HAL_PCD_SuspendCallback+0x30>)
 8007dee:	f043 0306 	orr.w	r3, r3, #6
 8007df2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	e000ed00 	.word	0xe000ed00

08007e00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe ff00 	bl	8006c14 <USBD_LL_Resume>
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e24:	4a28      	ldr	r2, [pc, #160]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a26      	ldr	r2, [pc, #152]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e34:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e36:	4a25      	ldr	r2, [pc, #148]	; (8007ecc <USBD_LL_Init+0xb0>)
 8007e38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e3a:	4b23      	ldr	r3, [pc, #140]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e40:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e42:	2202      	movs	r2, #2
 8007e44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e46:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e4c:	4b1e      	ldr	r3, [pc, #120]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e52:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e58:	481b      	ldr	r0, [pc, #108]	; (8007ec8 <USBD_LL_Init+0xac>)
 8007e5a:	f7f9 fcc5 	bl	80017e8 <HAL_PCD_Init>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e64:	f7f9 f84c 	bl	8000f00 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e6e:	2318      	movs	r3, #24
 8007e70:	2200      	movs	r2, #0
 8007e72:	2100      	movs	r1, #0
 8007e74:	f7fa fff9 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e7e:	2358      	movs	r3, #88	; 0x58
 8007e80:	2200      	movs	r2, #0
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	f7fa fff1 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e8e:	23c0      	movs	r3, #192	; 0xc0
 8007e90:	2200      	movs	r2, #0
 8007e92:	2181      	movs	r1, #129	; 0x81
 8007e94:	f7fa ffe9 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	f7fa ffe0 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2182      	movs	r1, #130	; 0x82
 8007eb8:	f7fa ffd7 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20001cd8 	.word	0x20001cd8
 8007ecc:	40005c00 	.word	0x40005c00

08007ed0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7f9 fd89 	bl	80019fe <HAL_PCD_Start>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f94e 	bl	8008194 <USBD_Get_USB_Status>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4611      	mov	r1, r2
 8007f12:	461a      	mov	r2, r3
 8007f14:	4603      	mov	r3, r0
 8007f16:	70fb      	strb	r3, [r7, #3]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70bb      	strb	r3, [r7, #2]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f2e:	78bb      	ldrb	r3, [r7, #2]
 8007f30:	883a      	ldrh	r2, [r7, #0]
 8007f32:	78f9      	ldrb	r1, [r7, #3]
 8007f34:	f7f9 ff03 	bl	8001d3e <HAL_PCD_EP_Open>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f928 	bl	8008194 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7f9 ff4a 	bl	8001e0a <HAL_PCD_EP_Close>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f909 	bl	8008194 <USBD_Get_USB_Status>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fa f80a 	bl	8001fc8 <HAL_PCD_EP_SetStall>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f8ea 	bl	8008194 <USBD_Get_USB_Status>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe8:	78fa      	ldrb	r2, [r7, #3]
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fa f84b 	bl	8002088 <HAL_PCD_EP_ClrStall>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f8cb 	bl	8008194 <USBD_Get_USB_Status>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008002:	7bbb      	ldrb	r3, [r7, #14]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800801e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008024:	2b00      	cmp	r3, #0
 8008026:	da0c      	bge.n	8008042 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	440b      	add	r3, r1
 800803c:	3302      	adds	r3, #2
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	e00b      	b.n	800805a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008048:	68f9      	ldr	r1, [r7, #12]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	440b      	add	r3, r1
 8008054:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008058:	781b      	ldrb	r3, [r3, #0]
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr

08008064 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f7f9 fe36 	bl	8001cf4 <HAL_PCD_SetAddress>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f880 	bl	8008194 <USBD_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	461a      	mov	r2, r3
 80080ae:	460b      	mov	r3, r1
 80080b0:	72fb      	strb	r3, [r7, #11]
 80080b2:	4613      	mov	r3, r2
 80080b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c4:	893b      	ldrh	r3, [r7, #8]
 80080c6:	7af9      	ldrb	r1, [r7, #11]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	f7f9 ff3a 	bl	8001f42 <HAL_PCD_EP_Transmit>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f85d 	bl	8008194 <USBD_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080de:	7dbb      	ldrb	r3, [r7, #22]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	607a      	str	r2, [r7, #4]
 80080f2:	461a      	mov	r2, r3
 80080f4:	460b      	mov	r3, r1
 80080f6:	72fb      	strb	r3, [r7, #11]
 80080f8:	4613      	mov	r3, r2
 80080fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800810a:	893b      	ldrh	r3, [r7, #8]
 800810c:	7af9      	ldrb	r1, [r7, #11]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	f7f9 fec3 	bl	8001e9a <HAL_PCD_EP_Receive>
 8008114:	4603      	mov	r3, r0
 8008116:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f83a 	bl	8008194 <USBD_Get_USB_Status>
 8008120:	4603      	mov	r3, r0
 8008122:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008124:	7dbb      	ldrb	r3, [r7, #22]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f7f9 fee5 	bl	8001f14 <HAL_PCD_EP_GetRxCount>
 800814a:	4603      	mov	r3, r0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800815c:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_static_malloc+0x14>)
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr
 8008168:	200003a0 	.word	0x200003a0

0800816c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr

0800817e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d817      	bhi.n	80081d8 <USBD_Get_USB_Status+0x44>
 80081a8:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <USBD_Get_USB_Status+0x1c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c7 	.word	0x080081c7
 80081b8:	080081cd 	.word	0x080081cd
 80081bc:	080081d3 	.word	0x080081d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e00b      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e008      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	e005      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	73fb      	strb	r3, [r7, #15]
    break;
 80081d6:	e002      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081d8:	2302      	movs	r3, #2
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	bf00      	nop
  }
  return usb_status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <__errno>:
 80081ec:	4b01      	ldr	r3, [pc, #4]	; (80081f4 <__errno+0x8>)
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000188 	.word	0x20000188

080081f8 <__libc_init_array>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	2500      	movs	r5, #0
 80081fc:	4e0c      	ldr	r6, [pc, #48]	; (8008230 <__libc_init_array+0x38>)
 80081fe:	4c0d      	ldr	r4, [pc, #52]	; (8008234 <__libc_init_array+0x3c>)
 8008200:	1ba4      	subs	r4, r4, r6
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	42a5      	cmp	r5, r4
 8008206:	d109      	bne.n	800821c <__libc_init_array+0x24>
 8008208:	f002 f8f4 	bl	800a3f4 <_init>
 800820c:	2500      	movs	r5, #0
 800820e:	4e0a      	ldr	r6, [pc, #40]	; (8008238 <__libc_init_array+0x40>)
 8008210:	4c0a      	ldr	r4, [pc, #40]	; (800823c <__libc_init_array+0x44>)
 8008212:	1ba4      	subs	r4, r4, r6
 8008214:	10a4      	asrs	r4, r4, #2
 8008216:	42a5      	cmp	r5, r4
 8008218:	d105      	bne.n	8008226 <__libc_init_array+0x2e>
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008220:	4798      	blx	r3
 8008222:	3501      	adds	r5, #1
 8008224:	e7ee      	b.n	8008204 <__libc_init_array+0xc>
 8008226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800822a:	4798      	blx	r3
 800822c:	3501      	adds	r5, #1
 800822e:	e7f2      	b.n	8008216 <__libc_init_array+0x1e>
 8008230:	0800a6e8 	.word	0x0800a6e8
 8008234:	0800a6e8 	.word	0x0800a6e8
 8008238:	0800a6e8 	.word	0x0800a6e8
 800823c:	0800a6ec 	.word	0x0800a6ec

08008240 <memset>:
 8008240:	4603      	mov	r3, r0
 8008242:	4402      	add	r2, r0
 8008244:	4293      	cmp	r3, r2
 8008246:	d100      	bne.n	800824a <memset+0xa>
 8008248:	4770      	bx	lr
 800824a:	f803 1b01 	strb.w	r1, [r3], #1
 800824e:	e7f9      	b.n	8008244 <memset+0x4>

08008250 <__cvt>:
 8008250:	2b00      	cmp	r3, #0
 8008252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008256:	461e      	mov	r6, r3
 8008258:	bfbb      	ittet	lt
 800825a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800825e:	461e      	movlt	r6, r3
 8008260:	2300      	movge	r3, #0
 8008262:	232d      	movlt	r3, #45	; 0x2d
 8008264:	b088      	sub	sp, #32
 8008266:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008268:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800826c:	f027 0720 	bic.w	r7, r7, #32
 8008270:	2f46      	cmp	r7, #70	; 0x46
 8008272:	4614      	mov	r4, r2
 8008274:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008276:	700b      	strb	r3, [r1, #0]
 8008278:	d004      	beq.n	8008284 <__cvt+0x34>
 800827a:	2f45      	cmp	r7, #69	; 0x45
 800827c:	d100      	bne.n	8008280 <__cvt+0x30>
 800827e:	3501      	adds	r5, #1
 8008280:	2302      	movs	r3, #2
 8008282:	e000      	b.n	8008286 <__cvt+0x36>
 8008284:	2303      	movs	r3, #3
 8008286:	aa07      	add	r2, sp, #28
 8008288:	9204      	str	r2, [sp, #16]
 800828a:	aa06      	add	r2, sp, #24
 800828c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008290:	e9cd 3500 	strd	r3, r5, [sp]
 8008294:	4622      	mov	r2, r4
 8008296:	4633      	mov	r3, r6
 8008298:	f000 fd6a 	bl	8008d70 <_dtoa_r>
 800829c:	2f47      	cmp	r7, #71	; 0x47
 800829e:	4680      	mov	r8, r0
 80082a0:	d102      	bne.n	80082a8 <__cvt+0x58>
 80082a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d526      	bpl.n	80082f6 <__cvt+0xa6>
 80082a8:	2f46      	cmp	r7, #70	; 0x46
 80082aa:	eb08 0905 	add.w	r9, r8, r5
 80082ae:	d111      	bne.n	80082d4 <__cvt+0x84>
 80082b0:	f898 3000 	ldrb.w	r3, [r8]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d10a      	bne.n	80082ce <__cvt+0x7e>
 80082b8:	2200      	movs	r2, #0
 80082ba:	2300      	movs	r3, #0
 80082bc:	4620      	mov	r0, r4
 80082be:	4631      	mov	r1, r6
 80082c0:	f7f8 fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80082c4:	b918      	cbnz	r0, 80082ce <__cvt+0x7e>
 80082c6:	f1c5 0501 	rsb	r5, r5, #1
 80082ca:	f8ca 5000 	str.w	r5, [sl]
 80082ce:	f8da 3000 	ldr.w	r3, [sl]
 80082d2:	4499      	add	r9, r3
 80082d4:	2200      	movs	r2, #0
 80082d6:	2300      	movs	r3, #0
 80082d8:	4620      	mov	r0, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	f7f8 fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80082e0:	b938      	cbnz	r0, 80082f2 <__cvt+0xa2>
 80082e2:	2230      	movs	r2, #48	; 0x30
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	454b      	cmp	r3, r9
 80082e8:	d205      	bcs.n	80082f6 <__cvt+0xa6>
 80082ea:	1c59      	adds	r1, r3, #1
 80082ec:	9107      	str	r1, [sp, #28]
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e7f8      	b.n	80082e4 <__cvt+0x94>
 80082f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80082f6:	4640      	mov	r0, r8
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082fc:	eba3 0308 	sub.w	r3, r3, r8
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	b008      	add	sp, #32
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008308 <__exponent>:
 8008308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830a:	2900      	cmp	r1, #0
 800830c:	bfb4      	ite	lt
 800830e:	232d      	movlt	r3, #45	; 0x2d
 8008310:	232b      	movge	r3, #43	; 0x2b
 8008312:	4604      	mov	r4, r0
 8008314:	bfb8      	it	lt
 8008316:	4249      	neglt	r1, r1
 8008318:	2909      	cmp	r1, #9
 800831a:	f804 2b02 	strb.w	r2, [r4], #2
 800831e:	7043      	strb	r3, [r0, #1]
 8008320:	dd21      	ble.n	8008366 <__exponent+0x5e>
 8008322:	f10d 0307 	add.w	r3, sp, #7
 8008326:	461f      	mov	r7, r3
 8008328:	260a      	movs	r6, #10
 800832a:	fb91 f5f6 	sdiv	r5, r1, r6
 800832e:	fb06 1115 	mls	r1, r6, r5, r1
 8008332:	2d09      	cmp	r5, #9
 8008334:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008338:	f803 1c01 	strb.w	r1, [r3, #-1]
 800833c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008340:	4629      	mov	r1, r5
 8008342:	dc09      	bgt.n	8008358 <__exponent+0x50>
 8008344:	3130      	adds	r1, #48	; 0x30
 8008346:	3b02      	subs	r3, #2
 8008348:	f802 1c01 	strb.w	r1, [r2, #-1]
 800834c:	42bb      	cmp	r3, r7
 800834e:	4622      	mov	r2, r4
 8008350:	d304      	bcc.n	800835c <__exponent+0x54>
 8008352:	1a10      	subs	r0, r2, r0
 8008354:	b003      	add	sp, #12
 8008356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008358:	4613      	mov	r3, r2
 800835a:	e7e6      	b.n	800832a <__exponent+0x22>
 800835c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008360:	f804 2b01 	strb.w	r2, [r4], #1
 8008364:	e7f2      	b.n	800834c <__exponent+0x44>
 8008366:	2330      	movs	r3, #48	; 0x30
 8008368:	4419      	add	r1, r3
 800836a:	7083      	strb	r3, [r0, #2]
 800836c:	1d02      	adds	r2, r0, #4
 800836e:	70c1      	strb	r1, [r0, #3]
 8008370:	e7ef      	b.n	8008352 <__exponent+0x4a>
	...

08008374 <_printf_float>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	b091      	sub	sp, #68	; 0x44
 800837a:	460c      	mov	r4, r1
 800837c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800837e:	4693      	mov	fp, r2
 8008380:	461e      	mov	r6, r3
 8008382:	4605      	mov	r5, r0
 8008384:	f001 faac 	bl	80098e0 <_localeconv_r>
 8008388:	6803      	ldr	r3, [r0, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	9309      	str	r3, [sp, #36]	; 0x24
 800838e:	f7f7 fedf 	bl	8000150 <strlen>
 8008392:	2300      	movs	r3, #0
 8008394:	930e      	str	r3, [sp, #56]	; 0x38
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	900a      	str	r0, [sp, #40]	; 0x28
 800839a:	3307      	adds	r3, #7
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	f103 0208 	add.w	r2, r3, #8
 80083a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80083a8:	f8d4 a000 	ldr.w	sl, [r4]
 80083ac:	603a      	str	r2, [r7, #0]
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80083ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083be:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	4ba6      	ldr	r3, [pc, #664]	; (8008660 <_printf_float+0x2ec>)
 80083c6:	4638      	mov	r0, r7
 80083c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083ca:	f7f8 fb1f 	bl	8000a0c <__aeabi_dcmpun>
 80083ce:	bb68      	cbnz	r0, 800842c <_printf_float+0xb8>
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295
 80083d4:	4ba2      	ldr	r3, [pc, #648]	; (8008660 <_printf_float+0x2ec>)
 80083d6:	4638      	mov	r0, r7
 80083d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083da:	f7f8 faf9 	bl	80009d0 <__aeabi_dcmple>
 80083de:	bb28      	cbnz	r0, 800842c <_printf_float+0xb8>
 80083e0:	2200      	movs	r2, #0
 80083e2:	2300      	movs	r3, #0
 80083e4:	4638      	mov	r0, r7
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7f8 fae8 	bl	80009bc <__aeabi_dcmplt>
 80083ec:	b110      	cbz	r0, 80083f4 <_printf_float+0x80>
 80083ee:	232d      	movs	r3, #45	; 0x2d
 80083f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083f4:	4f9b      	ldr	r7, [pc, #620]	; (8008664 <_printf_float+0x2f0>)
 80083f6:	4b9c      	ldr	r3, [pc, #624]	; (8008668 <_printf_float+0x2f4>)
 80083f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083fc:	bf98      	it	ls
 80083fe:	461f      	movls	r7, r3
 8008400:	2303      	movs	r3, #3
 8008402:	f04f 0900 	mov.w	r9, #0
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	f02a 0304 	bic.w	r3, sl, #4
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	9600      	str	r6, [sp, #0]
 8008410:	465b      	mov	r3, fp
 8008412:	aa0f      	add	r2, sp, #60	; 0x3c
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f9e2 	bl	80087e0 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	f040 8090 	bne.w	8008542 <_printf_float+0x1ce>
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	b011      	add	sp, #68	; 0x44
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	463a      	mov	r2, r7
 800842e:	464b      	mov	r3, r9
 8008430:	4638      	mov	r0, r7
 8008432:	4649      	mov	r1, r9
 8008434:	f7f8 faea 	bl	8000a0c <__aeabi_dcmpun>
 8008438:	b110      	cbz	r0, 8008440 <_printf_float+0xcc>
 800843a:	4f8c      	ldr	r7, [pc, #560]	; (800866c <_printf_float+0x2f8>)
 800843c:	4b8c      	ldr	r3, [pc, #560]	; (8008670 <_printf_float+0x2fc>)
 800843e:	e7db      	b.n	80083f8 <_printf_float+0x84>
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008446:	1c59      	adds	r1, r3, #1
 8008448:	a80d      	add	r0, sp, #52	; 0x34
 800844a:	a90e      	add	r1, sp, #56	; 0x38
 800844c:	d140      	bne.n	80084d0 <_printf_float+0x15c>
 800844e:	2306      	movs	r3, #6
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	f04f 0c00 	mov.w	ip, #0
 8008456:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800845a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	463a      	mov	r2, r7
 800846a:	464b      	mov	r3, r9
 800846c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008470:	4628      	mov	r0, r5
 8008472:	f7ff feed 	bl	8008250 <__cvt>
 8008476:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800847a:	2b47      	cmp	r3, #71	; 0x47
 800847c:	4607      	mov	r7, r0
 800847e:	d109      	bne.n	8008494 <_printf_float+0x120>
 8008480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008482:	1cd8      	adds	r0, r3, #3
 8008484:	db02      	blt.n	800848c <_printf_float+0x118>
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	4293      	cmp	r3, r2
 800848a:	dd47      	ble.n	800851c <_printf_float+0x1a8>
 800848c:	f1a8 0802 	sub.w	r8, r8, #2
 8008490:	fa5f f888 	uxtb.w	r8, r8
 8008494:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008498:	990d      	ldr	r1, [sp, #52]	; 0x34
 800849a:	d824      	bhi.n	80084e6 <_printf_float+0x172>
 800849c:	3901      	subs	r1, #1
 800849e:	4642      	mov	r2, r8
 80084a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084a4:	910d      	str	r1, [sp, #52]	; 0x34
 80084a6:	f7ff ff2f 	bl	8008308 <__exponent>
 80084aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ac:	4681      	mov	r9, r0
 80084ae:	1813      	adds	r3, r2, r0
 80084b0:	2a01      	cmp	r2, #1
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	dc02      	bgt.n	80084bc <_printf_float+0x148>
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	07d1      	lsls	r1, r2, #31
 80084ba:	d501      	bpl.n	80084c0 <_printf_float+0x14c>
 80084bc:	3301      	adds	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0a2      	beq.n	800840e <_printf_float+0x9a>
 80084c8:	232d      	movs	r3, #45	; 0x2d
 80084ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ce:	e79e      	b.n	800840e <_printf_float+0x9a>
 80084d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80084d4:	f000 816e 	beq.w	80087b4 <_printf_float+0x440>
 80084d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084dc:	d1b9      	bne.n	8008452 <_printf_float+0xde>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1b7      	bne.n	8008452 <_printf_float+0xde>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e7b4      	b.n	8008450 <_printf_float+0xdc>
 80084e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80084ea:	d119      	bne.n	8008520 <_printf_float+0x1ac>
 80084ec:	2900      	cmp	r1, #0
 80084ee:	6863      	ldr	r3, [r4, #4]
 80084f0:	dd0c      	ble.n	800850c <_printf_float+0x198>
 80084f2:	6121      	str	r1, [r4, #16]
 80084f4:	b913      	cbnz	r3, 80084fc <_printf_float+0x188>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	07d2      	lsls	r2, r2, #31
 80084fa:	d502      	bpl.n	8008502 <_printf_float+0x18e>
 80084fc:	3301      	adds	r3, #1
 80084fe:	440b      	add	r3, r1
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	f04f 0900 	mov.w	r9, #0
 8008508:	65a3      	str	r3, [r4, #88]	; 0x58
 800850a:	e7d9      	b.n	80084c0 <_printf_float+0x14c>
 800850c:	b913      	cbnz	r3, 8008514 <_printf_float+0x1a0>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d501      	bpl.n	8008518 <_printf_float+0x1a4>
 8008514:	3302      	adds	r3, #2
 8008516:	e7f3      	b.n	8008500 <_printf_float+0x18c>
 8008518:	2301      	movs	r3, #1
 800851a:	e7f1      	b.n	8008500 <_printf_float+0x18c>
 800851c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008520:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008524:	4293      	cmp	r3, r2
 8008526:	db05      	blt.n	8008534 <_printf_float+0x1c0>
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	07d1      	lsls	r1, r2, #31
 800852e:	d5e8      	bpl.n	8008502 <_printf_float+0x18e>
 8008530:	3301      	adds	r3, #1
 8008532:	e7e5      	b.n	8008500 <_printf_float+0x18c>
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfcc      	ite	gt
 8008538:	2301      	movgt	r3, #1
 800853a:	f1c3 0302 	rsble	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	e7de      	b.n	8008500 <_printf_float+0x18c>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	055a      	lsls	r2, r3, #21
 8008546:	d407      	bmi.n	8008558 <_printf_float+0x1e4>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	463a      	mov	r2, r7
 800854c:	4659      	mov	r1, fp
 800854e:	4628      	mov	r0, r5
 8008550:	47b0      	blx	r6
 8008552:	3001      	adds	r0, #1
 8008554:	d129      	bne.n	80085aa <_printf_float+0x236>
 8008556:	e764      	b.n	8008422 <_printf_float+0xae>
 8008558:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800855c:	f240 80d7 	bls.w	800870e <_printf_float+0x39a>
 8008560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	f7f8 fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800856c:	b388      	cbz	r0, 80085d2 <_printf_float+0x25e>
 800856e:	2301      	movs	r3, #1
 8008570:	4a40      	ldr	r2, [pc, #256]	; (8008674 <_printf_float+0x300>)
 8008572:	4659      	mov	r1, fp
 8008574:	4628      	mov	r0, r5
 8008576:	47b0      	blx	r6
 8008578:	3001      	adds	r0, #1
 800857a:	f43f af52 	beq.w	8008422 <_printf_float+0xae>
 800857e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008582:	429a      	cmp	r2, r3
 8008584:	db02      	blt.n	800858c <_printf_float+0x218>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	07d8      	lsls	r0, r3, #31
 800858a:	d50e      	bpl.n	80085aa <_printf_float+0x236>
 800858c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008590:	4659      	mov	r1, fp
 8008592:	4628      	mov	r0, r5
 8008594:	47b0      	blx	r6
 8008596:	3001      	adds	r0, #1
 8008598:	f43f af43 	beq.w	8008422 <_printf_float+0xae>
 800859c:	2700      	movs	r7, #0
 800859e:	f104 081a 	add.w	r8, r4, #26
 80085a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a4:	3b01      	subs	r3, #1
 80085a6:	42bb      	cmp	r3, r7
 80085a8:	dc09      	bgt.n	80085be <_printf_float+0x24a>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	079f      	lsls	r7, r3, #30
 80085ae:	f100 80fd 	bmi.w	80087ac <_printf_float+0x438>
 80085b2:	68e0      	ldr	r0, [r4, #12]
 80085b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b6:	4298      	cmp	r0, r3
 80085b8:	bfb8      	it	lt
 80085ba:	4618      	movlt	r0, r3
 80085bc:	e733      	b.n	8008426 <_printf_float+0xb2>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4659      	mov	r1, fp
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b0      	blx	r6
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f af2a 	beq.w	8008422 <_printf_float+0xae>
 80085ce:	3701      	adds	r7, #1
 80085d0:	e7e7      	b.n	80085a2 <_printf_float+0x22e>
 80085d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc2b      	bgt.n	8008630 <_printf_float+0x2bc>
 80085d8:	2301      	movs	r3, #1
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <_printf_float+0x300>)
 80085dc:	4659      	mov	r1, fp
 80085de:	4628      	mov	r0, r5
 80085e0:	47b0      	blx	r6
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f af1d 	beq.w	8008422 <_printf_float+0xae>
 80085e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ea:	b923      	cbnz	r3, 80085f6 <_printf_float+0x282>
 80085ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ee:	b913      	cbnz	r3, 80085f6 <_printf_float+0x282>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d5d9      	bpl.n	80085aa <_printf_float+0x236>
 80085f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085fa:	4659      	mov	r1, fp
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b0      	blx	r6
 8008600:	3001      	adds	r0, #1
 8008602:	f43f af0e 	beq.w	8008422 <_printf_float+0xae>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f104 091a 	add.w	r9, r4, #26
 800860e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008610:	425b      	negs	r3, r3
 8008612:	4543      	cmp	r3, r8
 8008614:	dc01      	bgt.n	800861a <_printf_float+0x2a6>
 8008616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008618:	e797      	b.n	800854a <_printf_float+0x1d6>
 800861a:	2301      	movs	r3, #1
 800861c:	464a      	mov	r2, r9
 800861e:	4659      	mov	r1, fp
 8008620:	4628      	mov	r0, r5
 8008622:	47b0      	blx	r6
 8008624:	3001      	adds	r0, #1
 8008626:	f43f aefc 	beq.w	8008422 <_printf_float+0xae>
 800862a:	f108 0801 	add.w	r8, r8, #1
 800862e:	e7ee      	b.n	800860e <_printf_float+0x29a>
 8008630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008634:	429a      	cmp	r2, r3
 8008636:	bfa8      	it	ge
 8008638:	461a      	movge	r2, r3
 800863a:	2a00      	cmp	r2, #0
 800863c:	4690      	mov	r8, r2
 800863e:	dd07      	ble.n	8008650 <_printf_float+0x2dc>
 8008640:	4613      	mov	r3, r2
 8008642:	4659      	mov	r1, fp
 8008644:	463a      	mov	r2, r7
 8008646:	4628      	mov	r0, r5
 8008648:	47b0      	blx	r6
 800864a:	3001      	adds	r0, #1
 800864c:	f43f aee9 	beq.w	8008422 <_printf_float+0xae>
 8008650:	f104 031a 	add.w	r3, r4, #26
 8008654:	f04f 0a00 	mov.w	sl, #0
 8008658:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800865c:	930b      	str	r3, [sp, #44]	; 0x2c
 800865e:	e015      	b.n	800868c <_printf_float+0x318>
 8008660:	7fefffff 	.word	0x7fefffff
 8008664:	0800a48c 	.word	0x0800a48c
 8008668:	0800a488 	.word	0x0800a488
 800866c:	0800a494 	.word	0x0800a494
 8008670:	0800a490 	.word	0x0800a490
 8008674:	0800a498 	.word	0x0800a498
 8008678:	2301      	movs	r3, #1
 800867a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800867c:	4659      	mov	r1, fp
 800867e:	4628      	mov	r0, r5
 8008680:	47b0      	blx	r6
 8008682:	3001      	adds	r0, #1
 8008684:	f43f aecd 	beq.w	8008422 <_printf_float+0xae>
 8008688:	f10a 0a01 	add.w	sl, sl, #1
 800868c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008690:	eba9 0308 	sub.w	r3, r9, r8
 8008694:	4553      	cmp	r3, sl
 8008696:	dcef      	bgt.n	8008678 <_printf_float+0x304>
 8008698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800869c:	429a      	cmp	r2, r3
 800869e:	444f      	add	r7, r9
 80086a0:	db14      	blt.n	80086cc <_printf_float+0x358>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	07da      	lsls	r2, r3, #31
 80086a6:	d411      	bmi.n	80086cc <_printf_float+0x358>
 80086a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086ac:	eba3 0209 	sub.w	r2, r3, r9
 80086b0:	eba3 0901 	sub.w	r9, r3, r1
 80086b4:	4591      	cmp	r9, r2
 80086b6:	bfa8      	it	ge
 80086b8:	4691      	movge	r9, r2
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	dc0d      	bgt.n	80086dc <_printf_float+0x368>
 80086c0:	2700      	movs	r7, #0
 80086c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086c6:	f104 081a 	add.w	r8, r4, #26
 80086ca:	e018      	b.n	80086fe <_printf_float+0x38a>
 80086cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d0:	4659      	mov	r1, fp
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b0      	blx	r6
 80086d6:	3001      	adds	r0, #1
 80086d8:	d1e6      	bne.n	80086a8 <_printf_float+0x334>
 80086da:	e6a2      	b.n	8008422 <_printf_float+0xae>
 80086dc:	464b      	mov	r3, r9
 80086de:	463a      	mov	r2, r7
 80086e0:	4659      	mov	r1, fp
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b0      	blx	r6
 80086e6:	3001      	adds	r0, #1
 80086e8:	d1ea      	bne.n	80086c0 <_printf_float+0x34c>
 80086ea:	e69a      	b.n	8008422 <_printf_float+0xae>
 80086ec:	2301      	movs	r3, #1
 80086ee:	4642      	mov	r2, r8
 80086f0:	4659      	mov	r1, fp
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b0      	blx	r6
 80086f6:	3001      	adds	r0, #1
 80086f8:	f43f ae93 	beq.w	8008422 <_printf_float+0xae>
 80086fc:	3701      	adds	r7, #1
 80086fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	eba3 0309 	sub.w	r3, r3, r9
 8008708:	42bb      	cmp	r3, r7
 800870a:	dcef      	bgt.n	80086ec <_printf_float+0x378>
 800870c:	e74d      	b.n	80085aa <_printf_float+0x236>
 800870e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008710:	2a01      	cmp	r2, #1
 8008712:	dc01      	bgt.n	8008718 <_printf_float+0x3a4>
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d538      	bpl.n	800878a <_printf_float+0x416>
 8008718:	2301      	movs	r3, #1
 800871a:	463a      	mov	r2, r7
 800871c:	4659      	mov	r1, fp
 800871e:	4628      	mov	r0, r5
 8008720:	47b0      	blx	r6
 8008722:	3001      	adds	r0, #1
 8008724:	f43f ae7d 	beq.w	8008422 <_printf_float+0xae>
 8008728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800872c:	4659      	mov	r1, fp
 800872e:	4628      	mov	r0, r5
 8008730:	47b0      	blx	r6
 8008732:	3001      	adds	r0, #1
 8008734:	f107 0701 	add.w	r7, r7, #1
 8008738:	f43f ae73 	beq.w	8008422 <_printf_float+0xae>
 800873c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008742:	2200      	movs	r2, #0
 8008744:	f103 38ff 	add.w	r8, r3, #4294967295
 8008748:	2300      	movs	r3, #0
 800874a:	f7f8 f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800874e:	b9c0      	cbnz	r0, 8008782 <_printf_float+0x40e>
 8008750:	4643      	mov	r3, r8
 8008752:	463a      	mov	r2, r7
 8008754:	4659      	mov	r1, fp
 8008756:	4628      	mov	r0, r5
 8008758:	47b0      	blx	r6
 800875a:	3001      	adds	r0, #1
 800875c:	d10d      	bne.n	800877a <_printf_float+0x406>
 800875e:	e660      	b.n	8008422 <_printf_float+0xae>
 8008760:	2301      	movs	r3, #1
 8008762:	4642      	mov	r2, r8
 8008764:	4659      	mov	r1, fp
 8008766:	4628      	mov	r0, r5
 8008768:	47b0      	blx	r6
 800876a:	3001      	adds	r0, #1
 800876c:	f43f ae59 	beq.w	8008422 <_printf_float+0xae>
 8008770:	3701      	adds	r7, #1
 8008772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008774:	3b01      	subs	r3, #1
 8008776:	42bb      	cmp	r3, r7
 8008778:	dcf2      	bgt.n	8008760 <_printf_float+0x3ec>
 800877a:	464b      	mov	r3, r9
 800877c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008780:	e6e4      	b.n	800854c <_printf_float+0x1d8>
 8008782:	2700      	movs	r7, #0
 8008784:	f104 081a 	add.w	r8, r4, #26
 8008788:	e7f3      	b.n	8008772 <_printf_float+0x3fe>
 800878a:	2301      	movs	r3, #1
 800878c:	e7e1      	b.n	8008752 <_printf_float+0x3de>
 800878e:	2301      	movs	r3, #1
 8008790:	4642      	mov	r2, r8
 8008792:	4659      	mov	r1, fp
 8008794:	4628      	mov	r0, r5
 8008796:	47b0      	blx	r6
 8008798:	3001      	adds	r0, #1
 800879a:	f43f ae42 	beq.w	8008422 <_printf_float+0xae>
 800879e:	3701      	adds	r7, #1
 80087a0:	68e3      	ldr	r3, [r4, #12]
 80087a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	dcf1      	bgt.n	800878e <_printf_float+0x41a>
 80087aa:	e702      	b.n	80085b2 <_printf_float+0x23e>
 80087ac:	2700      	movs	r7, #0
 80087ae:	f104 0819 	add.w	r8, r4, #25
 80087b2:	e7f5      	b.n	80087a0 <_printf_float+0x42c>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f43f ae94 	beq.w	80084e2 <_printf_float+0x16e>
 80087ba:	f04f 0c00 	mov.w	ip, #0
 80087be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80087c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80087c6:	6022      	str	r2, [r4, #0]
 80087c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80087cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	463a      	mov	r2, r7
 80087d4:	464b      	mov	r3, r9
 80087d6:	4628      	mov	r0, r5
 80087d8:	f7ff fd3a 	bl	8008250 <__cvt>
 80087dc:	4607      	mov	r7, r0
 80087de:	e64f      	b.n	8008480 <_printf_float+0x10c>

080087e0 <_printf_common>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	4691      	mov	r9, r2
 80087e6:	461f      	mov	r7, r3
 80087e8:	688a      	ldr	r2, [r1, #8]
 80087ea:	690b      	ldr	r3, [r1, #16]
 80087ec:	4606      	mov	r6, r0
 80087ee:	4293      	cmp	r3, r2
 80087f0:	bfb8      	it	lt
 80087f2:	4613      	movlt	r3, r2
 80087f4:	f8c9 3000 	str.w	r3, [r9]
 80087f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087fc:	460c      	mov	r4, r1
 80087fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008802:	b112      	cbz	r2, 800880a <_printf_common+0x2a>
 8008804:	3301      	adds	r3, #1
 8008806:	f8c9 3000 	str.w	r3, [r9]
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	0699      	lsls	r1, r3, #26
 800880e:	bf42      	ittt	mi
 8008810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008814:	3302      	addmi	r3, #2
 8008816:	f8c9 3000 	strmi.w	r3, [r9]
 800881a:	6825      	ldr	r5, [r4, #0]
 800881c:	f015 0506 	ands.w	r5, r5, #6
 8008820:	d107      	bne.n	8008832 <_printf_common+0x52>
 8008822:	f104 0a19 	add.w	sl, r4, #25
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	f8d9 2000 	ldr.w	r2, [r9]
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	42ab      	cmp	r3, r5
 8008830:	dc29      	bgt.n	8008886 <_printf_common+0xa6>
 8008832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	3300      	adds	r3, #0
 800883a:	bf18      	it	ne
 800883c:	2301      	movne	r3, #1
 800883e:	0692      	lsls	r2, r2, #26
 8008840:	d42e      	bmi.n	80088a0 <_printf_common+0xc0>
 8008842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008846:	4639      	mov	r1, r7
 8008848:	4630      	mov	r0, r6
 800884a:	47c0      	blx	r8
 800884c:	3001      	adds	r0, #1
 800884e:	d021      	beq.n	8008894 <_printf_common+0xb4>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	68e5      	ldr	r5, [r4, #12]
 8008854:	f003 0306 	and.w	r3, r3, #6
 8008858:	2b04      	cmp	r3, #4
 800885a:	bf18      	it	ne
 800885c:	2500      	movne	r5, #0
 800885e:	f8d9 2000 	ldr.w	r2, [r9]
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	bf08      	it	eq
 8008868:	1aad      	subeq	r5, r5, r2
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	bf08      	it	eq
 8008870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008874:	4293      	cmp	r3, r2
 8008876:	bfc4      	itt	gt
 8008878:	1a9b      	subgt	r3, r3, r2
 800887a:	18ed      	addgt	r5, r5, r3
 800887c:	341a      	adds	r4, #26
 800887e:	454d      	cmp	r5, r9
 8008880:	d11a      	bne.n	80088b8 <_printf_common+0xd8>
 8008882:	2000      	movs	r0, #0
 8008884:	e008      	b.n	8008898 <_printf_common+0xb8>
 8008886:	2301      	movs	r3, #1
 8008888:	4652      	mov	r2, sl
 800888a:	4639      	mov	r1, r7
 800888c:	4630      	mov	r0, r6
 800888e:	47c0      	blx	r8
 8008890:	3001      	adds	r0, #1
 8008892:	d103      	bne.n	800889c <_printf_common+0xbc>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	3501      	adds	r5, #1
 800889e:	e7c2      	b.n	8008826 <_printf_common+0x46>
 80088a0:	2030      	movs	r0, #48	; 0x30
 80088a2:	18e1      	adds	r1, r4, r3
 80088a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088ae:	4422      	add	r2, r4
 80088b0:	3302      	adds	r3, #2
 80088b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b6:	e7c4      	b.n	8008842 <_printf_common+0x62>
 80088b8:	2301      	movs	r3, #1
 80088ba:	4622      	mov	r2, r4
 80088bc:	4639      	mov	r1, r7
 80088be:	4630      	mov	r0, r6
 80088c0:	47c0      	blx	r8
 80088c2:	3001      	adds	r0, #1
 80088c4:	d0e6      	beq.n	8008894 <_printf_common+0xb4>
 80088c6:	f109 0901 	add.w	r9, r9, #1
 80088ca:	e7d8      	b.n	800887e <_printf_common+0x9e>

080088cc <_printf_i>:
 80088cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80088d4:	460c      	mov	r4, r1
 80088d6:	7e09      	ldrb	r1, [r1, #24]
 80088d8:	b085      	sub	sp, #20
 80088da:	296e      	cmp	r1, #110	; 0x6e
 80088dc:	4617      	mov	r7, r2
 80088de:	4606      	mov	r6, r0
 80088e0:	4698      	mov	r8, r3
 80088e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e4:	f000 80b3 	beq.w	8008a4e <_printf_i+0x182>
 80088e8:	d822      	bhi.n	8008930 <_printf_i+0x64>
 80088ea:	2963      	cmp	r1, #99	; 0x63
 80088ec:	d036      	beq.n	800895c <_printf_i+0x90>
 80088ee:	d80a      	bhi.n	8008906 <_printf_i+0x3a>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	f000 80b9 	beq.w	8008a68 <_printf_i+0x19c>
 80088f6:	2958      	cmp	r1, #88	; 0x58
 80088f8:	f000 8083 	beq.w	8008a02 <_printf_i+0x136>
 80088fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008904:	e032      	b.n	800896c <_printf_i+0xa0>
 8008906:	2964      	cmp	r1, #100	; 0x64
 8008908:	d001      	beq.n	800890e <_printf_i+0x42>
 800890a:	2969      	cmp	r1, #105	; 0x69
 800890c:	d1f6      	bne.n	80088fc <_printf_i+0x30>
 800890e:	6820      	ldr	r0, [r4, #0]
 8008910:	6813      	ldr	r3, [r2, #0]
 8008912:	0605      	lsls	r5, r0, #24
 8008914:	f103 0104 	add.w	r1, r3, #4
 8008918:	d52a      	bpl.n	8008970 <_printf_i+0xa4>
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6011      	str	r1, [r2, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	da03      	bge.n	800892a <_printf_i+0x5e>
 8008922:	222d      	movs	r2, #45	; 0x2d
 8008924:	425b      	negs	r3, r3
 8008926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800892a:	486f      	ldr	r0, [pc, #444]	; (8008ae8 <_printf_i+0x21c>)
 800892c:	220a      	movs	r2, #10
 800892e:	e039      	b.n	80089a4 <_printf_i+0xd8>
 8008930:	2973      	cmp	r1, #115	; 0x73
 8008932:	f000 809d 	beq.w	8008a70 <_printf_i+0x1a4>
 8008936:	d808      	bhi.n	800894a <_printf_i+0x7e>
 8008938:	296f      	cmp	r1, #111	; 0x6f
 800893a:	d020      	beq.n	800897e <_printf_i+0xb2>
 800893c:	2970      	cmp	r1, #112	; 0x70
 800893e:	d1dd      	bne.n	80088fc <_printf_i+0x30>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	f043 0320 	orr.w	r3, r3, #32
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	e003      	b.n	8008952 <_printf_i+0x86>
 800894a:	2975      	cmp	r1, #117	; 0x75
 800894c:	d017      	beq.n	800897e <_printf_i+0xb2>
 800894e:	2978      	cmp	r1, #120	; 0x78
 8008950:	d1d4      	bne.n	80088fc <_printf_i+0x30>
 8008952:	2378      	movs	r3, #120	; 0x78
 8008954:	4865      	ldr	r0, [pc, #404]	; (8008aec <_printf_i+0x220>)
 8008956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800895a:	e055      	b.n	8008a08 <_printf_i+0x13c>
 800895c:	6813      	ldr	r3, [r2, #0]
 800895e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008962:	1d19      	adds	r1, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6011      	str	r1, [r2, #0]
 8008968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800896c:	2301      	movs	r3, #1
 800896e:	e08c      	b.n	8008a8a <_printf_i+0x1be>
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008976:	6011      	str	r1, [r2, #0]
 8008978:	bf18      	it	ne
 800897a:	b21b      	sxthne	r3, r3
 800897c:	e7cf      	b.n	800891e <_printf_i+0x52>
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	6825      	ldr	r5, [r4, #0]
 8008982:	1d18      	adds	r0, r3, #4
 8008984:	6010      	str	r0, [r2, #0]
 8008986:	0628      	lsls	r0, r5, #24
 8008988:	d501      	bpl.n	800898e <_printf_i+0xc2>
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	e002      	b.n	8008994 <_printf_i+0xc8>
 800898e:	0668      	lsls	r0, r5, #25
 8008990:	d5fb      	bpl.n	800898a <_printf_i+0xbe>
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	296f      	cmp	r1, #111	; 0x6f
 8008996:	bf14      	ite	ne
 8008998:	220a      	movne	r2, #10
 800899a:	2208      	moveq	r2, #8
 800899c:	4852      	ldr	r0, [pc, #328]	; (8008ae8 <_printf_i+0x21c>)
 800899e:	2100      	movs	r1, #0
 80089a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a4:	6865      	ldr	r5, [r4, #4]
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	60a5      	str	r5, [r4, #8]
 80089aa:	f2c0 8095 	blt.w	8008ad8 <_printf_i+0x20c>
 80089ae:	6821      	ldr	r1, [r4, #0]
 80089b0:	f021 0104 	bic.w	r1, r1, #4
 80089b4:	6021      	str	r1, [r4, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d13d      	bne.n	8008a36 <_printf_i+0x16a>
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	f040 808e 	bne.w	8008adc <_printf_i+0x210>
 80089c0:	4665      	mov	r5, ip
 80089c2:	2a08      	cmp	r2, #8
 80089c4:	d10b      	bne.n	80089de <_printf_i+0x112>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	07db      	lsls	r3, r3, #31
 80089ca:	d508      	bpl.n	80089de <_printf_i+0x112>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	bfde      	ittt	le
 80089d4:	2330      	movle	r3, #48	; 0x30
 80089d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089de:	ebac 0305 	sub.w	r3, ip, r5
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	f8cd 8000 	str.w	r8, [sp]
 80089e8:	463b      	mov	r3, r7
 80089ea:	aa03      	add	r2, sp, #12
 80089ec:	4621      	mov	r1, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff fef6 	bl	80087e0 <_printf_common>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d14d      	bne.n	8008a94 <_printf_i+0x1c8>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	b005      	add	sp, #20
 80089fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a02:	4839      	ldr	r0, [pc, #228]	; (8008ae8 <_printf_i+0x21c>)
 8008a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a08:	6813      	ldr	r3, [r2, #0]
 8008a0a:	6821      	ldr	r1, [r4, #0]
 8008a0c:	1d1d      	adds	r5, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6015      	str	r5, [r2, #0]
 8008a12:	060a      	lsls	r2, r1, #24
 8008a14:	d50b      	bpl.n	8008a2e <_printf_i+0x162>
 8008a16:	07ca      	lsls	r2, r1, #31
 8008a18:	bf44      	itt	mi
 8008a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8008a1e:	6021      	strmi	r1, [r4, #0]
 8008a20:	b91b      	cbnz	r3, 8008a2a <_printf_i+0x15e>
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	f022 0220 	bic.w	r2, r2, #32
 8008a28:	6022      	str	r2, [r4, #0]
 8008a2a:	2210      	movs	r2, #16
 8008a2c:	e7b7      	b.n	800899e <_printf_i+0xd2>
 8008a2e:	064d      	lsls	r5, r1, #25
 8008a30:	bf48      	it	mi
 8008a32:	b29b      	uxthmi	r3, r3
 8008a34:	e7ef      	b.n	8008a16 <_printf_i+0x14a>
 8008a36:	4665      	mov	r5, ip
 8008a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8008a40:	5cc3      	ldrb	r3, [r0, r3]
 8008a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a46:	460b      	mov	r3, r1
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d1f5      	bne.n	8008a38 <_printf_i+0x16c>
 8008a4c:	e7b9      	b.n	80089c2 <_printf_i+0xf6>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	6825      	ldr	r5, [r4, #0]
 8008a52:	1d18      	adds	r0, r3, #4
 8008a54:	6961      	ldr	r1, [r4, #20]
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	0628      	lsls	r0, r5, #24
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	d501      	bpl.n	8008a62 <_printf_i+0x196>
 8008a5e:	6019      	str	r1, [r3, #0]
 8008a60:	e002      	b.n	8008a68 <_printf_i+0x19c>
 8008a62:	066a      	lsls	r2, r5, #25
 8008a64:	d5fb      	bpl.n	8008a5e <_printf_i+0x192>
 8008a66:	8019      	strh	r1, [r3, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4665      	mov	r5, ip
 8008a6c:	6123      	str	r3, [r4, #16]
 8008a6e:	e7b9      	b.n	80089e4 <_printf_i+0x118>
 8008a70:	6813      	ldr	r3, [r2, #0]
 8008a72:	1d19      	adds	r1, r3, #4
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	681d      	ldr	r5, [r3, #0]
 8008a78:	6862      	ldr	r2, [r4, #4]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 ff57 	bl	8009930 <memchr>
 8008a82:	b108      	cbz	r0, 8008a88 <_printf_i+0x1bc>
 8008a84:	1b40      	subs	r0, r0, r5
 8008a86:	6060      	str	r0, [r4, #4]
 8008a88:	6863      	ldr	r3, [r4, #4]
 8008a8a:	6123      	str	r3, [r4, #16]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a92:	e7a7      	b.n	80089e4 <_printf_i+0x118>
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	47c0      	blx	r8
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d0aa      	beq.n	80089f8 <_printf_i+0x12c>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	079b      	lsls	r3, r3, #30
 8008aa6:	d413      	bmi.n	8008ad0 <_printf_i+0x204>
 8008aa8:	68e0      	ldr	r0, [r4, #12]
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	4298      	cmp	r0, r3
 8008aae:	bfb8      	it	lt
 8008ab0:	4618      	movlt	r0, r3
 8008ab2:	e7a3      	b.n	80089fc <_printf_i+0x130>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	464a      	mov	r2, r9
 8008ab8:	4639      	mov	r1, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	47c0      	blx	r8
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d09a      	beq.n	80089f8 <_printf_i+0x12c>
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	68e3      	ldr	r3, [r4, #12]
 8008ac6:	9a03      	ldr	r2, [sp, #12]
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	42ab      	cmp	r3, r5
 8008acc:	dcf2      	bgt.n	8008ab4 <_printf_i+0x1e8>
 8008ace:	e7eb      	b.n	8008aa8 <_printf_i+0x1dc>
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	f104 0919 	add.w	r9, r4, #25
 8008ad6:	e7f5      	b.n	8008ac4 <_printf_i+0x1f8>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1ac      	bne.n	8008a36 <_printf_i+0x16a>
 8008adc:	7803      	ldrb	r3, [r0, #0]
 8008ade:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ae6:	e76c      	b.n	80089c2 <_printf_i+0xf6>
 8008ae8:	0800a49a 	.word	0x0800a49a
 8008aec:	0800a4ab 	.word	0x0800a4ab

08008af0 <siprintf>:
 8008af0:	b40e      	push	{r1, r2, r3}
 8008af2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008af6:	b500      	push	{lr}
 8008af8:	b09c      	sub	sp, #112	; 0x70
 8008afa:	ab1d      	add	r3, sp, #116	; 0x74
 8008afc:	9002      	str	r0, [sp, #8]
 8008afe:	9006      	str	r0, [sp, #24]
 8008b00:	9107      	str	r1, [sp, #28]
 8008b02:	9104      	str	r1, [sp, #16]
 8008b04:	4808      	ldr	r0, [pc, #32]	; (8008b28 <siprintf+0x38>)
 8008b06:	4909      	ldr	r1, [pc, #36]	; (8008b2c <siprintf+0x3c>)
 8008b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	a902      	add	r1, sp, #8
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	f001 fb10 	bl	800a138 <_svfiprintf_r>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	b01c      	add	sp, #112	; 0x70
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b003      	add	sp, #12
 8008b26:	4770      	bx	lr
 8008b28:	20000188 	.word	0x20000188
 8008b2c:	ffff0208 	.word	0xffff0208

08008b30 <_strtol_l.isra.0>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	4692      	mov	sl, r2
 8008b3a:	461e      	mov	r6, r3
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	463d      	mov	r5, r7
 8008b40:	9808      	ldr	r0, [sp, #32]
 8008b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b46:	f000 fec7 	bl	80098d8 <__locale_ctype_ptr_l>
 8008b4a:	4420      	add	r0, r4
 8008b4c:	7843      	ldrb	r3, [r0, #1]
 8008b4e:	f013 0308 	ands.w	r3, r3, #8
 8008b52:	d132      	bne.n	8008bba <_strtol_l.isra.0+0x8a>
 8008b54:	2c2d      	cmp	r4, #45	; 0x2d
 8008b56:	d132      	bne.n	8008bbe <_strtol_l.isra.0+0x8e>
 8008b58:	2201      	movs	r2, #1
 8008b5a:	787c      	ldrb	r4, [r7, #1]
 8008b5c:	1cbd      	adds	r5, r7, #2
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	d05d      	beq.n	8008c1e <_strtol_l.isra.0+0xee>
 8008b62:	2e10      	cmp	r6, #16
 8008b64:	d109      	bne.n	8008b7a <_strtol_l.isra.0+0x4a>
 8008b66:	2c30      	cmp	r4, #48	; 0x30
 8008b68:	d107      	bne.n	8008b7a <_strtol_l.isra.0+0x4a>
 8008b6a:	782b      	ldrb	r3, [r5, #0]
 8008b6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b70:	2b58      	cmp	r3, #88	; 0x58
 8008b72:	d14f      	bne.n	8008c14 <_strtol_l.isra.0+0xe4>
 8008b74:	2610      	movs	r6, #16
 8008b76:	786c      	ldrb	r4, [r5, #1]
 8008b78:	3502      	adds	r5, #2
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008b82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008b86:	2700      	movs	r7, #0
 8008b88:	fbb1 fcf6 	udiv	ip, r1, r6
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008b92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008b96:	2b09      	cmp	r3, #9
 8008b98:	d817      	bhi.n	8008bca <_strtol_l.isra.0+0x9a>
 8008b9a:	461c      	mov	r4, r3
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	dd23      	ble.n	8008be8 <_strtol_l.isra.0+0xb8>
 8008ba0:	1c7b      	adds	r3, r7, #1
 8008ba2:	d007      	beq.n	8008bb4 <_strtol_l.isra.0+0x84>
 8008ba4:	4584      	cmp	ip, r0
 8008ba6:	d31c      	bcc.n	8008be2 <_strtol_l.isra.0+0xb2>
 8008ba8:	d101      	bne.n	8008bae <_strtol_l.isra.0+0x7e>
 8008baa:	45a6      	cmp	lr, r4
 8008bac:	db19      	blt.n	8008be2 <_strtol_l.isra.0+0xb2>
 8008bae:	2701      	movs	r7, #1
 8008bb0:	fb00 4006 	mla	r0, r0, r6, r4
 8008bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb8:	e7eb      	b.n	8008b92 <_strtol_l.isra.0+0x62>
 8008bba:	462f      	mov	r7, r5
 8008bbc:	e7bf      	b.n	8008b3e <_strtol_l.isra.0+0xe>
 8008bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8008bc0:	bf04      	itt	eq
 8008bc2:	1cbd      	addeq	r5, r7, #2
 8008bc4:	787c      	ldrbeq	r4, [r7, #1]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	e7c9      	b.n	8008b5e <_strtol_l.isra.0+0x2e>
 8008bca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008bce:	2b19      	cmp	r3, #25
 8008bd0:	d801      	bhi.n	8008bd6 <_strtol_l.isra.0+0xa6>
 8008bd2:	3c37      	subs	r4, #55	; 0x37
 8008bd4:	e7e2      	b.n	8008b9c <_strtol_l.isra.0+0x6c>
 8008bd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008bda:	2b19      	cmp	r3, #25
 8008bdc:	d804      	bhi.n	8008be8 <_strtol_l.isra.0+0xb8>
 8008bde:	3c57      	subs	r4, #87	; 0x57
 8008be0:	e7dc      	b.n	8008b9c <_strtol_l.isra.0+0x6c>
 8008be2:	f04f 37ff 	mov.w	r7, #4294967295
 8008be6:	e7e5      	b.n	8008bb4 <_strtol_l.isra.0+0x84>
 8008be8:	1c7b      	adds	r3, r7, #1
 8008bea:	d108      	bne.n	8008bfe <_strtol_l.isra.0+0xce>
 8008bec:	2322      	movs	r3, #34	; 0x22
 8008bee:	4608      	mov	r0, r1
 8008bf0:	f8c8 3000 	str.w	r3, [r8]
 8008bf4:	f1ba 0f00 	cmp.w	sl, #0
 8008bf8:	d107      	bne.n	8008c0a <_strtol_l.isra.0+0xda>
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	b102      	cbz	r2, 8008c02 <_strtol_l.isra.0+0xd2>
 8008c00:	4240      	negs	r0, r0
 8008c02:	f1ba 0f00 	cmp.w	sl, #0
 8008c06:	d0f8      	beq.n	8008bfa <_strtol_l.isra.0+0xca>
 8008c08:	b10f      	cbz	r7, 8008c0e <_strtol_l.isra.0+0xde>
 8008c0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c0e:	f8ca 9000 	str.w	r9, [sl]
 8008c12:	e7f2      	b.n	8008bfa <_strtol_l.isra.0+0xca>
 8008c14:	2430      	movs	r4, #48	; 0x30
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	d1af      	bne.n	8008b7a <_strtol_l.isra.0+0x4a>
 8008c1a:	2608      	movs	r6, #8
 8008c1c:	e7ad      	b.n	8008b7a <_strtol_l.isra.0+0x4a>
 8008c1e:	2c30      	cmp	r4, #48	; 0x30
 8008c20:	d0a3      	beq.n	8008b6a <_strtol_l.isra.0+0x3a>
 8008c22:	260a      	movs	r6, #10
 8008c24:	e7a9      	b.n	8008b7a <_strtol_l.isra.0+0x4a>
	...

08008c28 <strtol>:
 8008c28:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <strtol+0x24>)
 8008c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c2c:	681c      	ldr	r4, [r3, #0]
 8008c2e:	4d08      	ldr	r5, [pc, #32]	; (8008c50 <strtol+0x28>)
 8008c30:	6a23      	ldr	r3, [r4, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bf08      	it	eq
 8008c36:	462b      	moveq	r3, r5
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	4601      	mov	r1, r0
 8008c40:	4620      	mov	r0, r4
 8008c42:	f7ff ff75 	bl	8008b30 <_strtol_l.isra.0>
 8008c46:	b003      	add	sp, #12
 8008c48:	bd30      	pop	{r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000188 	.word	0x20000188
 8008c50:	200001ec 	.word	0x200001ec

08008c54 <quorem>:
 8008c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	6903      	ldr	r3, [r0, #16]
 8008c5a:	690c      	ldr	r4, [r1, #16]
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	f2c0 8084 	blt.w	8008d6c <quorem+0x118>
 8008c64:	3c01      	subs	r4, #1
 8008c66:	f101 0714 	add.w	r7, r1, #20
 8008c6a:	f100 0614 	add.w	r6, r0, #20
 8008c6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c76:	3501      	adds	r5, #1
 8008c78:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c7c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008c80:	eb06 030c 	add.w	r3, r6, ip
 8008c84:	eb07 090c 	add.w	r9, r7, ip
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	b39d      	cbz	r5, 8008cf4 <quorem+0xa0>
 8008c8c:	f04f 0a00 	mov.w	sl, #0
 8008c90:	4638      	mov	r0, r7
 8008c92:	46b6      	mov	lr, r6
 8008c94:	46d3      	mov	fp, sl
 8008c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c9a:	b293      	uxth	r3, r2
 8008c9c:	fb05 a303 	mla	r3, r5, r3, sl
 8008ca0:	0c12      	lsrs	r2, r2, #16
 8008ca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ca6:	fb05 a202 	mla	r2, r5, r2, sl
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	ebab 0303 	sub.w	r3, fp, r3
 8008cb0:	f8de b000 	ldr.w	fp, [lr]
 8008cb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008cb8:	fa1f fb8b 	uxth.w	fp, fp
 8008cbc:	445b      	add	r3, fp
 8008cbe:	fa1f fb82 	uxth.w	fp, r2
 8008cc2:	f8de 2000 	ldr.w	r2, [lr]
 8008cc6:	4581      	cmp	r9, r0
 8008cc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cd6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008cda:	f84e 3b04 	str.w	r3, [lr], #4
 8008cde:	d2da      	bcs.n	8008c96 <quorem+0x42>
 8008ce0:	f856 300c 	ldr.w	r3, [r6, ip]
 8008ce4:	b933      	cbnz	r3, 8008cf4 <quorem+0xa0>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	3b04      	subs	r3, #4
 8008cea:	429e      	cmp	r6, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	d331      	bcc.n	8008d54 <quorem+0x100>
 8008cf0:	f8c8 4010 	str.w	r4, [r8, #16]
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	f001 f849 	bl	8009d8c <__mcmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	db26      	blt.n	8008d4c <quorem+0xf8>
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f04f 0c00 	mov.w	ip, #0
 8008d04:	3501      	adds	r5, #1
 8008d06:	f857 1b04 	ldr.w	r1, [r7], #4
 8008d0a:	f8d0 e000 	ldr.w	lr, [r0]
 8008d0e:	b28b      	uxth	r3, r1
 8008d10:	ebac 0303 	sub.w	r3, ip, r3
 8008d14:	fa1f f28e 	uxth.w	r2, lr
 8008d18:	4413      	add	r3, r2
 8008d1a:	0c0a      	lsrs	r2, r1, #16
 8008d1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d2a:	45b9      	cmp	r9, r7
 8008d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d30:	f840 3b04 	str.w	r3, [r0], #4
 8008d34:	d2e7      	bcs.n	8008d06 <quorem+0xb2>
 8008d36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008d3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008d3e:	b92a      	cbnz	r2, 8008d4c <quorem+0xf8>
 8008d40:	3b04      	subs	r3, #4
 8008d42:	429e      	cmp	r6, r3
 8008d44:	461a      	mov	r2, r3
 8008d46:	d30b      	bcc.n	8008d60 <quorem+0x10c>
 8008d48:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	b003      	add	sp, #12
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	2a00      	cmp	r2, #0
 8008d5a:	d1c9      	bne.n	8008cf0 <quorem+0x9c>
 8008d5c:	3c01      	subs	r4, #1
 8008d5e:	e7c4      	b.n	8008cea <quorem+0x96>
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	3b04      	subs	r3, #4
 8008d64:	2a00      	cmp	r2, #0
 8008d66:	d1ef      	bne.n	8008d48 <quorem+0xf4>
 8008d68:	3c01      	subs	r4, #1
 8008d6a:	e7ea      	b.n	8008d42 <quorem+0xee>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e7ee      	b.n	8008d4e <quorem+0xfa>

08008d70 <_dtoa_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4616      	mov	r6, r2
 8008d76:	461f      	mov	r7, r3
 8008d78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d7a:	b095      	sub	sp, #84	; 0x54
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008d82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008d86:	b93d      	cbnz	r5, 8008d98 <_dtoa_r+0x28>
 8008d88:	2010      	movs	r0, #16
 8008d8a:	f000 fdb7 	bl	80098fc <malloc>
 8008d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d94:	6005      	str	r5, [r0, #0]
 8008d96:	60c5      	str	r5, [r0, #12]
 8008d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d9a:	6819      	ldr	r1, [r3, #0]
 8008d9c:	b151      	cbz	r1, 8008db4 <_dtoa_r+0x44>
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	2301      	movs	r3, #1
 8008da2:	4093      	lsls	r3, r2
 8008da4:	604a      	str	r2, [r1, #4]
 8008da6:	608b      	str	r3, [r1, #8]
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fe0e 	bl	80099ca <_Bfree>
 8008dae:	2200      	movs	r2, #0
 8008db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	1e3b      	subs	r3, r7, #0
 8008db6:	bfaf      	iteee	ge
 8008db8:	2300      	movge	r3, #0
 8008dba:	2201      	movlt	r2, #1
 8008dbc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008dc0:	9303      	strlt	r3, [sp, #12]
 8008dc2:	bfac      	ite	ge
 8008dc4:	f8c8 3000 	strge.w	r3, [r8]
 8008dc8:	f8c8 2000 	strlt.w	r2, [r8]
 8008dcc:	4bae      	ldr	r3, [pc, #696]	; (8009088 <_dtoa_r+0x318>)
 8008dce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008dd2:	ea33 0308 	bics.w	r3, r3, r8
 8008dd6:	d11b      	bne.n	8008e10 <_dtoa_r+0xa0>
 8008dd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	b923      	cbnz	r3, 8008dee <_dtoa_r+0x7e>
 8008de4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f000 8545 	beq.w	8009878 <_dtoa_r+0xb08>
 8008dee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008df0:	b953      	cbnz	r3, 8008e08 <_dtoa_r+0x98>
 8008df2:	4ba6      	ldr	r3, [pc, #664]	; (800908c <_dtoa_r+0x31c>)
 8008df4:	e021      	b.n	8008e3a <_dtoa_r+0xca>
 8008df6:	4ba6      	ldr	r3, [pc, #664]	; (8009090 <_dtoa_r+0x320>)
 8008df8:	9306      	str	r3, [sp, #24]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	9806      	ldr	r0, [sp, #24]
 8008e02:	b015      	add	sp, #84	; 0x54
 8008e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e08:	4ba0      	ldr	r3, [pc, #640]	; (800908c <_dtoa_r+0x31c>)
 8008e0a:	9306      	str	r3, [sp, #24]
 8008e0c:	3303      	adds	r3, #3
 8008e0e:	e7f5      	b.n	8008dfc <_dtoa_r+0x8c>
 8008e10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2300      	movs	r3, #0
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8008e20:	4682      	mov	sl, r0
 8008e22:	b160      	cbz	r0, 8008e3e <_dtoa_r+0xce>
 8008e24:	2301      	movs	r3, #1
 8008e26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8520 	beq.w	8009872 <_dtoa_r+0xb02>
 8008e32:	4b98      	ldr	r3, [pc, #608]	; (8009094 <_dtoa_r+0x324>)
 8008e34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	9306      	str	r3, [sp, #24]
 8008e3c:	e7e0      	b.n	8008e00 <_dtoa_r+0x90>
 8008e3e:	ab12      	add	r3, sp, #72	; 0x48
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	ab13      	add	r3, sp, #76	; 0x4c
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4632      	mov	r2, r6
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f001 f816 	bl	8009e7c <__d2b>
 8008e50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e54:	4683      	mov	fp, r0
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	d07d      	beq.n	8008f56 <_dtoa_r+0x1e6>
 8008e5a:	46b0      	mov	r8, r6
 8008e5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e60:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008e64:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008e68:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e6c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008e70:	2200      	movs	r2, #0
 8008e72:	4b89      	ldr	r3, [pc, #548]	; (8009098 <_dtoa_r+0x328>)
 8008e74:	4640      	mov	r0, r8
 8008e76:	4649      	mov	r1, r9
 8008e78:	f7f7 f976 	bl	8000168 <__aeabi_dsub>
 8008e7c:	a37c      	add	r3, pc, #496	; (adr r3, 8009070 <_dtoa_r+0x300>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fb29 	bl	80004d8 <__aeabi_dmul>
 8008e86:	a37c      	add	r3, pc, #496	; (adr r3, 8009078 <_dtoa_r+0x308>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	f7f7 f96e 	bl	800016c <__adddf3>
 8008e90:	4606      	mov	r6, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	460f      	mov	r7, r1
 8008e96:	f7f7 fab5 	bl	8000404 <__aeabi_i2d>
 8008e9a:	a379      	add	r3, pc, #484	; (adr r3, 8009080 <_dtoa_r+0x310>)
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f7f7 fb1a 	bl	80004d8 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 f95e 	bl	800016c <__adddf3>
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	460f      	mov	r7, r1
 8008eb4:	f7f7 fdc0 	bl	8000a38 <__aeabi_d2iz>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4682      	mov	sl, r0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	f7f7 fd7b 	bl	80009bc <__aeabi_dcmplt>
 8008ec6:	b148      	cbz	r0, 8008edc <_dtoa_r+0x16c>
 8008ec8:	4650      	mov	r0, sl
 8008eca:	f7f7 fa9b 	bl	8000404 <__aeabi_i2d>
 8008ece:	4632      	mov	r2, r6
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	f7f7 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8008ed6:	b908      	cbnz	r0, 8008edc <_dtoa_r+0x16c>
 8008ed8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008edc:	f1ba 0f16 	cmp.w	sl, #22
 8008ee0:	d85a      	bhi.n	8008f98 <_dtoa_r+0x228>
 8008ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ee6:	496d      	ldr	r1, [pc, #436]	; (800909c <_dtoa_r+0x32c>)
 8008ee8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef0:	f7f7 fd82 	bl	80009f8 <__aeabi_dcmpgt>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d051      	beq.n	8008f9c <_dtoa_r+0x22c>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008efe:	930d      	str	r3, [sp, #52]	; 0x34
 8008f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f02:	1b5d      	subs	r5, r3, r5
 8008f04:	1e6b      	subs	r3, r5, #1
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	bf43      	ittte	mi
 8008f0a:	2300      	movmi	r3, #0
 8008f0c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008f10:	9307      	strmi	r3, [sp, #28]
 8008f12:	f04f 0900 	movpl.w	r9, #0
 8008f16:	f1ba 0f00 	cmp.w	sl, #0
 8008f1a:	db41      	blt.n	8008fa0 <_dtoa_r+0x230>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008f22:	4453      	add	r3, sl
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9308      	str	r3, [sp, #32]
 8008f2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	f200 808f 	bhi.w	8009050 <_dtoa_r+0x2e0>
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	bfc4      	itt	gt
 8008f36:	3b04      	subgt	r3, #4
 8008f38:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008f3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f3c:	bfc8      	it	gt
 8008f3e:	2500      	movgt	r5, #0
 8008f40:	f1a3 0302 	sub.w	r3, r3, #2
 8008f44:	bfd8      	it	le
 8008f46:	2501      	movle	r5, #1
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	f200 808d 	bhi.w	8009068 <_dtoa_r+0x2f8>
 8008f4e:	e8df f003 	tbb	[pc, r3]
 8008f52:	7d7b      	.short	0x7d7b
 8008f54:	6f2f      	.short	0x6f2f
 8008f56:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008f5a:	441d      	add	r5, r3
 8008f5c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008f60:	2820      	cmp	r0, #32
 8008f62:	dd13      	ble.n	8008f8c <_dtoa_r+0x21c>
 8008f64:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	fa08 f800 	lsl.w	r8, r8, r0
 8008f6e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008f72:	fa23 f000 	lsr.w	r0, r3, r0
 8008f76:	ea48 0000 	orr.w	r0, r8, r0
 8008f7a:	f7f7 fa33 	bl	80003e4 <__aeabi_ui2d>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4680      	mov	r8, r0
 8008f82:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008f86:	3d01      	subs	r5, #1
 8008f88:	9310      	str	r3, [sp, #64]	; 0x40
 8008f8a:	e771      	b.n	8008e70 <_dtoa_r+0x100>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	f1c0 0020 	rsb	r0, r0, #32
 8008f92:	fa03 f000 	lsl.w	r0, r3, r0
 8008f96:	e7f0      	b.n	8008f7a <_dtoa_r+0x20a>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e7b0      	b.n	8008efe <_dtoa_r+0x18e>
 8008f9c:	900d      	str	r0, [sp, #52]	; 0x34
 8008f9e:	e7af      	b.n	8008f00 <_dtoa_r+0x190>
 8008fa0:	f1ca 0300 	rsb	r3, sl, #0
 8008fa4:	9308      	str	r3, [sp, #32]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	eba9 090a 	sub.w	r9, r9, sl
 8008fac:	930c      	str	r3, [sp, #48]	; 0x30
 8008fae:	e7bc      	b.n	8008f2a <_dtoa_r+0x1ba>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd74      	ble.n	80090a4 <_dtoa_r+0x334>
 8008fba:	4698      	mov	r8, r3
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fc2:	6072      	str	r2, [r6, #4]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	f102 0014 	add.w	r0, r2, #20
 8008fca:	4298      	cmp	r0, r3
 8008fcc:	6871      	ldr	r1, [r6, #4]
 8008fce:	d96e      	bls.n	80090ae <_dtoa_r+0x33e>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fcc6 	bl	8009962 <_Balloc>
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	6030      	str	r0, [r6, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f1b8 0f0e 	cmp.w	r8, #14
 8008fe0:	9306      	str	r3, [sp, #24]
 8008fe2:	f200 80ed 	bhi.w	80091c0 <_dtoa_r+0x450>
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	f000 80ea 	beq.w	80091c0 <_dtoa_r+0x450>
 8008fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff0:	f1ba 0f00 	cmp.w	sl, #0
 8008ff4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008ff8:	dd77      	ble.n	80090ea <_dtoa_r+0x37a>
 8008ffa:	4a28      	ldr	r2, [pc, #160]	; (800909c <_dtoa_r+0x32c>)
 8008ffc:	f00a 030f 	and.w	r3, sl, #15
 8009000:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009008:	06f0      	lsls	r0, r6, #27
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009012:	d568      	bpl.n	80090e6 <_dtoa_r+0x376>
 8009014:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009018:	4b21      	ldr	r3, [pc, #132]	; (80090a0 <_dtoa_r+0x330>)
 800901a:	2503      	movs	r5, #3
 800901c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009020:	f7f7 fb84 	bl	800072c <__aeabi_ddiv>
 8009024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009028:	f006 060f 	and.w	r6, r6, #15
 800902c:	4f1c      	ldr	r7, [pc, #112]	; (80090a0 <_dtoa_r+0x330>)
 800902e:	e04f      	b.n	80090d0 <_dtoa_r+0x360>
 8009030:	2301      	movs	r3, #1
 8009032:	9309      	str	r3, [sp, #36]	; 0x24
 8009034:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009036:	4453      	add	r3, sl
 8009038:	f103 0801 	add.w	r8, r3, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	4643      	mov	r3, r8
 8009040:	2b01      	cmp	r3, #1
 8009042:	bfb8      	it	lt
 8009044:	2301      	movlt	r3, #1
 8009046:	e7ba      	b.n	8008fbe <_dtoa_r+0x24e>
 8009048:	2300      	movs	r3, #0
 800904a:	e7b2      	b.n	8008fb2 <_dtoa_r+0x242>
 800904c:	2300      	movs	r3, #0
 800904e:	e7f0      	b.n	8009032 <_dtoa_r+0x2c2>
 8009050:	2501      	movs	r5, #1
 8009052:	2300      	movs	r3, #0
 8009054:	9509      	str	r5, [sp, #36]	; 0x24
 8009056:	931e      	str	r3, [sp, #120]	; 0x78
 8009058:	f04f 33ff 	mov.w	r3, #4294967295
 800905c:	2200      	movs	r2, #0
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	4698      	mov	r8, r3
 8009062:	2312      	movs	r3, #18
 8009064:	921f      	str	r2, [sp, #124]	; 0x7c
 8009066:	e7aa      	b.n	8008fbe <_dtoa_r+0x24e>
 8009068:	2301      	movs	r3, #1
 800906a:	9309      	str	r3, [sp, #36]	; 0x24
 800906c:	e7f4      	b.n	8009058 <_dtoa_r+0x2e8>
 800906e:	bf00      	nop
 8009070:	636f4361 	.word	0x636f4361
 8009074:	3fd287a7 	.word	0x3fd287a7
 8009078:	8b60c8b3 	.word	0x8b60c8b3
 800907c:	3fc68a28 	.word	0x3fc68a28
 8009080:	509f79fb 	.word	0x509f79fb
 8009084:	3fd34413 	.word	0x3fd34413
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	0800a4c5 	.word	0x0800a4c5
 8009090:	0800a4bc 	.word	0x0800a4bc
 8009094:	0800a499 	.word	0x0800a499
 8009098:	3ff80000 	.word	0x3ff80000
 800909c:	0800a500 	.word	0x0800a500
 80090a0:	0800a4d8 	.word	0x0800a4d8
 80090a4:	2301      	movs	r3, #1
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	4698      	mov	r8, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	e7da      	b.n	8009064 <_dtoa_r+0x2f4>
 80090ae:	3101      	adds	r1, #1
 80090b0:	6071      	str	r1, [r6, #4]
 80090b2:	0052      	lsls	r2, r2, #1
 80090b4:	e787      	b.n	8008fc6 <_dtoa_r+0x256>
 80090b6:	07f1      	lsls	r1, r6, #31
 80090b8:	d508      	bpl.n	80090cc <_dtoa_r+0x35c>
 80090ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c2:	f7f7 fa09 	bl	80004d8 <__aeabi_dmul>
 80090c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090ca:	3501      	adds	r5, #1
 80090cc:	1076      	asrs	r6, r6, #1
 80090ce:	3708      	adds	r7, #8
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	d1f0      	bne.n	80090b6 <_dtoa_r+0x346>
 80090d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090dc:	f7f7 fb26 	bl	800072c <__aeabi_ddiv>
 80090e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e4:	e01b      	b.n	800911e <_dtoa_r+0x3ae>
 80090e6:	2502      	movs	r5, #2
 80090e8:	e7a0      	b.n	800902c <_dtoa_r+0x2bc>
 80090ea:	f000 80a4 	beq.w	8009236 <_dtoa_r+0x4c6>
 80090ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090f2:	f1ca 0600 	rsb	r6, sl, #0
 80090f6:	4ba0      	ldr	r3, [pc, #640]	; (8009378 <_dtoa_r+0x608>)
 80090f8:	f006 020f 	and.w	r2, r6, #15
 80090fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f9e8 	bl	80004d8 <__aeabi_dmul>
 8009108:	2502      	movs	r5, #2
 800910a:	2300      	movs	r3, #0
 800910c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009110:	4f9a      	ldr	r7, [pc, #616]	; (800937c <_dtoa_r+0x60c>)
 8009112:	1136      	asrs	r6, r6, #4
 8009114:	2e00      	cmp	r6, #0
 8009116:	f040 8083 	bne.w	8009220 <_dtoa_r+0x4b0>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e0      	bne.n	80090e0 <_dtoa_r+0x370>
 800911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 808a 	beq.w	800923a <_dtoa_r+0x4ca>
 8009126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800912a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800912e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009132:	2200      	movs	r2, #0
 8009134:	4b92      	ldr	r3, [pc, #584]	; (8009380 <_dtoa_r+0x610>)
 8009136:	f7f7 fc41 	bl	80009bc <__aeabi_dcmplt>
 800913a:	2800      	cmp	r0, #0
 800913c:	d07d      	beq.n	800923a <_dtoa_r+0x4ca>
 800913e:	f1b8 0f00 	cmp.w	r8, #0
 8009142:	d07a      	beq.n	800923a <_dtoa_r+0x4ca>
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd36      	ble.n	80091b8 <_dtoa_r+0x448>
 800914a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800914e:	2200      	movs	r2, #0
 8009150:	4b8c      	ldr	r3, [pc, #560]	; (8009384 <_dtoa_r+0x614>)
 8009152:	f7f7 f9c1 	bl	80004d8 <__aeabi_dmul>
 8009156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800915a:	9e04      	ldr	r6, [sp, #16]
 800915c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009160:	3501      	adds	r5, #1
 8009162:	4628      	mov	r0, r5
 8009164:	f7f7 f94e 	bl	8000404 <__aeabi_i2d>
 8009168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800916c:	f7f7 f9b4 	bl	80004d8 <__aeabi_dmul>
 8009170:	2200      	movs	r2, #0
 8009172:	4b85      	ldr	r3, [pc, #532]	; (8009388 <_dtoa_r+0x618>)
 8009174:	f7f6 fffa 	bl	800016c <__adddf3>
 8009178:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800917c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009180:	950b      	str	r5, [sp, #44]	; 0x2c
 8009182:	2e00      	cmp	r6, #0
 8009184:	d15c      	bne.n	8009240 <_dtoa_r+0x4d0>
 8009186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	4b7f      	ldr	r3, [pc, #508]	; (800938c <_dtoa_r+0x61c>)
 800918e:	f7f6 ffeb 	bl	8000168 <__aeabi_dsub>
 8009192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009194:	462b      	mov	r3, r5
 8009196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800919a:	f7f7 fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f040 8281 	bne.w	80096a6 <_dtoa_r+0x936>
 80091a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091aa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80091ae:	f7f7 fc05 	bl	80009bc <__aeabi_dcmplt>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f040 8275 	bne.w	80096a2 <_dtoa_r+0x932>
 80091b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f2c0 814b 	blt.w	800945e <_dtoa_r+0x6ee>
 80091c8:	f1ba 0f0e 	cmp.w	sl, #14
 80091cc:	f300 8147 	bgt.w	800945e <_dtoa_r+0x6ee>
 80091d0:	4b69      	ldr	r3, [pc, #420]	; (8009378 <_dtoa_r+0x608>)
 80091d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f280 80d7 	bge.w	8009394 <_dtoa_r+0x624>
 80091e6:	f1b8 0f00 	cmp.w	r8, #0
 80091ea:	f300 80d3 	bgt.w	8009394 <_dtoa_r+0x624>
 80091ee:	f040 8257 	bne.w	80096a0 <_dtoa_r+0x930>
 80091f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b64      	ldr	r3, [pc, #400]	; (800938c <_dtoa_r+0x61c>)
 80091fa:	f7f7 f96d 	bl	80004d8 <__aeabi_dmul>
 80091fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009202:	f7f7 fbef 	bl	80009e4 <__aeabi_dcmpge>
 8009206:	4646      	mov	r6, r8
 8009208:	4647      	mov	r7, r8
 800920a:	2800      	cmp	r0, #0
 800920c:	f040 822d 	bne.w	800966a <_dtoa_r+0x8fa>
 8009210:	9b06      	ldr	r3, [sp, #24]
 8009212:	9a06      	ldr	r2, [sp, #24]
 8009214:	1c5d      	adds	r5, r3, #1
 8009216:	2331      	movs	r3, #49	; 0x31
 8009218:	f10a 0a01 	add.w	sl, sl, #1
 800921c:	7013      	strb	r3, [r2, #0]
 800921e:	e228      	b.n	8009672 <_dtoa_r+0x902>
 8009220:	07f2      	lsls	r2, r6, #31
 8009222:	d505      	bpl.n	8009230 <_dtoa_r+0x4c0>
 8009224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009228:	f7f7 f956 	bl	80004d8 <__aeabi_dmul>
 800922c:	2301      	movs	r3, #1
 800922e:	3501      	adds	r5, #1
 8009230:	1076      	asrs	r6, r6, #1
 8009232:	3708      	adds	r7, #8
 8009234:	e76e      	b.n	8009114 <_dtoa_r+0x3a4>
 8009236:	2502      	movs	r5, #2
 8009238:	e771      	b.n	800911e <_dtoa_r+0x3ae>
 800923a:	4657      	mov	r7, sl
 800923c:	4646      	mov	r6, r8
 800923e:	e790      	b.n	8009162 <_dtoa_r+0x3f2>
 8009240:	4b4d      	ldr	r3, [pc, #308]	; (8009378 <_dtoa_r+0x608>)
 8009242:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009246:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800924a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d048      	beq.n	80092e2 <_dtoa_r+0x572>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	2000      	movs	r0, #0
 8009256:	494e      	ldr	r1, [pc, #312]	; (8009390 <_dtoa_r+0x620>)
 8009258:	f7f7 fa68 	bl	800072c <__aeabi_ddiv>
 800925c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009260:	f7f6 ff82 	bl	8000168 <__aeabi_dsub>
 8009264:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009268:	9d06      	ldr	r5, [sp, #24]
 800926a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800926e:	f7f7 fbe3 	bl	8000a38 <__aeabi_d2iz>
 8009272:	9011      	str	r0, [sp, #68]	; 0x44
 8009274:	f7f7 f8c6 	bl	8000404 <__aeabi_i2d>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009280:	f7f6 ff72 	bl	8000168 <__aeabi_dsub>
 8009284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800928a:	3330      	adds	r3, #48	; 0x30
 800928c:	f805 3b01 	strb.w	r3, [r5], #1
 8009290:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009294:	f7f7 fb92 	bl	80009bc <__aeabi_dcmplt>
 8009298:	2800      	cmp	r0, #0
 800929a:	d163      	bne.n	8009364 <_dtoa_r+0x5f4>
 800929c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092a0:	2000      	movs	r0, #0
 80092a2:	4937      	ldr	r1, [pc, #220]	; (8009380 <_dtoa_r+0x610>)
 80092a4:	f7f6 ff60 	bl	8000168 <__aeabi_dsub>
 80092a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092ac:	f7f7 fb86 	bl	80009bc <__aeabi_dcmplt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f040 80b5 	bne.w	8009420 <_dtoa_r+0x6b0>
 80092b6:	9b06      	ldr	r3, [sp, #24]
 80092b8:	1aeb      	subs	r3, r5, r3
 80092ba:	429e      	cmp	r6, r3
 80092bc:	f77f af7c 	ble.w	80091b8 <_dtoa_r+0x448>
 80092c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c4:	2200      	movs	r2, #0
 80092c6:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <_dtoa_r+0x614>)
 80092c8:	f7f7 f906 	bl	80004d8 <__aeabi_dmul>
 80092cc:	2200      	movs	r2, #0
 80092ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <_dtoa_r+0x614>)
 80092d8:	f7f7 f8fe 	bl	80004d8 <__aeabi_dmul>
 80092dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e0:	e7c3      	b.n	800926a <_dtoa_r+0x4fa>
 80092e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092e6:	f7f7 f8f7 	bl	80004d8 <__aeabi_dmul>
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092f0:	199d      	adds	r5, r3, r6
 80092f2:	461e      	mov	r6, r3
 80092f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f8:	f7f7 fb9e 	bl	8000a38 <__aeabi_d2iz>
 80092fc:	9011      	str	r0, [sp, #68]	; 0x44
 80092fe:	f7f7 f881 	bl	8000404 <__aeabi_i2d>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930a:	f7f6 ff2d 	bl	8000168 <__aeabi_dsub>
 800930e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009314:	3330      	adds	r3, #48	; 0x30
 8009316:	f806 3b01 	strb.w	r3, [r6], #1
 800931a:	42ae      	cmp	r6, r5
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	d124      	bne.n	800936c <_dtoa_r+0x5fc>
 8009322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009326:	4b1a      	ldr	r3, [pc, #104]	; (8009390 <_dtoa_r+0x620>)
 8009328:	f7f6 ff20 	bl	800016c <__adddf3>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009334:	f7f7 fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8009338:	2800      	cmp	r0, #0
 800933a:	d171      	bne.n	8009420 <_dtoa_r+0x6b0>
 800933c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009340:	2000      	movs	r0, #0
 8009342:	4913      	ldr	r1, [pc, #76]	; (8009390 <_dtoa_r+0x620>)
 8009344:	f7f6 ff10 	bl	8000168 <__aeabi_dsub>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009350:	f7f7 fb34 	bl	80009bc <__aeabi_dcmplt>
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f af2f 	beq.w	80091b8 <_dtoa_r+0x448>
 800935a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800935e:	1e6a      	subs	r2, r5, #1
 8009360:	2b30      	cmp	r3, #48	; 0x30
 8009362:	d001      	beq.n	8009368 <_dtoa_r+0x5f8>
 8009364:	46ba      	mov	sl, r7
 8009366:	e04a      	b.n	80093fe <_dtoa_r+0x68e>
 8009368:	4615      	mov	r5, r2
 800936a:	e7f6      	b.n	800935a <_dtoa_r+0x5ea>
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <_dtoa_r+0x614>)
 800936e:	f7f7 f8b3 	bl	80004d8 <__aeabi_dmul>
 8009372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009376:	e7bd      	b.n	80092f4 <_dtoa_r+0x584>
 8009378:	0800a500 	.word	0x0800a500
 800937c:	0800a4d8 	.word	0x0800a4d8
 8009380:	3ff00000 	.word	0x3ff00000
 8009384:	40240000 	.word	0x40240000
 8009388:	401c0000 	.word	0x401c0000
 800938c:	40140000 	.word	0x40140000
 8009390:	3fe00000 	.word	0x3fe00000
 8009394:	9d06      	ldr	r5, [sp, #24]
 8009396:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800939a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939e:	4630      	mov	r0, r6
 80093a0:	4639      	mov	r1, r7
 80093a2:	f7f7 f9c3 	bl	800072c <__aeabi_ddiv>
 80093a6:	f7f7 fb47 	bl	8000a38 <__aeabi_d2iz>
 80093aa:	4681      	mov	r9, r0
 80093ac:	f7f7 f82a 	bl	8000404 <__aeabi_i2d>
 80093b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b4:	f7f7 f890 	bl	80004d8 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 fed2 	bl	8000168 <__aeabi_dsub>
 80093c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80093c8:	f805 6b01 	strb.w	r6, [r5], #1
 80093cc:	9e06      	ldr	r6, [sp, #24]
 80093ce:	4602      	mov	r2, r0
 80093d0:	1bae      	subs	r6, r5, r6
 80093d2:	45b0      	cmp	r8, r6
 80093d4:	460b      	mov	r3, r1
 80093d6:	d135      	bne.n	8009444 <_dtoa_r+0x6d4>
 80093d8:	f7f6 fec8 	bl	800016c <__adddf3>
 80093dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e0:	4606      	mov	r6, r0
 80093e2:	460f      	mov	r7, r1
 80093e4:	f7f7 fb08 	bl	80009f8 <__aeabi_dcmpgt>
 80093e8:	b9c8      	cbnz	r0, 800941e <_dtoa_r+0x6ae>
 80093ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f7 fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80093f6:	b110      	cbz	r0, 80093fe <_dtoa_r+0x68e>
 80093f8:	f019 0f01 	tst.w	r9, #1
 80093fc:	d10f      	bne.n	800941e <_dtoa_r+0x6ae>
 80093fe:	4659      	mov	r1, fp
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fae2 	bl	80099ca <_Bfree>
 8009406:	2300      	movs	r3, #0
 8009408:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800940a:	702b      	strb	r3, [r5, #0]
 800940c:	f10a 0301 	add.w	r3, sl, #1
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009414:	2b00      	cmp	r3, #0
 8009416:	f43f acf3 	beq.w	8008e00 <_dtoa_r+0x90>
 800941a:	601d      	str	r5, [r3, #0]
 800941c:	e4f0      	b.n	8008e00 <_dtoa_r+0x90>
 800941e:	4657      	mov	r7, sl
 8009420:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009424:	1e6b      	subs	r3, r5, #1
 8009426:	2a39      	cmp	r2, #57	; 0x39
 8009428:	d106      	bne.n	8009438 <_dtoa_r+0x6c8>
 800942a:	9a06      	ldr	r2, [sp, #24]
 800942c:	429a      	cmp	r2, r3
 800942e:	d107      	bne.n	8009440 <_dtoa_r+0x6d0>
 8009430:	2330      	movs	r3, #48	; 0x30
 8009432:	7013      	strb	r3, [r2, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	3701      	adds	r7, #1
 8009438:	781a      	ldrb	r2, [r3, #0]
 800943a:	3201      	adds	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e791      	b.n	8009364 <_dtoa_r+0x5f4>
 8009440:	461d      	mov	r5, r3
 8009442:	e7ed      	b.n	8009420 <_dtoa_r+0x6b0>
 8009444:	2200      	movs	r2, #0
 8009446:	4b99      	ldr	r3, [pc, #612]	; (80096ac <_dtoa_r+0x93c>)
 8009448:	f7f7 f846 	bl	80004d8 <__aeabi_dmul>
 800944c:	2200      	movs	r2, #0
 800944e:	2300      	movs	r3, #0
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	f7f7 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8009458:	2800      	cmp	r0, #0
 800945a:	d09e      	beq.n	800939a <_dtoa_r+0x62a>
 800945c:	e7cf      	b.n	80093fe <_dtoa_r+0x68e>
 800945e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009460:	2a00      	cmp	r2, #0
 8009462:	f000 8088 	beq.w	8009576 <_dtoa_r+0x806>
 8009466:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009468:	2a01      	cmp	r2, #1
 800946a:	dc6d      	bgt.n	8009548 <_dtoa_r+0x7d8>
 800946c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800946e:	2a00      	cmp	r2, #0
 8009470:	d066      	beq.n	8009540 <_dtoa_r+0x7d0>
 8009472:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009476:	464d      	mov	r5, r9
 8009478:	9e08      	ldr	r6, [sp, #32]
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	2101      	movs	r1, #1
 800947e:	441a      	add	r2, r3
 8009480:	4620      	mov	r0, r4
 8009482:	4499      	add	r9, r3
 8009484:	9207      	str	r2, [sp, #28]
 8009486:	f000 fb40 	bl	8009b0a <__i2b>
 800948a:	4607      	mov	r7, r0
 800948c:	2d00      	cmp	r5, #0
 800948e:	dd0b      	ble.n	80094a8 <_dtoa_r+0x738>
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd08      	ble.n	80094a8 <_dtoa_r+0x738>
 8009496:	42ab      	cmp	r3, r5
 8009498:	bfa8      	it	ge
 800949a:	462b      	movge	r3, r5
 800949c:	9a07      	ldr	r2, [sp, #28]
 800949e:	eba9 0903 	sub.w	r9, r9, r3
 80094a2:	1aed      	subs	r5, r5, r3
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	9307      	str	r3, [sp, #28]
 80094a8:	9b08      	ldr	r3, [sp, #32]
 80094aa:	b1eb      	cbz	r3, 80094e8 <_dtoa_r+0x778>
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d065      	beq.n	800957e <_dtoa_r+0x80e>
 80094b2:	b18e      	cbz	r6, 80094d8 <_dtoa_r+0x768>
 80094b4:	4639      	mov	r1, r7
 80094b6:	4632      	mov	r2, r6
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fbc5 	bl	8009c48 <__pow5mult>
 80094be:	465a      	mov	r2, fp
 80094c0:	4601      	mov	r1, r0
 80094c2:	4607      	mov	r7, r0
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fb29 	bl	8009b1c <__multiply>
 80094ca:	4659      	mov	r1, fp
 80094cc:	900a      	str	r0, [sp, #40]	; 0x28
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fa7b 	bl	80099ca <_Bfree>
 80094d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d6:	469b      	mov	fp, r3
 80094d8:	9b08      	ldr	r3, [sp, #32]
 80094da:	1b9a      	subs	r2, r3, r6
 80094dc:	d004      	beq.n	80094e8 <_dtoa_r+0x778>
 80094de:	4659      	mov	r1, fp
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fbb1 	bl	8009c48 <__pow5mult>
 80094e6:	4683      	mov	fp, r0
 80094e8:	2101      	movs	r1, #1
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fb0d 	bl	8009b0a <__i2b>
 80094f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f2:	4606      	mov	r6, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 81c6 	beq.w	8009886 <_dtoa_r+0xb16>
 80094fa:	461a      	mov	r2, r3
 80094fc:	4601      	mov	r1, r0
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fba2 	bl	8009c48 <__pow5mult>
 8009504:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009506:	4606      	mov	r6, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	dc3e      	bgt.n	800958a <_dtoa_r+0x81a>
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d137      	bne.n	8009582 <_dtoa_r+0x812>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	2b00      	cmp	r3, #0
 800951a:	d134      	bne.n	8009586 <_dtoa_r+0x816>
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009522:	0d1b      	lsrs	r3, r3, #20
 8009524:	051b      	lsls	r3, r3, #20
 8009526:	b12b      	cbz	r3, 8009534 <_dtoa_r+0x7c4>
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	f109 0901 	add.w	r9, r9, #1
 800952e:	3301      	adds	r3, #1
 8009530:	9307      	str	r3, [sp, #28]
 8009532:	2301      	movs	r3, #1
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009538:	2b00      	cmp	r3, #0
 800953a:	d128      	bne.n	800958e <_dtoa_r+0x81e>
 800953c:	2001      	movs	r0, #1
 800953e:	e02e      	b.n	800959e <_dtoa_r+0x82e>
 8009540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009542:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009546:	e796      	b.n	8009476 <_dtoa_r+0x706>
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	f108 36ff 	add.w	r6, r8, #4294967295
 800954e:	42b3      	cmp	r3, r6
 8009550:	bfb7      	itett	lt
 8009552:	9b08      	ldrlt	r3, [sp, #32]
 8009554:	1b9e      	subge	r6, r3, r6
 8009556:	1af2      	sublt	r2, r6, r3
 8009558:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800955a:	bfbf      	itttt	lt
 800955c:	9608      	strlt	r6, [sp, #32]
 800955e:	189b      	addlt	r3, r3, r2
 8009560:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009562:	2600      	movlt	r6, #0
 8009564:	f1b8 0f00 	cmp.w	r8, #0
 8009568:	bfb9      	ittee	lt
 800956a:	eba9 0508 	sublt.w	r5, r9, r8
 800956e:	2300      	movlt	r3, #0
 8009570:	464d      	movge	r5, r9
 8009572:	4643      	movge	r3, r8
 8009574:	e781      	b.n	800947a <_dtoa_r+0x70a>
 8009576:	9e08      	ldr	r6, [sp, #32]
 8009578:	464d      	mov	r5, r9
 800957a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800957c:	e786      	b.n	800948c <_dtoa_r+0x71c>
 800957e:	9a08      	ldr	r2, [sp, #32]
 8009580:	e7ad      	b.n	80094de <_dtoa_r+0x76e>
 8009582:	2300      	movs	r3, #0
 8009584:	e7d6      	b.n	8009534 <_dtoa_r+0x7c4>
 8009586:	9b02      	ldr	r3, [sp, #8]
 8009588:	e7d4      	b.n	8009534 <_dtoa_r+0x7c4>
 800958a:	2300      	movs	r3, #0
 800958c:	9308      	str	r3, [sp, #32]
 800958e:	6933      	ldr	r3, [r6, #16]
 8009590:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009594:	6918      	ldr	r0, [r3, #16]
 8009596:	f000 fa6a 	bl	8009a6e <__hi0bits>
 800959a:	f1c0 0020 	rsb	r0, r0, #32
 800959e:	9b07      	ldr	r3, [sp, #28]
 80095a0:	4418      	add	r0, r3
 80095a2:	f010 001f 	ands.w	r0, r0, #31
 80095a6:	d047      	beq.n	8009638 <_dtoa_r+0x8c8>
 80095a8:	f1c0 0320 	rsb	r3, r0, #32
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	dd3b      	ble.n	8009628 <_dtoa_r+0x8b8>
 80095b0:	9b07      	ldr	r3, [sp, #28]
 80095b2:	f1c0 001c 	rsb	r0, r0, #28
 80095b6:	4481      	add	r9, r0
 80095b8:	4405      	add	r5, r0
 80095ba:	4403      	add	r3, r0
 80095bc:	9307      	str	r3, [sp, #28]
 80095be:	f1b9 0f00 	cmp.w	r9, #0
 80095c2:	dd05      	ble.n	80095d0 <_dtoa_r+0x860>
 80095c4:	4659      	mov	r1, fp
 80095c6:	464a      	mov	r2, r9
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fb8b 	bl	8009ce4 <__lshift>
 80095ce:	4683      	mov	fp, r0
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dd05      	ble.n	80095e2 <_dtoa_r+0x872>
 80095d6:	4631      	mov	r1, r6
 80095d8:	461a      	mov	r2, r3
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fb82 	bl	8009ce4 <__lshift>
 80095e0:	4606      	mov	r6, r0
 80095e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e4:	b353      	cbz	r3, 800963c <_dtoa_r+0x8cc>
 80095e6:	4631      	mov	r1, r6
 80095e8:	4658      	mov	r0, fp
 80095ea:	f000 fbcf 	bl	8009d8c <__mcmp>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	da24      	bge.n	800963c <_dtoa_r+0x8cc>
 80095f2:	2300      	movs	r3, #0
 80095f4:	4659      	mov	r1, fp
 80095f6:	220a      	movs	r2, #10
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f9fd 	bl	80099f8 <__multadd>
 80095fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009600:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009604:	4683      	mov	fp, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 8144 	beq.w	8009894 <_dtoa_r+0xb24>
 800960c:	2300      	movs	r3, #0
 800960e:	4639      	mov	r1, r7
 8009610:	220a      	movs	r2, #10
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f9f0 	bl	80099f8 <__multadd>
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	4607      	mov	r7, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc4d      	bgt.n	80096bc <_dtoa_r+0x94c>
 8009620:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009622:	2b02      	cmp	r3, #2
 8009624:	dd4a      	ble.n	80096bc <_dtoa_r+0x94c>
 8009626:	e011      	b.n	800964c <_dtoa_r+0x8dc>
 8009628:	d0c9      	beq.n	80095be <_dtoa_r+0x84e>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	331c      	adds	r3, #28
 800962e:	441a      	add	r2, r3
 8009630:	4499      	add	r9, r3
 8009632:	441d      	add	r5, r3
 8009634:	4613      	mov	r3, r2
 8009636:	e7c1      	b.n	80095bc <_dtoa_r+0x84c>
 8009638:	4603      	mov	r3, r0
 800963a:	e7f6      	b.n	800962a <_dtoa_r+0x8ba>
 800963c:	f1b8 0f00 	cmp.w	r8, #0
 8009640:	dc36      	bgt.n	80096b0 <_dtoa_r+0x940>
 8009642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009644:	2b02      	cmp	r3, #2
 8009646:	dd33      	ble.n	80096b0 <_dtoa_r+0x940>
 8009648:	f8cd 8010 	str.w	r8, [sp, #16]
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	b963      	cbnz	r3, 800966a <_dtoa_r+0x8fa>
 8009650:	4631      	mov	r1, r6
 8009652:	2205      	movs	r2, #5
 8009654:	4620      	mov	r0, r4
 8009656:	f000 f9cf 	bl	80099f8 <__multadd>
 800965a:	4601      	mov	r1, r0
 800965c:	4606      	mov	r6, r0
 800965e:	4658      	mov	r0, fp
 8009660:	f000 fb94 	bl	8009d8c <__mcmp>
 8009664:	2800      	cmp	r0, #0
 8009666:	f73f add3 	bgt.w	8009210 <_dtoa_r+0x4a0>
 800966a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800966c:	9d06      	ldr	r5, [sp, #24]
 800966e:	ea6f 0a03 	mvn.w	sl, r3
 8009672:	f04f 0900 	mov.w	r9, #0
 8009676:	4631      	mov	r1, r6
 8009678:	4620      	mov	r0, r4
 800967a:	f000 f9a6 	bl	80099ca <_Bfree>
 800967e:	2f00      	cmp	r7, #0
 8009680:	f43f aebd 	beq.w	80093fe <_dtoa_r+0x68e>
 8009684:	f1b9 0f00 	cmp.w	r9, #0
 8009688:	d005      	beq.n	8009696 <_dtoa_r+0x926>
 800968a:	45b9      	cmp	r9, r7
 800968c:	d003      	beq.n	8009696 <_dtoa_r+0x926>
 800968e:	4649      	mov	r1, r9
 8009690:	4620      	mov	r0, r4
 8009692:	f000 f99a 	bl	80099ca <_Bfree>
 8009696:	4639      	mov	r1, r7
 8009698:	4620      	mov	r0, r4
 800969a:	f000 f996 	bl	80099ca <_Bfree>
 800969e:	e6ae      	b.n	80093fe <_dtoa_r+0x68e>
 80096a0:	2600      	movs	r6, #0
 80096a2:	4637      	mov	r7, r6
 80096a4:	e7e1      	b.n	800966a <_dtoa_r+0x8fa>
 80096a6:	46ba      	mov	sl, r7
 80096a8:	4637      	mov	r7, r6
 80096aa:	e5b1      	b.n	8009210 <_dtoa_r+0x4a0>
 80096ac:	40240000 	.word	0x40240000
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80f3 	beq.w	80098a2 <_dtoa_r+0xb32>
 80096bc:	2d00      	cmp	r5, #0
 80096be:	dd05      	ble.n	80096cc <_dtoa_r+0x95c>
 80096c0:	4639      	mov	r1, r7
 80096c2:	462a      	mov	r2, r5
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fb0d 	bl	8009ce4 <__lshift>
 80096ca:	4607      	mov	r7, r0
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d04c      	beq.n	800976c <_dtoa_r+0x9fc>
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 f944 	bl	8009962 <_Balloc>
 80096da:	4605      	mov	r5, r0
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	f107 010c 	add.w	r1, r7, #12
 80096e2:	3202      	adds	r2, #2
 80096e4:	0092      	lsls	r2, r2, #2
 80096e6:	300c      	adds	r0, #12
 80096e8:	f000 f930 	bl	800994c <memcpy>
 80096ec:	2201      	movs	r2, #1
 80096ee:	4629      	mov	r1, r5
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 faf7 	bl	8009ce4 <__lshift>
 80096f6:	46b9      	mov	r9, r7
 80096f8:	4607      	mov	r7, r0
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	9b02      	ldr	r3, [sp, #8]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	9308      	str	r3, [sp, #32]
 8009706:	4631      	mov	r1, r6
 8009708:	4658      	mov	r0, fp
 800970a:	f7ff faa3 	bl	8008c54 <quorem>
 800970e:	4649      	mov	r1, r9
 8009710:	4605      	mov	r5, r0
 8009712:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009716:	4658      	mov	r0, fp
 8009718:	f000 fb38 	bl	8009d8c <__mcmp>
 800971c:	463a      	mov	r2, r7
 800971e:	9002      	str	r0, [sp, #8]
 8009720:	4631      	mov	r1, r6
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fb4c 	bl	8009dc0 <__mdiff>
 8009728:	68c3      	ldr	r3, [r0, #12]
 800972a:	4602      	mov	r2, r0
 800972c:	bb03      	cbnz	r3, 8009770 <_dtoa_r+0xa00>
 800972e:	4601      	mov	r1, r0
 8009730:	9009      	str	r0, [sp, #36]	; 0x24
 8009732:	4658      	mov	r0, fp
 8009734:	f000 fb2a 	bl	8009d8c <__mcmp>
 8009738:	4603      	mov	r3, r0
 800973a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800973c:	4611      	mov	r1, r2
 800973e:	4620      	mov	r0, r4
 8009740:	9309      	str	r3, [sp, #36]	; 0x24
 8009742:	f000 f942 	bl	80099ca <_Bfree>
 8009746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009748:	b9a3      	cbnz	r3, 8009774 <_dtoa_r+0xa04>
 800974a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800974c:	b992      	cbnz	r2, 8009774 <_dtoa_r+0xa04>
 800974e:	9a08      	ldr	r2, [sp, #32]
 8009750:	b982      	cbnz	r2, 8009774 <_dtoa_r+0xa04>
 8009752:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009756:	d029      	beq.n	80097ac <_dtoa_r+0xa3c>
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd01      	ble.n	8009762 <_dtoa_r+0x9f2>
 800975e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	1c5d      	adds	r5, r3, #1
 8009766:	f883 8000 	strb.w	r8, [r3]
 800976a:	e784      	b.n	8009676 <_dtoa_r+0x906>
 800976c:	4638      	mov	r0, r7
 800976e:	e7c2      	b.n	80096f6 <_dtoa_r+0x986>
 8009770:	2301      	movs	r3, #1
 8009772:	e7e3      	b.n	800973c <_dtoa_r+0x9cc>
 8009774:	9a02      	ldr	r2, [sp, #8]
 8009776:	2a00      	cmp	r2, #0
 8009778:	db04      	blt.n	8009784 <_dtoa_r+0xa14>
 800977a:	d123      	bne.n	80097c4 <_dtoa_r+0xa54>
 800977c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800977e:	bb0a      	cbnz	r2, 80097c4 <_dtoa_r+0xa54>
 8009780:	9a08      	ldr	r2, [sp, #32]
 8009782:	b9fa      	cbnz	r2, 80097c4 <_dtoa_r+0xa54>
 8009784:	2b00      	cmp	r3, #0
 8009786:	ddec      	ble.n	8009762 <_dtoa_r+0x9f2>
 8009788:	4659      	mov	r1, fp
 800978a:	2201      	movs	r2, #1
 800978c:	4620      	mov	r0, r4
 800978e:	f000 faa9 	bl	8009ce4 <__lshift>
 8009792:	4631      	mov	r1, r6
 8009794:	4683      	mov	fp, r0
 8009796:	f000 faf9 	bl	8009d8c <__mcmp>
 800979a:	2800      	cmp	r0, #0
 800979c:	dc03      	bgt.n	80097a6 <_dtoa_r+0xa36>
 800979e:	d1e0      	bne.n	8009762 <_dtoa_r+0x9f2>
 80097a0:	f018 0f01 	tst.w	r8, #1
 80097a4:	d0dd      	beq.n	8009762 <_dtoa_r+0x9f2>
 80097a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80097aa:	d1d8      	bne.n	800975e <_dtoa_r+0x9ee>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	9a07      	ldr	r2, [sp, #28]
 80097b0:	1c5d      	adds	r5, r3, #1
 80097b2:	2339      	movs	r3, #57	; 0x39
 80097b4:	7013      	strb	r3, [r2, #0]
 80097b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097ba:	1e6a      	subs	r2, r5, #1
 80097bc:	2b39      	cmp	r3, #57	; 0x39
 80097be:	d04d      	beq.n	800985c <_dtoa_r+0xaec>
 80097c0:	3301      	adds	r3, #1
 80097c2:	e052      	b.n	800986a <_dtoa_r+0xafa>
 80097c4:	9a07      	ldr	r2, [sp, #28]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f102 0501 	add.w	r5, r2, #1
 80097cc:	dd06      	ble.n	80097dc <_dtoa_r+0xa6c>
 80097ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80097d2:	d0eb      	beq.n	80097ac <_dtoa_r+0xa3c>
 80097d4:	f108 0801 	add.w	r8, r8, #1
 80097d8:	9b07      	ldr	r3, [sp, #28]
 80097da:	e7c4      	b.n	8009766 <_dtoa_r+0x9f6>
 80097dc:	9b06      	ldr	r3, [sp, #24]
 80097de:	9a04      	ldr	r2, [sp, #16]
 80097e0:	1aeb      	subs	r3, r5, r3
 80097e2:	4293      	cmp	r3, r2
 80097e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80097e8:	d021      	beq.n	800982e <_dtoa_r+0xabe>
 80097ea:	4659      	mov	r1, fp
 80097ec:	2300      	movs	r3, #0
 80097ee:	220a      	movs	r2, #10
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f901 	bl	80099f8 <__multadd>
 80097f6:	45b9      	cmp	r9, r7
 80097f8:	4683      	mov	fp, r0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	f04f 020a 	mov.w	r2, #10
 8009802:	4649      	mov	r1, r9
 8009804:	4620      	mov	r0, r4
 8009806:	d105      	bne.n	8009814 <_dtoa_r+0xaa4>
 8009808:	f000 f8f6 	bl	80099f8 <__multadd>
 800980c:	4681      	mov	r9, r0
 800980e:	4607      	mov	r7, r0
 8009810:	9507      	str	r5, [sp, #28]
 8009812:	e778      	b.n	8009706 <_dtoa_r+0x996>
 8009814:	f000 f8f0 	bl	80099f8 <__multadd>
 8009818:	4639      	mov	r1, r7
 800981a:	4681      	mov	r9, r0
 800981c:	2300      	movs	r3, #0
 800981e:	220a      	movs	r2, #10
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f8e9 	bl	80099f8 <__multadd>
 8009826:	4607      	mov	r7, r0
 8009828:	e7f2      	b.n	8009810 <_dtoa_r+0xaa0>
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	4659      	mov	r1, fp
 8009830:	2201      	movs	r2, #1
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fa56 	bl	8009ce4 <__lshift>
 8009838:	4631      	mov	r1, r6
 800983a:	4683      	mov	fp, r0
 800983c:	f000 faa6 	bl	8009d8c <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	dcb8      	bgt.n	80097b6 <_dtoa_r+0xa46>
 8009844:	d102      	bne.n	800984c <_dtoa_r+0xadc>
 8009846:	f018 0f01 	tst.w	r8, #1
 800984a:	d1b4      	bne.n	80097b6 <_dtoa_r+0xa46>
 800984c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009850:	1e6a      	subs	r2, r5, #1
 8009852:	2b30      	cmp	r3, #48	; 0x30
 8009854:	f47f af0f 	bne.w	8009676 <_dtoa_r+0x906>
 8009858:	4615      	mov	r5, r2
 800985a:	e7f7      	b.n	800984c <_dtoa_r+0xadc>
 800985c:	9b06      	ldr	r3, [sp, #24]
 800985e:	4293      	cmp	r3, r2
 8009860:	d105      	bne.n	800986e <_dtoa_r+0xafe>
 8009862:	2331      	movs	r3, #49	; 0x31
 8009864:	9a06      	ldr	r2, [sp, #24]
 8009866:	f10a 0a01 	add.w	sl, sl, #1
 800986a:	7013      	strb	r3, [r2, #0]
 800986c:	e703      	b.n	8009676 <_dtoa_r+0x906>
 800986e:	4615      	mov	r5, r2
 8009870:	e7a1      	b.n	80097b6 <_dtoa_r+0xa46>
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <_dtoa_r+0xb60>)
 8009874:	f7ff bae1 	b.w	8008e3a <_dtoa_r+0xca>
 8009878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f aabb 	bne.w	8008df6 <_dtoa_r+0x86>
 8009880:	4b14      	ldr	r3, [pc, #80]	; (80098d4 <_dtoa_r+0xb64>)
 8009882:	f7ff bada 	b.w	8008e3a <_dtoa_r+0xca>
 8009886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009888:	2b01      	cmp	r3, #1
 800988a:	f77f ae3f 	ble.w	800950c <_dtoa_r+0x79c>
 800988e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009890:	9308      	str	r3, [sp, #32]
 8009892:	e653      	b.n	800953c <_dtoa_r+0x7cc>
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc03      	bgt.n	80098a2 <_dtoa_r+0xb32>
 800989a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800989c:	2b02      	cmp	r3, #2
 800989e:	f73f aed5 	bgt.w	800964c <_dtoa_r+0x8dc>
 80098a2:	9d06      	ldr	r5, [sp, #24]
 80098a4:	4631      	mov	r1, r6
 80098a6:	4658      	mov	r0, fp
 80098a8:	f7ff f9d4 	bl	8008c54 <quorem>
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80098b2:	f805 8b01 	strb.w	r8, [r5], #1
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	1aeb      	subs	r3, r5, r3
 80098ba:	429a      	cmp	r2, r3
 80098bc:	ddb5      	ble.n	800982a <_dtoa_r+0xaba>
 80098be:	4659      	mov	r1, fp
 80098c0:	2300      	movs	r3, #0
 80098c2:	220a      	movs	r2, #10
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f897 	bl	80099f8 <__multadd>
 80098ca:	4683      	mov	fp, r0
 80098cc:	e7ea      	b.n	80098a4 <_dtoa_r+0xb34>
 80098ce:	bf00      	nop
 80098d0:	0800a498 	.word	0x0800a498
 80098d4:	0800a4bc 	.word	0x0800a4bc

080098d8 <__locale_ctype_ptr_l>:
 80098d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80098dc:	4770      	bx	lr
	...

080098e0 <_localeconv_r>:
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <_localeconv_r+0x14>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6a18      	ldr	r0, [r3, #32]
 80098e6:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <_localeconv_r+0x18>)
 80098e8:	2800      	cmp	r0, #0
 80098ea:	bf08      	it	eq
 80098ec:	4618      	moveq	r0, r3
 80098ee:	30f0      	adds	r0, #240	; 0xf0
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000188 	.word	0x20000188
 80098f8:	200001ec 	.word	0x200001ec

080098fc <malloc>:
 80098fc:	4b02      	ldr	r3, [pc, #8]	; (8009908 <malloc+0xc>)
 80098fe:	4601      	mov	r1, r0
 8009900:	6818      	ldr	r0, [r3, #0]
 8009902:	f000 bb65 	b.w	8009fd0 <_malloc_r>
 8009906:	bf00      	nop
 8009908:	20000188 	.word	0x20000188

0800990c <__ascii_mbtowc>:
 800990c:	b082      	sub	sp, #8
 800990e:	b901      	cbnz	r1, 8009912 <__ascii_mbtowc+0x6>
 8009910:	a901      	add	r1, sp, #4
 8009912:	b142      	cbz	r2, 8009926 <__ascii_mbtowc+0x1a>
 8009914:	b14b      	cbz	r3, 800992a <__ascii_mbtowc+0x1e>
 8009916:	7813      	ldrb	r3, [r2, #0]
 8009918:	600b      	str	r3, [r1, #0]
 800991a:	7812      	ldrb	r2, [r2, #0]
 800991c:	1c10      	adds	r0, r2, #0
 800991e:	bf18      	it	ne
 8009920:	2001      	movne	r0, #1
 8009922:	b002      	add	sp, #8
 8009924:	4770      	bx	lr
 8009926:	4610      	mov	r0, r2
 8009928:	e7fb      	b.n	8009922 <__ascii_mbtowc+0x16>
 800992a:	f06f 0001 	mvn.w	r0, #1
 800992e:	e7f8      	b.n	8009922 <__ascii_mbtowc+0x16>

08009930 <memchr>:
 8009930:	b510      	push	{r4, lr}
 8009932:	b2c9      	uxtb	r1, r1
 8009934:	4402      	add	r2, r0
 8009936:	4290      	cmp	r0, r2
 8009938:	4603      	mov	r3, r0
 800993a:	d101      	bne.n	8009940 <memchr+0x10>
 800993c:	2300      	movs	r3, #0
 800993e:	e003      	b.n	8009948 <memchr+0x18>
 8009940:	781c      	ldrb	r4, [r3, #0]
 8009942:	3001      	adds	r0, #1
 8009944:	428c      	cmp	r4, r1
 8009946:	d1f6      	bne.n	8009936 <memchr+0x6>
 8009948:	4618      	mov	r0, r3
 800994a:	bd10      	pop	{r4, pc}

0800994c <memcpy>:
 800994c:	b510      	push	{r4, lr}
 800994e:	1e43      	subs	r3, r0, #1
 8009950:	440a      	add	r2, r1
 8009952:	4291      	cmp	r1, r2
 8009954:	d100      	bne.n	8009958 <memcpy+0xc>
 8009956:	bd10      	pop	{r4, pc}
 8009958:	f811 4b01 	ldrb.w	r4, [r1], #1
 800995c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009960:	e7f7      	b.n	8009952 <memcpy+0x6>

08009962 <_Balloc>:
 8009962:	b570      	push	{r4, r5, r6, lr}
 8009964:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009966:	4604      	mov	r4, r0
 8009968:	460e      	mov	r6, r1
 800996a:	b93d      	cbnz	r5, 800997c <_Balloc+0x1a>
 800996c:	2010      	movs	r0, #16
 800996e:	f7ff ffc5 	bl	80098fc <malloc>
 8009972:	6260      	str	r0, [r4, #36]	; 0x24
 8009974:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009978:	6005      	str	r5, [r0, #0]
 800997a:	60c5      	str	r5, [r0, #12]
 800997c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800997e:	68eb      	ldr	r3, [r5, #12]
 8009980:	b183      	cbz	r3, 80099a4 <_Balloc+0x42>
 8009982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800998a:	b9b8      	cbnz	r0, 80099bc <_Balloc+0x5a>
 800998c:	2101      	movs	r1, #1
 800998e:	fa01 f506 	lsl.w	r5, r1, r6
 8009992:	1d6a      	adds	r2, r5, #5
 8009994:	0092      	lsls	r2, r2, #2
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fabf 	bl	8009f1a <_calloc_r>
 800999c:	b160      	cbz	r0, 80099b8 <_Balloc+0x56>
 800999e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80099a2:	e00e      	b.n	80099c2 <_Balloc+0x60>
 80099a4:	2221      	movs	r2, #33	; 0x21
 80099a6:	2104      	movs	r1, #4
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fab6 	bl	8009f1a <_calloc_r>
 80099ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b0:	60e8      	str	r0, [r5, #12]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e4      	bne.n	8009982 <_Balloc+0x20>
 80099b8:	2000      	movs	r0, #0
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	6802      	ldr	r2, [r0, #0]
 80099be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80099c2:	2300      	movs	r3, #0
 80099c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099c8:	e7f7      	b.n	80099ba <_Balloc+0x58>

080099ca <_Bfree>:
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80099ce:	4606      	mov	r6, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	b93c      	cbnz	r4, 80099e4 <_Bfree+0x1a>
 80099d4:	2010      	movs	r0, #16
 80099d6:	f7ff ff91 	bl	80098fc <malloc>
 80099da:	6270      	str	r0, [r6, #36]	; 0x24
 80099dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e0:	6004      	str	r4, [r0, #0]
 80099e2:	60c4      	str	r4, [r0, #12]
 80099e4:	b13d      	cbz	r5, 80099f6 <_Bfree+0x2c>
 80099e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80099e8:	686a      	ldr	r2, [r5, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099f0:	6029      	str	r1, [r5, #0]
 80099f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80099f6:	bd70      	pop	{r4, r5, r6, pc}

080099f8 <__multadd>:
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	461f      	mov	r7, r3
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	2300      	movs	r3, #0
 8009a04:	690d      	ldr	r5, [r1, #16]
 8009a06:	f101 0c14 	add.w	ip, r1, #20
 8009a0a:	f8dc 0000 	ldr.w	r0, [ip]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	b281      	uxth	r1, r0
 8009a12:	fb02 7101 	mla	r1, r2, r1, r7
 8009a16:	0c00      	lsrs	r0, r0, #16
 8009a18:	0c0f      	lsrs	r7, r1, #16
 8009a1a:	fb02 7000 	mla	r0, r2, r0, r7
 8009a1e:	b289      	uxth	r1, r1
 8009a20:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a24:	429d      	cmp	r5, r3
 8009a26:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a2e:	dcec      	bgt.n	8009a0a <__multadd+0x12>
 8009a30:	b1d7      	cbz	r7, 8009a68 <__multadd+0x70>
 8009a32:	68a3      	ldr	r3, [r4, #8]
 8009a34:	42ab      	cmp	r3, r5
 8009a36:	dc12      	bgt.n	8009a5e <__multadd+0x66>
 8009a38:	6861      	ldr	r1, [r4, #4]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	3101      	adds	r1, #1
 8009a3e:	f7ff ff90 	bl	8009962 <_Balloc>
 8009a42:	4680      	mov	r8, r0
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	f104 010c 	add.w	r1, r4, #12
 8009a4a:	3202      	adds	r2, #2
 8009a4c:	0092      	lsls	r2, r2, #2
 8009a4e:	300c      	adds	r0, #12
 8009a50:	f7ff ff7c 	bl	800994c <memcpy>
 8009a54:	4621      	mov	r1, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff ffb7 	bl	80099ca <_Bfree>
 8009a5c:	4644      	mov	r4, r8
 8009a5e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a62:	3501      	adds	r5, #1
 8009a64:	615f      	str	r7, [r3, #20]
 8009a66:	6125      	str	r5, [r4, #16]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a6e <__hi0bits>:
 8009a6e:	0c02      	lsrs	r2, r0, #16
 8009a70:	0412      	lsls	r2, r2, #16
 8009a72:	4603      	mov	r3, r0
 8009a74:	b9b2      	cbnz	r2, 8009aa4 <__hi0bits+0x36>
 8009a76:	0403      	lsls	r3, r0, #16
 8009a78:	2010      	movs	r0, #16
 8009a7a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a7e:	bf04      	itt	eq
 8009a80:	021b      	lsleq	r3, r3, #8
 8009a82:	3008      	addeq	r0, #8
 8009a84:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a88:	bf04      	itt	eq
 8009a8a:	011b      	lsleq	r3, r3, #4
 8009a8c:	3004      	addeq	r0, #4
 8009a8e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a92:	bf04      	itt	eq
 8009a94:	009b      	lsleq	r3, r3, #2
 8009a96:	3002      	addeq	r0, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	db06      	blt.n	8009aaa <__hi0bits+0x3c>
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	d503      	bpl.n	8009aa8 <__hi0bits+0x3a>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	4770      	bx	lr
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7e8      	b.n	8009a7a <__hi0bits+0xc>
 8009aa8:	2020      	movs	r0, #32
 8009aaa:	4770      	bx	lr

08009aac <__lo0bits>:
 8009aac:	6803      	ldr	r3, [r0, #0]
 8009aae:	4601      	mov	r1, r0
 8009ab0:	f013 0207 	ands.w	r2, r3, #7
 8009ab4:	d00b      	beq.n	8009ace <__lo0bits+0x22>
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d423      	bmi.n	8009b02 <__lo0bits+0x56>
 8009aba:	0798      	lsls	r0, r3, #30
 8009abc:	bf49      	itett	mi
 8009abe:	085b      	lsrmi	r3, r3, #1
 8009ac0:	089b      	lsrpl	r3, r3, #2
 8009ac2:	2001      	movmi	r0, #1
 8009ac4:	600b      	strmi	r3, [r1, #0]
 8009ac6:	bf5c      	itt	pl
 8009ac8:	600b      	strpl	r3, [r1, #0]
 8009aca:	2002      	movpl	r0, #2
 8009acc:	4770      	bx	lr
 8009ace:	b298      	uxth	r0, r3
 8009ad0:	b9a8      	cbnz	r0, 8009afe <__lo0bits+0x52>
 8009ad2:	2010      	movs	r0, #16
 8009ad4:	0c1b      	lsrs	r3, r3, #16
 8009ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ada:	bf04      	itt	eq
 8009adc:	0a1b      	lsreq	r3, r3, #8
 8009ade:	3008      	addeq	r0, #8
 8009ae0:	071a      	lsls	r2, r3, #28
 8009ae2:	bf04      	itt	eq
 8009ae4:	091b      	lsreq	r3, r3, #4
 8009ae6:	3004      	addeq	r0, #4
 8009ae8:	079a      	lsls	r2, r3, #30
 8009aea:	bf04      	itt	eq
 8009aec:	089b      	lsreq	r3, r3, #2
 8009aee:	3002      	addeq	r0, #2
 8009af0:	07da      	lsls	r2, r3, #31
 8009af2:	d402      	bmi.n	8009afa <__lo0bits+0x4e>
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	d006      	beq.n	8009b06 <__lo0bits+0x5a>
 8009af8:	3001      	adds	r0, #1
 8009afa:	600b      	str	r3, [r1, #0]
 8009afc:	4770      	bx	lr
 8009afe:	4610      	mov	r0, r2
 8009b00:	e7e9      	b.n	8009ad6 <__lo0bits+0x2a>
 8009b02:	2000      	movs	r0, #0
 8009b04:	4770      	bx	lr
 8009b06:	2020      	movs	r0, #32
 8009b08:	4770      	bx	lr

08009b0a <__i2b>:
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	2101      	movs	r1, #1
 8009b10:	f7ff ff27 	bl	8009962 <_Balloc>
 8009b14:	2201      	movs	r2, #1
 8009b16:	6144      	str	r4, [r0, #20]
 8009b18:	6102      	str	r2, [r0, #16]
 8009b1a:	bd10      	pop	{r4, pc}

08009b1c <__multiply>:
 8009b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4614      	mov	r4, r2
 8009b22:	690a      	ldr	r2, [r1, #16]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	4688      	mov	r8, r1
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	bfbe      	ittt	lt
 8009b2c:	460b      	movlt	r3, r1
 8009b2e:	46a0      	movlt	r8, r4
 8009b30:	461c      	movlt	r4, r3
 8009b32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b42:	eb07 0609 	add.w	r6, r7, r9
 8009b46:	42b3      	cmp	r3, r6
 8009b48:	bfb8      	it	lt
 8009b4a:	3101      	addlt	r1, #1
 8009b4c:	f7ff ff09 	bl	8009962 <_Balloc>
 8009b50:	f100 0514 	add.w	r5, r0, #20
 8009b54:	462b      	mov	r3, r5
 8009b56:	2200      	movs	r2, #0
 8009b58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009b5c:	4573      	cmp	r3, lr
 8009b5e:	d316      	bcc.n	8009b8e <__multiply+0x72>
 8009b60:	f104 0214 	add.w	r2, r4, #20
 8009b64:	f108 0114 	add.w	r1, r8, #20
 8009b68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009b6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	9201      	str	r2, [sp, #4]
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d80c      	bhi.n	8009b94 <__multiply+0x78>
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	dd03      	ble.n	8009b86 <__multiply+0x6a>
 8009b7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d05d      	beq.n	8009c42 <__multiply+0x126>
 8009b86:	6106      	str	r6, [r0, #16]
 8009b88:	b003      	add	sp, #12
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	f843 2b04 	str.w	r2, [r3], #4
 8009b92:	e7e3      	b.n	8009b5c <__multiply+0x40>
 8009b94:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b98:	f1bb 0f00 	cmp.w	fp, #0
 8009b9c:	d023      	beq.n	8009be6 <__multiply+0xca>
 8009b9e:	4689      	mov	r9, r1
 8009ba0:	46ac      	mov	ip, r5
 8009ba2:	f04f 0800 	mov.w	r8, #0
 8009ba6:	f859 4b04 	ldr.w	r4, [r9], #4
 8009baa:	f8dc a000 	ldr.w	sl, [ip]
 8009bae:	b2a3      	uxth	r3, r4
 8009bb0:	fa1f fa8a 	uxth.w	sl, sl
 8009bb4:	fb0b a303 	mla	r3, fp, r3, sl
 8009bb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009bbc:	f8dc 4000 	ldr.w	r4, [ip]
 8009bc0:	4443      	add	r3, r8
 8009bc2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009bc6:	fb0b 840a 	mla	r4, fp, sl, r8
 8009bca:	46e2      	mov	sl, ip
 8009bcc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009bd6:	454f      	cmp	r7, r9
 8009bd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009bdc:	f84a 3b04 	str.w	r3, [sl], #4
 8009be0:	d82b      	bhi.n	8009c3a <__multiply+0x11e>
 8009be2:	f8cc 8004 	str.w	r8, [ip, #4]
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	3204      	adds	r2, #4
 8009bea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009bee:	f1ba 0f00 	cmp.w	sl, #0
 8009bf2:	d020      	beq.n	8009c36 <__multiply+0x11a>
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	46a8      	mov	r8, r5
 8009bf8:	f04f 0b00 	mov.w	fp, #0
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	f8b9 c000 	ldrh.w	ip, [r9]
 8009c02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	fb0a 440c 	mla	r4, sl, ip, r4
 8009c0c:	46c4      	mov	ip, r8
 8009c0e:	445c      	add	r4, fp
 8009c10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c14:	f84c 3b04 	str.w	r3, [ip], #4
 8009c18:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009c20:	0c1b      	lsrs	r3, r3, #16
 8009c22:	fb0a b303 	mla	r3, sl, r3, fp
 8009c26:	454f      	cmp	r7, r9
 8009c28:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009c2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009c30:	d805      	bhi.n	8009c3e <__multiply+0x122>
 8009c32:	f8c8 3004 	str.w	r3, [r8, #4]
 8009c36:	3504      	adds	r5, #4
 8009c38:	e79b      	b.n	8009b72 <__multiply+0x56>
 8009c3a:	46d4      	mov	ip, sl
 8009c3c:	e7b3      	b.n	8009ba6 <__multiply+0x8a>
 8009c3e:	46e0      	mov	r8, ip
 8009c40:	e7dd      	b.n	8009bfe <__multiply+0xe2>
 8009c42:	3e01      	subs	r6, #1
 8009c44:	e799      	b.n	8009b7a <__multiply+0x5e>
	...

08009c48 <__pow5mult>:
 8009c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c4c:	4615      	mov	r5, r2
 8009c4e:	f012 0203 	ands.w	r2, r2, #3
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	d007      	beq.n	8009c68 <__pow5mult+0x20>
 8009c58:	4c21      	ldr	r4, [pc, #132]	; (8009ce0 <__pow5mult+0x98>)
 8009c5a:	3a01      	subs	r2, #1
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c62:	f7ff fec9 	bl	80099f8 <__multadd>
 8009c66:	4607      	mov	r7, r0
 8009c68:	10ad      	asrs	r5, r5, #2
 8009c6a:	d035      	beq.n	8009cd8 <__pow5mult+0x90>
 8009c6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c6e:	b93c      	cbnz	r4, 8009c80 <__pow5mult+0x38>
 8009c70:	2010      	movs	r0, #16
 8009c72:	f7ff fe43 	bl	80098fc <malloc>
 8009c76:	6270      	str	r0, [r6, #36]	; 0x24
 8009c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c7c:	6004      	str	r4, [r0, #0]
 8009c7e:	60c4      	str	r4, [r0, #12]
 8009c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c88:	b94c      	cbnz	r4, 8009c9e <__pow5mult+0x56>
 8009c8a:	f240 2171 	movw	r1, #625	; 0x271
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff3b 	bl	8009b0a <__i2b>
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	07eb      	lsls	r3, r5, #31
 8009ca4:	d50a      	bpl.n	8009cbc <__pow5mult+0x74>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff ff36 	bl	8009b1c <__multiply>
 8009cb0:	4681      	mov	r9, r0
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff fe88 	bl	80099ca <_Bfree>
 8009cba:	464f      	mov	r7, r9
 8009cbc:	106d      	asrs	r5, r5, #1
 8009cbe:	d00b      	beq.n	8009cd8 <__pow5mult+0x90>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	b938      	cbnz	r0, 8009cd4 <__pow5mult+0x8c>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ff27 	bl	8009b1c <__multiply>
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	f8c0 8000 	str.w	r8, [r0]
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	e7e4      	b.n	8009ca2 <__pow5mult+0x5a>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cde:	bf00      	nop
 8009ce0:	0800a5c8 	.word	0x0800a5c8

08009ce4 <__lshift>:
 8009ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	4607      	mov	r7, r0
 8009cec:	4616      	mov	r6, r2
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cf4:	eb0a 0903 	add.w	r9, sl, r3
 8009cf8:	6849      	ldr	r1, [r1, #4]
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	f109 0501 	add.w	r5, r9, #1
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	db32      	blt.n	8009d6a <__lshift+0x86>
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff fe2c 	bl	8009962 <_Balloc>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f100 0114 	add.w	r1, r0, #20
 8009d14:	4553      	cmp	r3, sl
 8009d16:	db2b      	blt.n	8009d70 <__lshift+0x8c>
 8009d18:	6920      	ldr	r0, [r4, #16]
 8009d1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d1e:	f104 0314 	add.w	r3, r4, #20
 8009d22:	f016 021f 	ands.w	r2, r6, #31
 8009d26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d2e:	d025      	beq.n	8009d7c <__lshift+0x98>
 8009d30:	2000      	movs	r0, #0
 8009d32:	f1c2 0e20 	rsb	lr, r2, #32
 8009d36:	468a      	mov	sl, r1
 8009d38:	681e      	ldr	r6, [r3, #0]
 8009d3a:	4096      	lsls	r6, r2
 8009d3c:	4330      	orrs	r0, r6
 8009d3e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d42:	f853 0b04 	ldr.w	r0, [r3], #4
 8009d46:	459c      	cmp	ip, r3
 8009d48:	fa20 f00e 	lsr.w	r0, r0, lr
 8009d4c:	d814      	bhi.n	8009d78 <__lshift+0x94>
 8009d4e:	6048      	str	r0, [r1, #4]
 8009d50:	b108      	cbz	r0, 8009d56 <__lshift+0x72>
 8009d52:	f109 0502 	add.w	r5, r9, #2
 8009d56:	3d01      	subs	r5, #1
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f7ff fe33 	bl	80099ca <_Bfree>
 8009d64:	4640      	mov	r0, r8
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	3101      	adds	r1, #1
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	e7c7      	b.n	8009d00 <__lshift+0x1c>
 8009d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d74:	3301      	adds	r3, #1
 8009d76:	e7cd      	b.n	8009d14 <__lshift+0x30>
 8009d78:	4651      	mov	r1, sl
 8009d7a:	e7dc      	b.n	8009d36 <__lshift+0x52>
 8009d7c:	3904      	subs	r1, #4
 8009d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d82:	459c      	cmp	ip, r3
 8009d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d88:	d8f9      	bhi.n	8009d7e <__lshift+0x9a>
 8009d8a:	e7e4      	b.n	8009d56 <__lshift+0x72>

08009d8c <__mcmp>:
 8009d8c:	6903      	ldr	r3, [r0, #16]
 8009d8e:	690a      	ldr	r2, [r1, #16]
 8009d90:	b530      	push	{r4, r5, lr}
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	d10c      	bne.n	8009db0 <__mcmp+0x24>
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	3014      	adds	r0, #20
 8009d9a:	3114      	adds	r1, #20
 8009d9c:	1884      	adds	r4, r0, r2
 8009d9e:	4411      	add	r1, r2
 8009da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009da8:	4295      	cmp	r5, r2
 8009daa:	d003      	beq.n	8009db4 <__mcmp+0x28>
 8009dac:	d305      	bcc.n	8009dba <__mcmp+0x2e>
 8009dae:	2301      	movs	r3, #1
 8009db0:	4618      	mov	r0, r3
 8009db2:	bd30      	pop	{r4, r5, pc}
 8009db4:	42a0      	cmp	r0, r4
 8009db6:	d3f3      	bcc.n	8009da0 <__mcmp+0x14>
 8009db8:	e7fa      	b.n	8009db0 <__mcmp+0x24>
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	e7f7      	b.n	8009db0 <__mcmp+0x24>

08009dc0 <__mdiff>:
 8009dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4614      	mov	r4, r2
 8009dce:	f7ff ffdd 	bl	8009d8c <__mcmp>
 8009dd2:	1e06      	subs	r6, r0, #0
 8009dd4:	d108      	bne.n	8009de8 <__mdiff+0x28>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff fdc2 	bl	8009962 <_Balloc>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de8:	bfa4      	itt	ge
 8009dea:	4623      	movge	r3, r4
 8009dec:	462c      	movge	r4, r5
 8009dee:	4638      	mov	r0, r7
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	bfa6      	itte	ge
 8009df4:	461d      	movge	r5, r3
 8009df6:	2600      	movge	r6, #0
 8009df8:	2601      	movlt	r6, #1
 8009dfa:	f7ff fdb2 	bl	8009962 <_Balloc>
 8009dfe:	f04f 0e00 	mov.w	lr, #0
 8009e02:	60c6      	str	r6, [r0, #12]
 8009e04:	692b      	ldr	r3, [r5, #16]
 8009e06:	6926      	ldr	r6, [r4, #16]
 8009e08:	f104 0214 	add.w	r2, r4, #20
 8009e0c:	f105 0914 	add.w	r9, r5, #20
 8009e10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009e14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009e18:	f100 0114 	add.w	r1, r0, #20
 8009e1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009e20:	f859 5b04 	ldr.w	r5, [r9], #4
 8009e24:	fa1f f38a 	uxth.w	r3, sl
 8009e28:	4473      	add	r3, lr
 8009e2a:	b2ac      	uxth	r4, r5
 8009e2c:	1b1b      	subs	r3, r3, r4
 8009e2e:	0c2c      	lsrs	r4, r5, #16
 8009e30:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009e34:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009e3e:	45c8      	cmp	r8, r9
 8009e40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009e44:	4694      	mov	ip, r2
 8009e46:	f841 4b04 	str.w	r4, [r1], #4
 8009e4a:	d8e7      	bhi.n	8009e1c <__mdiff+0x5c>
 8009e4c:	45bc      	cmp	ip, r7
 8009e4e:	d304      	bcc.n	8009e5a <__mdiff+0x9a>
 8009e50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e54:	b183      	cbz	r3, 8009e78 <__mdiff+0xb8>
 8009e56:	6106      	str	r6, [r0, #16]
 8009e58:	e7c4      	b.n	8009de4 <__mdiff+0x24>
 8009e5a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009e5e:	b2a2      	uxth	r2, r4
 8009e60:	4472      	add	r2, lr
 8009e62:	1413      	asrs	r3, r2, #16
 8009e64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e68:	b292      	uxth	r2, r2
 8009e6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e6e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009e72:	f841 2b04 	str.w	r2, [r1], #4
 8009e76:	e7e9      	b.n	8009e4c <__mdiff+0x8c>
 8009e78:	3e01      	subs	r6, #1
 8009e7a:	e7e9      	b.n	8009e50 <__mdiff+0x90>

08009e7c <__d2b>:
 8009e7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e80:	461c      	mov	r4, r3
 8009e82:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009e86:	2101      	movs	r1, #1
 8009e88:	4690      	mov	r8, r2
 8009e8a:	f7ff fd6a 	bl	8009962 <_Balloc>
 8009e8e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009e92:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009e96:	4607      	mov	r7, r0
 8009e98:	bb34      	cbnz	r4, 8009ee8 <__d2b+0x6c>
 8009e9a:	9201      	str	r2, [sp, #4]
 8009e9c:	f1b8 0200 	subs.w	r2, r8, #0
 8009ea0:	d027      	beq.n	8009ef2 <__d2b+0x76>
 8009ea2:	a802      	add	r0, sp, #8
 8009ea4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009ea8:	f7ff fe00 	bl	8009aac <__lo0bits>
 8009eac:	9900      	ldr	r1, [sp, #0]
 8009eae:	b1f0      	cbz	r0, 8009eee <__d2b+0x72>
 8009eb0:	9a01      	ldr	r2, [sp, #4]
 8009eb2:	f1c0 0320 	rsb	r3, r0, #32
 8009eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eba:	430b      	orrs	r3, r1
 8009ebc:	40c2      	lsrs	r2, r0
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	9201      	str	r2, [sp, #4]
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bf14      	ite	ne
 8009ec8:	2102      	movne	r1, #2
 8009eca:	2101      	moveq	r1, #1
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	6139      	str	r1, [r7, #16]
 8009ed0:	b1c4      	cbz	r4, 8009f04 <__d2b+0x88>
 8009ed2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ed6:	4404      	add	r4, r0
 8009ed8:	6034      	str	r4, [r6, #0]
 8009eda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ede:	6028      	str	r0, [r5, #0]
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	b002      	add	sp, #8
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009eec:	e7d5      	b.n	8009e9a <__d2b+0x1e>
 8009eee:	6179      	str	r1, [r7, #20]
 8009ef0:	e7e7      	b.n	8009ec2 <__d2b+0x46>
 8009ef2:	a801      	add	r0, sp, #4
 8009ef4:	f7ff fdda 	bl	8009aac <__lo0bits>
 8009ef8:	2101      	movs	r1, #1
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	6139      	str	r1, [r7, #16]
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	3020      	adds	r0, #32
 8009f02:	e7e5      	b.n	8009ed0 <__d2b+0x54>
 8009f04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f0c:	6030      	str	r0, [r6, #0]
 8009f0e:	6918      	ldr	r0, [r3, #16]
 8009f10:	f7ff fdad 	bl	8009a6e <__hi0bits>
 8009f14:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f18:	e7e1      	b.n	8009ede <__d2b+0x62>

08009f1a <_calloc_r>:
 8009f1a:	b538      	push	{r3, r4, r5, lr}
 8009f1c:	fb02 f401 	mul.w	r4, r2, r1
 8009f20:	4621      	mov	r1, r4
 8009f22:	f000 f855 	bl	8009fd0 <_malloc_r>
 8009f26:	4605      	mov	r5, r0
 8009f28:	b118      	cbz	r0, 8009f32 <_calloc_r+0x18>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f7fe f987 	bl	8008240 <memset>
 8009f32:	4628      	mov	r0, r5
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
	...

08009f38 <_free_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d043      	beq.n	8009fc8 <_free_r+0x90>
 8009f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f44:	1f0c      	subs	r4, r1, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb8      	it	lt
 8009f4a:	18e4      	addlt	r4, r4, r3
 8009f4c:	f000 fa22 	bl	800a394 <__malloc_lock>
 8009f50:	4a1e      	ldr	r2, [pc, #120]	; (8009fcc <_free_r+0x94>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	4610      	mov	r0, r2
 8009f56:	b933      	cbnz	r3, 8009f66 <_free_r+0x2e>
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	6014      	str	r4, [r2, #0]
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f62:	f000 ba18 	b.w	800a396 <__malloc_unlock>
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	d90b      	bls.n	8009f82 <_free_r+0x4a>
 8009f6a:	6821      	ldr	r1, [r4, #0]
 8009f6c:	1862      	adds	r2, r4, r1
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	bf01      	itttt	eq
 8009f72:	681a      	ldreq	r2, [r3, #0]
 8009f74:	685b      	ldreq	r3, [r3, #4]
 8009f76:	1852      	addeq	r2, r2, r1
 8009f78:	6022      	streq	r2, [r4, #0]
 8009f7a:	6063      	str	r3, [r4, #4]
 8009f7c:	6004      	str	r4, [r0, #0]
 8009f7e:	e7ed      	b.n	8009f5c <_free_r+0x24>
 8009f80:	4613      	mov	r3, r2
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	b10a      	cbz	r2, 8009f8a <_free_r+0x52>
 8009f86:	42a2      	cmp	r2, r4
 8009f88:	d9fa      	bls.n	8009f80 <_free_r+0x48>
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	1858      	adds	r0, r3, r1
 8009f8e:	42a0      	cmp	r0, r4
 8009f90:	d10b      	bne.n	8009faa <_free_r+0x72>
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	4401      	add	r1, r0
 8009f96:	1858      	adds	r0, r3, r1
 8009f98:	4282      	cmp	r2, r0
 8009f9a:	6019      	str	r1, [r3, #0]
 8009f9c:	d1de      	bne.n	8009f5c <_free_r+0x24>
 8009f9e:	6810      	ldr	r0, [r2, #0]
 8009fa0:	6852      	ldr	r2, [r2, #4]
 8009fa2:	4401      	add	r1, r0
 8009fa4:	6019      	str	r1, [r3, #0]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	e7d8      	b.n	8009f5c <_free_r+0x24>
 8009faa:	d902      	bls.n	8009fb2 <_free_r+0x7a>
 8009fac:	230c      	movs	r3, #12
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	e7d4      	b.n	8009f5c <_free_r+0x24>
 8009fb2:	6820      	ldr	r0, [r4, #0]
 8009fb4:	1821      	adds	r1, r4, r0
 8009fb6:	428a      	cmp	r2, r1
 8009fb8:	bf01      	itttt	eq
 8009fba:	6811      	ldreq	r1, [r2, #0]
 8009fbc:	6852      	ldreq	r2, [r2, #4]
 8009fbe:	1809      	addeq	r1, r1, r0
 8009fc0:	6021      	streq	r1, [r4, #0]
 8009fc2:	6062      	str	r2, [r4, #4]
 8009fc4:	605c      	str	r4, [r3, #4]
 8009fc6:	e7c9      	b.n	8009f5c <_free_r+0x24>
 8009fc8:	bd38      	pop	{r3, r4, r5, pc}
 8009fca:	bf00      	nop
 8009fcc:	200005c0 	.word	0x200005c0

08009fd0 <_malloc_r>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	1ccd      	adds	r5, r1, #3
 8009fd4:	f025 0503 	bic.w	r5, r5, #3
 8009fd8:	3508      	adds	r5, #8
 8009fda:	2d0c      	cmp	r5, #12
 8009fdc:	bf38      	it	cc
 8009fde:	250c      	movcc	r5, #12
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	db01      	blt.n	8009fea <_malloc_r+0x1a>
 8009fe6:	42a9      	cmp	r1, r5
 8009fe8:	d903      	bls.n	8009ff2 <_malloc_r+0x22>
 8009fea:	230c      	movs	r3, #12
 8009fec:	6033      	str	r3, [r6, #0]
 8009fee:	2000      	movs	r0, #0
 8009ff0:	bd70      	pop	{r4, r5, r6, pc}
 8009ff2:	f000 f9cf 	bl	800a394 <__malloc_lock>
 8009ff6:	4a21      	ldr	r2, [pc, #132]	; (800a07c <_malloc_r+0xac>)
 8009ff8:	6814      	ldr	r4, [r2, #0]
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	b991      	cbnz	r1, 800a024 <_malloc_r+0x54>
 8009ffe:	4c20      	ldr	r4, [pc, #128]	; (800a080 <_malloc_r+0xb0>)
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	b91b      	cbnz	r3, 800a00c <_malloc_r+0x3c>
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f98f 	bl	800a328 <_sbrk_r>
 800a00a:	6020      	str	r0, [r4, #0]
 800a00c:	4629      	mov	r1, r5
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 f98a 	bl	800a328 <_sbrk_r>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d124      	bne.n	800a062 <_malloc_r+0x92>
 800a018:	230c      	movs	r3, #12
 800a01a:	4630      	mov	r0, r6
 800a01c:	6033      	str	r3, [r6, #0]
 800a01e:	f000 f9ba 	bl	800a396 <__malloc_unlock>
 800a022:	e7e4      	b.n	8009fee <_malloc_r+0x1e>
 800a024:	680b      	ldr	r3, [r1, #0]
 800a026:	1b5b      	subs	r3, r3, r5
 800a028:	d418      	bmi.n	800a05c <_malloc_r+0x8c>
 800a02a:	2b0b      	cmp	r3, #11
 800a02c:	d90f      	bls.n	800a04e <_malloc_r+0x7e>
 800a02e:	600b      	str	r3, [r1, #0]
 800a030:	18cc      	adds	r4, r1, r3
 800a032:	50cd      	str	r5, [r1, r3]
 800a034:	4630      	mov	r0, r6
 800a036:	f000 f9ae 	bl	800a396 <__malloc_unlock>
 800a03a:	f104 000b 	add.w	r0, r4, #11
 800a03e:	1d23      	adds	r3, r4, #4
 800a040:	f020 0007 	bic.w	r0, r0, #7
 800a044:	1ac3      	subs	r3, r0, r3
 800a046:	d0d3      	beq.n	8009ff0 <_malloc_r+0x20>
 800a048:	425a      	negs	r2, r3
 800a04a:	50e2      	str	r2, [r4, r3]
 800a04c:	e7d0      	b.n	8009ff0 <_malloc_r+0x20>
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	428c      	cmp	r4, r1
 800a052:	bf16      	itet	ne
 800a054:	6063      	strne	r3, [r4, #4]
 800a056:	6013      	streq	r3, [r2, #0]
 800a058:	460c      	movne	r4, r1
 800a05a:	e7eb      	b.n	800a034 <_malloc_r+0x64>
 800a05c:	460c      	mov	r4, r1
 800a05e:	6849      	ldr	r1, [r1, #4]
 800a060:	e7cc      	b.n	8009ffc <_malloc_r+0x2c>
 800a062:	1cc4      	adds	r4, r0, #3
 800a064:	f024 0403 	bic.w	r4, r4, #3
 800a068:	42a0      	cmp	r0, r4
 800a06a:	d005      	beq.n	800a078 <_malloc_r+0xa8>
 800a06c:	1a21      	subs	r1, r4, r0
 800a06e:	4630      	mov	r0, r6
 800a070:	f000 f95a 	bl	800a328 <_sbrk_r>
 800a074:	3001      	adds	r0, #1
 800a076:	d0cf      	beq.n	800a018 <_malloc_r+0x48>
 800a078:	6025      	str	r5, [r4, #0]
 800a07a:	e7db      	b.n	800a034 <_malloc_r+0x64>
 800a07c:	200005c0 	.word	0x200005c0
 800a080:	200005c4 	.word	0x200005c4

0800a084 <__ssputs_r>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	688e      	ldr	r6, [r1, #8]
 800a08a:	4682      	mov	sl, r0
 800a08c:	429e      	cmp	r6, r3
 800a08e:	460c      	mov	r4, r1
 800a090:	4690      	mov	r8, r2
 800a092:	4699      	mov	r9, r3
 800a094:	d837      	bhi.n	800a106 <__ssputs_r+0x82>
 800a096:	898a      	ldrh	r2, [r1, #12]
 800a098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a09c:	d031      	beq.n	800a102 <__ssputs_r+0x7e>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	6825      	ldr	r5, [r4, #0]
 800a0a2:	6909      	ldr	r1, [r1, #16]
 800a0a4:	1a6f      	subs	r7, r5, r1
 800a0a6:	6965      	ldr	r5, [r4, #20]
 800a0a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800a0b0:	f109 0301 	add.w	r3, r9, #1
 800a0b4:	443b      	add	r3, r7
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	bf38      	it	cc
 800a0ba:	461d      	movcc	r5, r3
 800a0bc:	0553      	lsls	r3, r2, #21
 800a0be:	d530      	bpl.n	800a122 <__ssputs_r+0x9e>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7ff ff85 	bl	8009fd0 <_malloc_r>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b950      	cbnz	r0, 800a0e0 <__ssputs_r+0x5c>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	f8ca 3000 	str.w	r3, [sl]
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	463a      	mov	r2, r7
 800a0e2:	6921      	ldr	r1, [r4, #16]
 800a0e4:	f7ff fc32 	bl	800994c <memcpy>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6126      	str	r6, [r4, #16]
 800a0f6:	443e      	add	r6, r7
 800a0f8:	6026      	str	r6, [r4, #0]
 800a0fa:	464e      	mov	r6, r9
 800a0fc:	6165      	str	r5, [r4, #20]
 800a0fe:	1bed      	subs	r5, r5, r7
 800a100:	60a5      	str	r5, [r4, #8]
 800a102:	454e      	cmp	r6, r9
 800a104:	d900      	bls.n	800a108 <__ssputs_r+0x84>
 800a106:	464e      	mov	r6, r9
 800a108:	4632      	mov	r2, r6
 800a10a:	4641      	mov	r1, r8
 800a10c:	6820      	ldr	r0, [r4, #0]
 800a10e:	f000 f928 	bl	800a362 <memmove>
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	2000      	movs	r0, #0
 800a116:	1b9b      	subs	r3, r3, r6
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	441e      	add	r6, r3
 800a11e:	6026      	str	r6, [r4, #0]
 800a120:	e7dc      	b.n	800a0dc <__ssputs_r+0x58>
 800a122:	462a      	mov	r2, r5
 800a124:	f000 f938 	bl	800a398 <_realloc_r>
 800a128:	4606      	mov	r6, r0
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d1e2      	bne.n	800a0f4 <__ssputs_r+0x70>
 800a12e:	6921      	ldr	r1, [r4, #16]
 800a130:	4650      	mov	r0, sl
 800a132:	f7ff ff01 	bl	8009f38 <_free_r>
 800a136:	e7c8      	b.n	800a0ca <__ssputs_r+0x46>

0800a138 <_svfiprintf_r>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	461d      	mov	r5, r3
 800a13e:	898b      	ldrh	r3, [r1, #12]
 800a140:	b09d      	sub	sp, #116	; 0x74
 800a142:	061f      	lsls	r7, r3, #24
 800a144:	4680      	mov	r8, r0
 800a146:	460c      	mov	r4, r1
 800a148:	4616      	mov	r6, r2
 800a14a:	d50f      	bpl.n	800a16c <_svfiprintf_r+0x34>
 800a14c:	690b      	ldr	r3, [r1, #16]
 800a14e:	b96b      	cbnz	r3, 800a16c <_svfiprintf_r+0x34>
 800a150:	2140      	movs	r1, #64	; 0x40
 800a152:	f7ff ff3d 	bl	8009fd0 <_malloc_r>
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	6120      	str	r0, [r4, #16]
 800a15a:	b928      	cbnz	r0, 800a168 <_svfiprintf_r+0x30>
 800a15c:	230c      	movs	r3, #12
 800a15e:	f8c8 3000 	str.w	r3, [r8]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	e0c8      	b.n	800a2fa <_svfiprintf_r+0x1c2>
 800a168:	2340      	movs	r3, #64	; 0x40
 800a16a:	6163      	str	r3, [r4, #20]
 800a16c:	2300      	movs	r3, #0
 800a16e:	9309      	str	r3, [sp, #36]	; 0x24
 800a170:	2320      	movs	r3, #32
 800a172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a176:	2330      	movs	r3, #48	; 0x30
 800a178:	f04f 0b01 	mov.w	fp, #1
 800a17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a180:	9503      	str	r5, [sp, #12]
 800a182:	4637      	mov	r7, r6
 800a184:	463d      	mov	r5, r7
 800a186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a18a:	b10b      	cbz	r3, 800a190 <_svfiprintf_r+0x58>
 800a18c:	2b25      	cmp	r3, #37	; 0x25
 800a18e:	d13e      	bne.n	800a20e <_svfiprintf_r+0xd6>
 800a190:	ebb7 0a06 	subs.w	sl, r7, r6
 800a194:	d00b      	beq.n	800a1ae <_svfiprintf_r+0x76>
 800a196:	4653      	mov	r3, sl
 800a198:	4632      	mov	r2, r6
 800a19a:	4621      	mov	r1, r4
 800a19c:	4640      	mov	r0, r8
 800a19e:	f7ff ff71 	bl	800a084 <__ssputs_r>
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f000 80a4 	beq.w	800a2f0 <_svfiprintf_r+0x1b8>
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	4453      	add	r3, sl
 800a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ae:	783b      	ldrb	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 809d 	beq.w	800a2f0 <_svfiprintf_r+0x1b8>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9307      	str	r3, [sp, #28]
 800a1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ca:	462f      	mov	r7, r5
 800a1cc:	2205      	movs	r2, #5
 800a1ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1d2:	4850      	ldr	r0, [pc, #320]	; (800a314 <_svfiprintf_r+0x1dc>)
 800a1d4:	f7ff fbac 	bl	8009930 <memchr>
 800a1d8:	9b04      	ldr	r3, [sp, #16]
 800a1da:	b9d0      	cbnz	r0, 800a212 <_svfiprintf_r+0xda>
 800a1dc:	06d9      	lsls	r1, r3, #27
 800a1de:	bf44      	itt	mi
 800a1e0:	2220      	movmi	r2, #32
 800a1e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1e6:	071a      	lsls	r2, r3, #28
 800a1e8:	bf44      	itt	mi
 800a1ea:	222b      	movmi	r2, #43	; 0x2b
 800a1ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1f0:	782a      	ldrb	r2, [r5, #0]
 800a1f2:	2a2a      	cmp	r2, #42	; 0x2a
 800a1f4:	d015      	beq.n	800a222 <_svfiprintf_r+0xea>
 800a1f6:	462f      	mov	r7, r5
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	250a      	movs	r5, #10
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	4639      	mov	r1, r7
 800a200:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a204:	3b30      	subs	r3, #48	; 0x30
 800a206:	2b09      	cmp	r3, #9
 800a208:	d94d      	bls.n	800a2a6 <_svfiprintf_r+0x16e>
 800a20a:	b1b8      	cbz	r0, 800a23c <_svfiprintf_r+0x104>
 800a20c:	e00f      	b.n	800a22e <_svfiprintf_r+0xf6>
 800a20e:	462f      	mov	r7, r5
 800a210:	e7b8      	b.n	800a184 <_svfiprintf_r+0x4c>
 800a212:	4a40      	ldr	r2, [pc, #256]	; (800a314 <_svfiprintf_r+0x1dc>)
 800a214:	463d      	mov	r5, r7
 800a216:	1a80      	subs	r0, r0, r2
 800a218:	fa0b f000 	lsl.w	r0, fp, r0
 800a21c:	4318      	orrs	r0, r3
 800a21e:	9004      	str	r0, [sp, #16]
 800a220:	e7d3      	b.n	800a1ca <_svfiprintf_r+0x92>
 800a222:	9a03      	ldr	r2, [sp, #12]
 800a224:	1d11      	adds	r1, r2, #4
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	9103      	str	r1, [sp, #12]
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	db01      	blt.n	800a232 <_svfiprintf_r+0xfa>
 800a22e:	9207      	str	r2, [sp, #28]
 800a230:	e004      	b.n	800a23c <_svfiprintf_r+0x104>
 800a232:	4252      	negs	r2, r2
 800a234:	f043 0302 	orr.w	r3, r3, #2
 800a238:	9207      	str	r2, [sp, #28]
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	783b      	ldrb	r3, [r7, #0]
 800a23e:	2b2e      	cmp	r3, #46	; 0x2e
 800a240:	d10c      	bne.n	800a25c <_svfiprintf_r+0x124>
 800a242:	787b      	ldrb	r3, [r7, #1]
 800a244:	2b2a      	cmp	r3, #42	; 0x2a
 800a246:	d133      	bne.n	800a2b0 <_svfiprintf_r+0x178>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	3702      	adds	r7, #2
 800a24c:	1d1a      	adds	r2, r3, #4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	9203      	str	r2, [sp, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	bfb8      	it	lt
 800a256:	f04f 33ff 	movlt.w	r3, #4294967295
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	4d2e      	ldr	r5, [pc, #184]	; (800a318 <_svfiprintf_r+0x1e0>)
 800a25e:	2203      	movs	r2, #3
 800a260:	7839      	ldrb	r1, [r7, #0]
 800a262:	4628      	mov	r0, r5
 800a264:	f7ff fb64 	bl	8009930 <memchr>
 800a268:	b138      	cbz	r0, 800a27a <_svfiprintf_r+0x142>
 800a26a:	2340      	movs	r3, #64	; 0x40
 800a26c:	1b40      	subs	r0, r0, r5
 800a26e:	fa03 f000 	lsl.w	r0, r3, r0
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	3701      	adds	r7, #1
 800a276:	4303      	orrs	r3, r0
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	7839      	ldrb	r1, [r7, #0]
 800a27c:	2206      	movs	r2, #6
 800a27e:	4827      	ldr	r0, [pc, #156]	; (800a31c <_svfiprintf_r+0x1e4>)
 800a280:	1c7e      	adds	r6, r7, #1
 800a282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a286:	f7ff fb53 	bl	8009930 <memchr>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d038      	beq.n	800a300 <_svfiprintf_r+0x1c8>
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <_svfiprintf_r+0x1e8>)
 800a290:	bb13      	cbnz	r3, 800a2d8 <_svfiprintf_r+0x1a0>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	3307      	adds	r3, #7
 800a296:	f023 0307 	bic.w	r3, r3, #7
 800a29a:	3308      	adds	r3, #8
 800a29c:	9303      	str	r3, [sp, #12]
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	444b      	add	r3, r9
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	e76d      	b.n	800a182 <_svfiprintf_r+0x4a>
 800a2a6:	fb05 3202 	mla	r2, r5, r2, r3
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	e7a6      	b.n	800a1fe <_svfiprintf_r+0xc6>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	250a      	movs	r5, #10
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	3701      	adds	r7, #1
 800a2b8:	9305      	str	r3, [sp, #20]
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2c0:	3a30      	subs	r2, #48	; 0x30
 800a2c2:	2a09      	cmp	r2, #9
 800a2c4:	d903      	bls.n	800a2ce <_svfiprintf_r+0x196>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0c8      	beq.n	800a25c <_svfiprintf_r+0x124>
 800a2ca:	9105      	str	r1, [sp, #20]
 800a2cc:	e7c6      	b.n	800a25c <_svfiprintf_r+0x124>
 800a2ce:	fb05 2101 	mla	r1, r5, r1, r2
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	e7f0      	b.n	800a2ba <_svfiprintf_r+0x182>
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4b11      	ldr	r3, [pc, #68]	; (800a324 <_svfiprintf_r+0x1ec>)
 800a2e0:	a904      	add	r1, sp, #16
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7fe f846 	bl	8008374 <_printf_float>
 800a2e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2ec:	4681      	mov	r9, r0
 800a2ee:	d1d6      	bne.n	800a29e <_svfiprintf_r+0x166>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	065b      	lsls	r3, r3, #25
 800a2f4:	f53f af35 	bmi.w	800a162 <_svfiprintf_r+0x2a>
 800a2f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2fa:	b01d      	add	sp, #116	; 0x74
 800a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a300:	ab03      	add	r3, sp, #12
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	4622      	mov	r2, r4
 800a306:	4b07      	ldr	r3, [pc, #28]	; (800a324 <_svfiprintf_r+0x1ec>)
 800a308:	a904      	add	r1, sp, #16
 800a30a:	4640      	mov	r0, r8
 800a30c:	f7fe fade 	bl	80088cc <_printf_i>
 800a310:	e7ea      	b.n	800a2e8 <_svfiprintf_r+0x1b0>
 800a312:	bf00      	nop
 800a314:	0800a5d4 	.word	0x0800a5d4
 800a318:	0800a5da 	.word	0x0800a5da
 800a31c:	0800a5de 	.word	0x0800a5de
 800a320:	08008375 	.word	0x08008375
 800a324:	0800a085 	.word	0x0800a085

0800a328 <_sbrk_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	2300      	movs	r3, #0
 800a32c:	4c05      	ldr	r4, [pc, #20]	; (800a344 <_sbrk_r+0x1c>)
 800a32e:	4605      	mov	r5, r0
 800a330:	4608      	mov	r0, r1
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	f7f6 fe86 	bl	8001044 <_sbrk>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_sbrk_r+0x1a>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_sbrk_r+0x1a>
 800a340:	602b      	str	r3, [r5, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	20001fc4 	.word	0x20001fc4

0800a348 <__ascii_wctomb>:
 800a348:	b149      	cbz	r1, 800a35e <__ascii_wctomb+0x16>
 800a34a:	2aff      	cmp	r2, #255	; 0xff
 800a34c:	bf8b      	itete	hi
 800a34e:	238a      	movhi	r3, #138	; 0x8a
 800a350:	700a      	strbls	r2, [r1, #0]
 800a352:	6003      	strhi	r3, [r0, #0]
 800a354:	2001      	movls	r0, #1
 800a356:	bf88      	it	hi
 800a358:	f04f 30ff 	movhi.w	r0, #4294967295
 800a35c:	4770      	bx	lr
 800a35e:	4608      	mov	r0, r1
 800a360:	4770      	bx	lr

0800a362 <memmove>:
 800a362:	4288      	cmp	r0, r1
 800a364:	b510      	push	{r4, lr}
 800a366:	eb01 0302 	add.w	r3, r1, r2
 800a36a:	d807      	bhi.n	800a37c <memmove+0x1a>
 800a36c:	1e42      	subs	r2, r0, #1
 800a36e:	4299      	cmp	r1, r3
 800a370:	d00a      	beq.n	800a388 <memmove+0x26>
 800a372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a376:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a37a:	e7f8      	b.n	800a36e <memmove+0xc>
 800a37c:	4283      	cmp	r3, r0
 800a37e:	d9f5      	bls.n	800a36c <memmove+0xa>
 800a380:	1881      	adds	r1, r0, r2
 800a382:	1ad2      	subs	r2, r2, r3
 800a384:	42d3      	cmn	r3, r2
 800a386:	d100      	bne.n	800a38a <memmove+0x28>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a38e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a392:	e7f7      	b.n	800a384 <memmove+0x22>

0800a394 <__malloc_lock>:
 800a394:	4770      	bx	lr

0800a396 <__malloc_unlock>:
 800a396:	4770      	bx	lr

0800a398 <_realloc_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	4607      	mov	r7, r0
 800a39c:	4614      	mov	r4, r2
 800a39e:	460e      	mov	r6, r1
 800a3a0:	b921      	cbnz	r1, 800a3ac <_realloc_r+0x14>
 800a3a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	f7ff be12 	b.w	8009fd0 <_malloc_r>
 800a3ac:	b922      	cbnz	r2, 800a3b8 <_realloc_r+0x20>
 800a3ae:	f7ff fdc3 	bl	8009f38 <_free_r>
 800a3b2:	4625      	mov	r5, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b8:	f000 f814 	bl	800a3e4 <_malloc_usable_size_r>
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d20f      	bcs.n	800a3e0 <_realloc_r+0x48>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff fe04 	bl	8009fd0 <_malloc_r>
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0f2      	beq.n	800a3b4 <_realloc_r+0x1c>
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	f7ff fabb 	bl	800994c <memcpy>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff fdad 	bl	8009f38 <_free_r>
 800a3de:	e7e9      	b.n	800a3b4 <_realloc_r+0x1c>
 800a3e0:	4635      	mov	r5, r6
 800a3e2:	e7e7      	b.n	800a3b4 <_realloc_r+0x1c>

0800a3e4 <_malloc_usable_size_r>:
 800a3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e8:	1f18      	subs	r0, r3, #4
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	bfbc      	itt	lt
 800a3ee:	580b      	ldrlt	r3, [r1, r0]
 800a3f0:	18c0      	addlt	r0, r0, r3
 800a3f2:	4770      	bx	lr

0800a3f4 <_init>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr

0800a400 <_fini>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr
