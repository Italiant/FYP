
Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800acb0  0800acb0  0001acb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b768  0800b768  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800b768  0800b768  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b768  0800b768  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b768  0800b768  0001b768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b76c  0800b76c  0001b76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800b770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d30  20000354  0800bac4  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002084  0800bac4  00022084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018277  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034e2  00000000  00000000  000385f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfb0  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112f7  00000000  00000000  00059a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e9d5  00000000  00000000  0006ad17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f96ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051dc  00000000  00000000  000f9768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac98 	.word	0x0800ac98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	0800ac98 	.word	0x0800ac98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <stringToBinary>:
/* USER CODE BEGIN 0 */

// Function taken from: https://stackoverflow.com/questions/41384262/convert-string-to-binary-in-c
// converts a given string to its binary equivalent
char *stringToBinary(char *s)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if (s == NULL) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <stringToBinary+0x12>
		// NULL might be 0 but you cannot be sure about it
		return NULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e05a      	b.n	8000b50 <stringToBinary+0xc8>
	}
	// get length of string without NULL
	size_t slen = strlen(s);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fb58 	bl	8000150 <strlen>
 8000aa0:	6138      	str	r0, [r7, #16]

	errno = 0;
 8000aa2:	f007 fba7 	bl	80081f4 <__errno>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	6013      	str	r3, [r2, #0]
	// allocate "slen" (number of characters in string without NUL)
	// times the number of bits in a "char" plus one byte for the NUL
	// at the end of the return value
	char *binary = malloc(slen * CHAR_BIT + 1);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f007 fbda 	bl	800826c <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	61fb      	str	r3, [r7, #28]
	if(binary == NULL){
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <stringToBinary+0x5e>
		fprintf(stderr,"malloc has failed in stringToBinary(%s): %s\n",s, strerror(errno));
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <stringToBinary+0xd0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68dc      	ldr	r4, [r3, #12]
 8000ac8:	f007 fb94 	bl	80081f4 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f008 fc15 	bl	8009300 <strerror>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4920      	ldr	r1, [pc, #128]	; (8000b5c <stringToBinary+0xd4>)
 8000adc:	4620      	mov	r0, r4
 8000ade:	f007 fb8f 	bl	8008200 <fiprintf>
		return NULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e034      	b.n	8000b50 <stringToBinary+0xc8>
	}

	if (slen == 0) {
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <stringToBinary+0x6e>
		*binary = '\0';
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		return binary;
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	e02c      	b.n	8000b50 <stringToBinary+0xc8>
	}
	char *ptr;
	// keep an eye on the beginning
	char *start = binary;
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	60fb      	str	r3, [r7, #12]
	int i;

	// loop over the input-characters
	for (ptr = s; *ptr != '\0'; ptr++) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	e01d      	b.n	8000b3c <stringToBinary+0xb4>
		/* perform bitwise AND for every bit of the character */
		// loop over the input-character bits
		for (i = CHAR_BIT - 1; i >= 0; i--, binary++) {
 8000b00:	2307      	movs	r3, #7
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e014      	b.n	8000b30 <stringToBinary+0xa8>
			*binary = (*ptr & 1 << i) ? '1' : '0';
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa42 f303 	asr.w	r3, r2, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <stringToBinary+0x96>
 8000b1a:	2231      	movs	r2, #49	; 0x31
 8000b1c:	e000      	b.n	8000b20 <stringToBinary+0x98>
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	701a      	strb	r2, [r3, #0]
		for (i = CHAR_BIT - 1; i >= 0; i--, binary++) {
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dae7      	bge.n	8000b06 <stringToBinary+0x7e>
	for (ptr = s; *ptr != '\0'; ptr++) {
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1dd      	bne.n	8000b00 <stringToBinary+0x78>
		}
	}
	// finalize return value
	*binary = '\0';
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	// reset pointer to beginning
	binary = start;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	61fb      	str	r3, [r7, #28]
	return binary;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3724      	adds	r7, #36	; 0x24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	20000184 	.word	0x20000184
 8000b5c:	0800acb0 	.word	0x0800acb0

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	b0b5      	sub	sp, #212	; 0xd4
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fbc3 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f89b 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f93f 	bl	8000df0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b72:	f006 feb5 	bl	80078e0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000b76:	f000 f8ef 	bl	8000d58 <MX_TIM2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Initialisation code, only runs once to generate a string of binary digits based on a supplied string which can be freely changed
		if(flag == 0)
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <main+0x124>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1fb      	bne.n	8000b7a <main+0x1a>
		{
 8000b82:	466b      	mov	r3, sp
 8000b84:	461e      	mov	r6, r3
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8c:	483e      	ldr	r0, [pc, #248]	; (8000c88 <main+0x128>)
 8000b8e:	f000 fe9b 	bl	80018c8 <HAL_GPIO_WritePin>
			HAL_Delay(3000); // 3 second delay to give time to position the LED
 8000b92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b96:	f000 fc0d 	bl	80013b4 <HAL_Delay>
			char input[200] = "Underwater Optical Communications"; // input string, can change to any string if required
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <main+0x12c>)
 8000b9c:	463c      	mov	r4, r7
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	8023      	strh	r3, [r4, #0]
 8000bac:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000bb0:	22a6      	movs	r2, #166	; 0xa6
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fb69 	bl	800828c <memset>
			output = stringToBinary(input); // converts input to binary equivalent
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff63 	bl	8000a88 <stringToBinary>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <main+0x130>)
 8000bc6:	601a      	str	r2, [r3, #0]

			//sprintf(Msg, "%s\r\n", output);
			//CDC_Transmit_FS(Msg, strlen(Msg));

			len = strlen(output); // grabs number of bits
 8000bc8:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <main+0x130>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fabf 	bl	8000150 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <main+0x134>)
 8000bd8:	601a      	str	r2, [r3, #0]

			// create new string here in order to be able to access each element of the output string*
			char binaryString[len+8];
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <main+0x134>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f103 0008 	add.w	r0, r3, #8
 8000be2:	1e43      	subs	r3, r0, #1
 8000be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000be8:	4603      	mov	r3, r0
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	f04f 0400 	mov.w	r4, #0
 8000bf8:	00d4      	lsls	r4, r2, #3
 8000bfa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000bfe:	00cb      	lsls	r3, r1, #3
 8000c00:	4603      	mov	r3, r0
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	f04f 0400 	mov.w	r4, #0
 8000c10:	00d4      	lsls	r4, r2, #3
 8000c12:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c16:	00cb      	lsls	r3, r1, #3
 8000c18:	4603      	mov	r3, r0
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	ebad 0d03 	sub.w	sp, sp, r3
 8000c24:	466b      	mov	r3, sp
 8000c26:	3300      	adds	r3, #0
 8000c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

			for (; *output; output++)
 8000c2c:	e011      	b.n	8000c52 <main+0xf2>
			{
				binaryString[i] = *output;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <main+0x130>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <main+0x138>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	7811      	ldrb	r1, [r2, #0]
 8000c38:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000c3c:	54d1      	strb	r1, [r2, r3]
				i++;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <main+0x138>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <main+0x138>)
 8000c46:	6013      	str	r3, [r2, #0]
			for (; *output; output++)
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <main+0x130>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <main+0x130>)
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <main+0x130>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1e8      	bne.n	8000c2e <main+0xce>
			}
			free(output);
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <main+0x130>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 fb0b 	bl	800827c <free>

			//sprintf(length, "%d", len);// possibly try to send over length first.

			strcpy(binaryString2, binaryString);
 8000c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <main+0x13c>)
 8000c6e:	f008 f959 	bl	8008f24 <strcpy>

			//free(binaryString);

			flag = 1;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <main+0x124>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim2); // begin transmission
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <main+0x140>)
 8000c7a:	f002 feb1 	bl	80039e0 <HAL_TIM_Base_Start_IT>
 8000c7e:	46b5      	mov	sp, r6
		if(flag == 0)
 8000c80:	e77b      	b.n	8000b7a <main+0x1a>
 8000c82:	bf00      	nop
 8000c84:	20000380 	.word	0x20000380
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	0800ace0 	.word	0x0800ace0
 8000c90:	200005c0 	.word	0x200005c0
 8000c94:	200008c8 	.word	0x200008c8
 8000c98:	20000378 	.word	0x20000378
 8000c9c:	200005c4 	.word	0x200005c4
 8000ca0:	200006f0 	.word	0x200006f0

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	2228      	movs	r2, #40	; 0x28
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 faea 	bl	800828c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f980 	bl	8003000 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d06:	f000 f95f 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fbea 	bl	8003500 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d32:	f000 f949 	bl	8000fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d36:	2310      	movs	r3, #16
 8000d38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fd47 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d4c:	f000 f93c 	bl	8000fc8 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	3750      	adds	r7, #80	; 0x50
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d7e:	2247      	movs	r2, #71	; 0x47
 8000d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d8a:	2263      	movs	r2, #99	; 0x63
 8000d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_TIM2_Init+0x94>)
 8000d9c:	f002 fdd0 	bl	8003940 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000da6:	f000 f90f 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_TIM2_Init+0x94>)
 8000db8:	f002 ff6c 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 f901 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_TIM2_Init+0x94>)
 8000dd4:	f003 f932 	bl	800403c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000dde:	f000 f8f3 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200006f0 	.word	0x200006f0

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_GPIO_Init+0xb8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	4816      	ldr	r0, [pc, #88]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e54:	f000 fd38 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e60:	f000 fd32 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e7e:	f000 fbc9 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e9c:	f000 fbba 	bl	8001614 <HAL_GPIO_Init>

}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	40010800 	.word	0x40010800

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if ( htim == &htim2 )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d16b      	bne.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		//HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);

		if(preamble_bit < 3) // send preamble of 3 HIGH bits = start flag
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	dc0b      	bgt.n	8000ee4 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	4836      	ldr	r0, [pc, #216]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ed4:	f000 fcf8 	bl	80018c8 <HAL_GPIO_WritePin>

			preamble_bit++;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ee0:	6013      	str	r3, [r2, #0]
				}

			}
		}
	}
}
 8000ee2:	e05b      	b.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe8>
			if(counter < 8) // for 8 bits equaling one byte or one whole character
 8000ee4:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	dc28      	bgt.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x8a>
				if(binaryString2[bit] == '0') // LOW
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	2b30      	cmp	r3, #48	; 0x30
 8000ef6:	d10b      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x5c>
					HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	482b      	ldr	r0, [pc, #172]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f00:	f000 fce2 	bl	80018c8 <HAL_GPIO_WritePin>
					bit++;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e010      	b.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x7e>
				else if(binaryString2[bit] == '1') // HIGH
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	2b31      	cmp	r3, #49	; 0x31
 8000f1a:	d10a      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x7e>
					HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f24:	f000 fcd0 	bl	80018c8 <HAL_GPIO_WritePin>
					bit++;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f30:	6013      	str	r3, [r2, #0]
				counter++;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	e02e      	b.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe8>
				if(wait < 1)
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dc0b      	bgt.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0xaa>
					HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f4e:	f000 fcbb 	bl	80018c8 <HAL_GPIO_WritePin>
					wait++;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	e01e      	b.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe8>
					wait = 0;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
					counter = 0;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
					preamble_bit = 0;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
					words++;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f78:	6013      	str	r3, [r2, #0]
					if(words == (len/8)) // checks if the entire string has been transmitted
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da00      	bge.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000f82:	3307      	adds	r3, #7
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d105      	bne.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe8>
						bit = 0;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
						words = 0;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200006f0 	.word	0x200006f0
 8000fa8:	20000370 	.word	0x20000370
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	20000374 	.word	0x20000374
 8000fb4:	20000384 	.word	0x20000384
 8000fb8:	200005c4 	.word	0x200005c4
 8000fbc:	20000388 	.word	0x20000388
 8000fc0:	2000037c 	.word	0x2000037c
 8000fc4:	200008c8 	.word	0x200008c8

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_MspInit+0x5c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_MspInit+0x5c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x5c>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_MspInit+0x5c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_MspInit+0x60>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_MspInit+0x60>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000

08001038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001048:	d113      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_TIM_Base_MspInit+0x44>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_TIM_Base_MspInit+0x44>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_Base_MspInit+0x44>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	201c      	movs	r0, #28
 8001068:	f000 fa9d 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800106c:	201c      	movs	r0, #28
 800106e:	f000 fab6 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <HardFault_Handler+0x4>

08001092 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <BusFault_Handler+0x4>

0800109e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f956 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010da:	f000 fd3e 	bl	8001b5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20001d94 	.word	0x20001d94

080010e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM2_IRQHandler+0x10>)
 80010ee:	f002 fcc9 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200006f0 	.word	0x200006f0

080010fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
	}

return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e009      	b.n	800115c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf1      	blt.n	8001148 <_write+0x12>
	}
	return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_close>:

int _close(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001194:	605a      	str	r2, [r3, #4]
	return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_isatty>:

int _isatty(int file)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
	return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f006 fff8 	bl	80081f4 <__errno>
 8001204:	4602      	mov	r2, r0
 8001206:	230c      	movs	r3, #12
 8001208:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20005000 	.word	0x20005000
 8001230:	00000400 	.word	0x00000400
 8001234:	2000038c 	.word	0x2000038c
 8001238:	20002088 	.word	0x20002088

0800123c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <SystemInit+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <SystemInit+0x5c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <SystemInit+0x5c>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4911      	ldr	r1, [pc, #68]	; (8001298 <SystemInit+0x5c>)
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0x60>)
 8001254:	4013      	ands	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <SystemInit+0x5c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <SystemInit+0x5c>)
 800125e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <SystemInit+0x5c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SystemInit+0x5c>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <SystemInit+0x5c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <SystemInit+0x5c>)
 800127a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800127e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SystemInit+0x5c>)
 8001282:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001286:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SystemInit+0x64>)
 800128a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	f8ff0000 	.word	0xf8ff0000
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ca:	f7ff ffb7 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f006 ffa9 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff fc45 	bl	8000b60 <main>
  bx lr
 80012d6:	4770      	bx	lr
  ldr r3, =_sidata
 80012d8:	0800b770 	.word	0x0800b770
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012e0:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 80012e4:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 80012e8:	20002084 	.word	0x20002084

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f945 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fe62 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f95d 	bl	80015fa <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f925 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_IncTick+0x20>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000008 	.word	0x20000008
 800139c:	200008cc 	.word	0x200008cc

080013a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200008cc 	.word	0x200008cc

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff fff0 	bl	80013a0 <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_Delay+0x40>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffe0 	bl	80013a0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <__NVIC_EnableIRQ+0x34>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff90 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff2d 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff42 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff35 	bl	800145c <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa2 	bl	800154c <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e127      	b.n	8001878 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001628:	2201      	movs	r2, #1
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8116 	bne.w	8001872 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b12      	cmp	r3, #18
 800164c:	d034      	beq.n	80016b8 <HAL_GPIO_Init+0xa4>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d80d      	bhi.n	800166e <HAL_GPIO_Init+0x5a>
 8001652:	2b02      	cmp	r3, #2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x9a>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d804      	bhi.n	8001664 <HAL_GPIO_Init+0x50>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d031      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 800165e:	2b01      	cmp	r3, #1
 8001660:	d01c      	beq.n	800169c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001662:	e048      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001664:	2b03      	cmp	r3, #3
 8001666:	d043      	beq.n	80016f0 <HAL_GPIO_Init+0xdc>
 8001668:	2b11      	cmp	r3, #17
 800166a:	d01b      	beq.n	80016a4 <HAL_GPIO_Init+0x90>
          break;
 800166c:	e043      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800166e:	4a89      	ldr	r2, [pc, #548]	; (8001894 <HAL_GPIO_Init+0x280>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d026      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001674:	4a87      	ldr	r2, [pc, #540]	; (8001894 <HAL_GPIO_Init+0x280>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d806      	bhi.n	8001688 <HAL_GPIO_Init+0x74>
 800167a:	4a87      	ldr	r2, [pc, #540]	; (8001898 <HAL_GPIO_Init+0x284>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d020      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001680:	4a86      	ldr	r2, [pc, #536]	; (800189c <HAL_GPIO_Init+0x288>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01d      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
          break;
 8001686:	e036      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001688:	4a85      	ldr	r2, [pc, #532]	; (80018a0 <HAL_GPIO_Init+0x28c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 800168e:	4a85      	ldr	r2, [pc, #532]	; (80018a4 <HAL_GPIO_Init+0x290>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d016      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001694:	4a84      	ldr	r2, [pc, #528]	; (80018a8 <HAL_GPIO_Init+0x294>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e028      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e023      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01e      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e019      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e012      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e008      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d801      	bhi.n	8001700 <HAL_GPIO_Init+0xec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e001      	b.n	8001704 <HAL_GPIO_Init+0xf0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2bff      	cmp	r3, #255	; 0xff
 800170a:	d802      	bhi.n	8001712 <HAL_GPIO_Init+0xfe>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x104>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3b08      	subs	r3, #8
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	210f      	movs	r1, #15
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	6a39      	ldr	r1, [r7, #32]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8096 	beq.w	8001872 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_GPIO_Init+0x298>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_GPIO_Init+0x298>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b56      	ldr	r3, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x298>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175e:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_GPIO_Init+0x29c>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x19e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_GPIO_Init+0x2a4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x19a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a49      	ldr	r2, [pc, #292]	; (80018bc <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x196>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2ac>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x192>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x1a0>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x1a0>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x1a0>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x1a0>
 80017b2:	2300      	movs	r3, #0
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c4:	493a      	ldr	r1, [pc, #232]	; (80018b0 <HAL_GPIO_Init+0x29c>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4938      	ldr	r1, [pc, #224]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e006      	b.n	80017fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	4933      	ldr	r1, [pc, #204]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	492e      	ldr	r1, [pc, #184]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
 8001812:	e006      	b.n	8001822 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4929      	ldr	r1, [pc, #164]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800181e:	4013      	ands	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	4924      	ldr	r1, [pc, #144]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
 800183a:	e006      	b.n	800184a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	43db      	mvns	r3, r3
 8001844:	491f      	ldr	r1, [pc, #124]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001846:	4013      	ands	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	491a      	ldr	r1, [pc, #104]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	43db      	mvns	r3, r3
 800186c:	4915      	ldr	r1, [pc, #84]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800186e:	4013      	ands	r3, r2
 8001870:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	f47f aed0 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 8001888:	bf00      	nop
 800188a:	372c      	adds	r7, #44	; 0x2c
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	10210000 	.word	0x10210000
 8001898:	10110000 	.word	0x10110000
 800189c:	10120000 	.word	0x10120000
 80018a0:	10310000 	.word	0x10310000
 80018a4:	10320000 	.word	0x10320000
 80018a8:	10220000 	.word	0x10220000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40010c00 	.word	0x40010c00
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40011400 	.word	0x40011400
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af06      	add	r7, sp, #24
 80018fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0fd      	b.n	8001b06 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f006 f9be 	bl	8007ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2203      	movs	r2, #3
 8001928:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fc19 	bl	8004168 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	687e      	ldr	r6, [r7, #4]
 800193e:	466d      	mov	r5, sp
 8001940:	f106 0410 	add.w	r4, r6, #16
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	602b      	str	r3, [r5, #0]
 800194c:	1d33      	adds	r3, r6, #4
 800194e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001950:	6838      	ldr	r0, [r7, #0]
 8001952:	f002 fbe3 	bl	800411c <USB_CoreInit>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0ce      	b.n	8001b06 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fc14 	bl	800419c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e04c      	b.n	8001a14 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	3301      	adds	r3, #1
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	b298      	uxth	r0, r3
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3336      	adds	r3, #54	; 0x36
 80019b8:	4602      	mov	r2, r0
 80019ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	3303      	adds	r3, #3
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3338      	adds	r3, #56	; 0x38
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	333c      	adds	r3, #60	; 0x3c
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3340      	adds	r3, #64	; 0x40
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3ad      	bcc.n	800197a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e044      	b.n	8001aae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3b5      	bcc.n	8001a24 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	687e      	ldr	r6, [r7, #4]
 8001ac0:	466d      	mov	r5, sp
 8001ac2:	f106 0410 	add.w	r4, r6, #16
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	602b      	str	r3, [r5, #0]
 8001ace:	1d33      	adds	r3, r6, #4
 8001ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad2:	6838      	ldr	r0, [r7, #0]
 8001ad4:	f002 fb6e 	bl	80041b4 <USB_DevInit>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00d      	b.n	8001b06 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fb08 	bl	8006114 <USB_DevDisconnect>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_Start+0x16>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e016      	b.n	8001b52 <HAL_PCD_Start+0x44>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fb03 	bl	800413c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b36:	2101      	movs	r1, #1
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f006 fb24 	bl	8008186 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fadc 	bl	8006100 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b088      	sub	sp, #32
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fade 	bl	8006128 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b76:	d102      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fb61 	bl	8002240 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fad0 	bl	8006128 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d112      	bne.n	8001bba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f006 f8f2 	bl	8007d96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f925 	bl	8001e04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fab2 	bl	8006128 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bce:	d10b      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be2:	b292      	uxth	r2, r2
 8001be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fa9b 	bl	8006128 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfc:	d10b      	bne.n	8001c16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fa84 	bl	8006128 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2a:	d126      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0204 	bic.w	r2, r2, #4
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0208 	bic.w	r2, r2, #8
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f006 f8d3 	bl	8007e08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c74:	b292      	uxth	r2, r2
 8001c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fa52 	bl	8006128 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8e:	f040 8084 	bne.w	8001d9a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	77fb      	strb	r3, [r7, #31]
 8001c96:	e011      	b.n	8001cbc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	f107 0120 	add.w	r1, r7, #32
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	77fb      	strb	r3, [r7, #31]
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d9ea      	bls.n	8001c98 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	b292      	uxth	r2, r2
 8001cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cf2:	bf00      	nop
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f6      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	77fb      	strb	r3, [r7, #31]
 8001d22:	e010      	b.n	8001d46 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	7ffa      	ldrb	r2, [r7, #31]
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	440a      	add	r2, r1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	f107 0120 	add.w	r1, r7, #32
 8001d38:	440b      	add	r3, r1
 8001d3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d40:	7ffb      	ldrb	r3, [r7, #31]
 8001d42:	3301      	adds	r3, #1
 8001d44:	77fb      	strb	r3, [r7, #31]
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	2b07      	cmp	r3, #7
 8001d4a:	d9eb      	bls.n	8001d24 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	b292      	uxth	r2, r2
 8001d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0204 	orr.w	r2, r2, #4
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f006 f81d 	bl	8007dd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f9c2 	bl	8006128 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dae:	d10e      	bne.n	8001dce <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f005 ffd6 	bl	8007d7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f9a8 	bl	8006128 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de2:	d10b      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_SetAddress+0x1a>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e013      	b.n	8001e46 <HAL_PCD_SetAddress+0x42>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 f94f 	bl	80060da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	4608      	mov	r0, r1
 8001e58:	4611      	mov	r1, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	70fb      	strb	r3, [r7, #3]
 8001e60:	460b      	mov	r3, r1
 8001e62:	803b      	strh	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da0e      	bge.n	8001e92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	705a      	strb	r2, [r3, #1]
 8001e90:	e00e      	b.n	8001eb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 0207 	and.w	r2, r3, #7
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ebc:	883a      	ldrh	r2, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	78ba      	ldrb	r2, [r7, #2]
 8001ec6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001eda:	78bb      	ldrb	r3, [r7, #2]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d102      	bne.n	8001ee6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_EP_Open+0xa6>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e00e      	b.n	8001f12 <HAL_PCD_EP_Open+0xc4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 f976 	bl	80041f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f10:	7afb      	ldrb	r3, [r7, #11]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0e      	bge.n	8001f4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	705a      	strb	r2, [r3, #1]
 8001f4a:	e00e      	b.n	8001f6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 0207 	and.w	r2, r3, #7
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_EP_Close+0x6a>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_Close+0x88>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fc98 	bl	80048c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	f003 0207 	and.w	r2, r3, #7
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d106      	bne.n	800200e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6979      	ldr	r1, [r7, #20]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fe4a 	bl	8004ca0 <USB_EPStartXfer>
 800200c:	e005      	b.n	800201a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6979      	ldr	r1, [r7, #20]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fe43 	bl	8004ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 0207 	and.w	r2, r3, #7
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	460b      	mov	r3, r1
 8002060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fdf0 	bl	8004ca0 <USB_EPStartXfer>
 80020c0:	e005      	b.n	80020ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fde9 	bl	8004ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 0207 	and.w	r2, r3, #7
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e04c      	b.n	8002190 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0e      	bge.n	800211c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	e00c      	b.n	8002136 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_PCD_EP_SetStall+0x7e>
 8002152:	2302      	movs	r3, #2
 8002154:	e01c      	b.n	8002190 <HAL_PCD_EP_SetStall+0xb8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 febb 	bl	8005ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f003 ffe0 	bl	8006146 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d901      	bls.n	80021b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e040      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da0e      	bge.n	80021dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
 80021da:	e00e      	b.n	80021fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_ClrStall+0x82>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fea9 	bl	8005f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	; 0x38
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002248:	e2df      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002252:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 8158 	bne.w	800251a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800226a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d152      	bne.n	800231a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002284:	81fb      	strh	r3, [r7, #14]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002294:	b29b      	uxth	r3, r3
 8002296:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3328      	adds	r3, #40	; 0x28
 800229c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	3302      	adds	r3, #2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	441a      	add	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 fd33 	bl	8007d46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 828e 	beq.w	800280a <PCD_EP_ISR_Handler+0x5ca>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8289 	bne.w	800280a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002304:	b2da      	uxtb	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002318:	e277      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800232a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800232c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002330:	2b00      	cmp	r3, #0
 8002332:	d034      	beq.n	800239e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	3306      	adds	r3, #6
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002372:	b29b      	uxth	r3, r3
 8002374:	f003 ff36 	bl	80061e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29a      	uxth	r2, r3
 8002380:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002384:	4013      	ands	r3, r2
 8002386:	823b      	strh	r3, [r7, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	8a3a      	ldrh	r2, [r7, #16]
 800238e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002392:	b292      	uxth	r2, r2
 8002394:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f005 fca8 	bl	8007cec <HAL_PCD_SetupStageCallback>
 800239c:	e235      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800239e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f280 8231 	bge.w	800280a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b4:	4013      	ands	r3, r2
 80023b6:	83bb      	strh	r3, [r7, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	8bba      	ldrh	r2, [r7, #28]
 80023be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c2:	b292      	uxth	r2, r2
 80023c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3306      	adds	r3, #6
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d019      	beq.n	800242e <PCD_EP_ISR_Handler+0x1ee>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002412:	b29b      	uxth	r3, r3
 8002414:	f003 fee6 	bl	80061e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	441a      	add	r2, r3
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f005 fc71 	bl	8007d10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d112      	bne.n	800247c <PCD_EP_ISR_Handler+0x23c>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002474:	b29a      	uxth	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e02f      	b.n	80024dc <PCD_EP_ISR_Handler+0x29c>
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b3e      	cmp	r3, #62	; 0x3e
 8002482:	d813      	bhi.n	80024ac <PCD_EP_ISR_Handler+0x26c>
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <PCD_EP_ISR_Handler+0x25e>
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	3301      	adds	r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	801a      	strh	r2, [r3, #0]
 80024aa:	e017      	b.n	80024dc <PCD_EP_ISR_Handler+0x29c>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x286>
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	3b01      	subs	r3, #1
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	827b      	strh	r3, [r7, #18]
 80024ee:	8a7b      	ldrh	r3, [r7, #18]
 80024f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f4:	827b      	strh	r3, [r7, #18]
 80024f6:	8a7b      	ldrh	r3, [r7, #18]
 80024f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024fc:	827b      	strh	r3, [r7, #18]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	8a7b      	ldrh	r3, [r7, #18]
 8002504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	b29b      	uxth	r3, r3
 8002516:	8013      	strh	r3, [r2, #0]
 8002518:	e177      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800252c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002530:	2b00      	cmp	r3, #0
 8002532:	f280 80ea 	bge.w	800270a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29a      	uxth	r2, r3
 8002548:	f640 738f 	movw	r3, #3983	; 0xf8f
 800254c:	4013      	ands	r3, r2
 800254e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002564:	b292      	uxth	r2, r2
 8002566:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002568:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	7b1b      	ldrb	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d122      	bne.n	80025cc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	3306      	adds	r3, #6
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8087 	beq.w	80026c6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	88da      	ldrh	r2, [r3, #6]
 80025c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c6:	f003 fe0d 	bl	80061e4 <USB_ReadPMA>
 80025ca:	e07c      	b.n	80026c6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	78db      	ldrb	r3, [r3, #3]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d108      	bne.n	80025e6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d6:	461a      	mov	r2, r3
 80025d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f923 	bl	8002826 <HAL_PCD_EP_DB_Receive>
 80025e0:	4603      	mov	r3, r0
 80025e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025e4:	e06f      	b.n	80026c6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002600:	847b      	strh	r3, [r7, #34]	; 0x22
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002622:	b29b      	uxth	r3, r3
 8002624:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d021      	beq.n	8002684 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	3302      	adds	r3, #2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002668:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800266a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02a      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	6959      	ldr	r1, [r3, #20]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	891a      	ldrh	r2, [r3, #8]
 800267c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267e:	f003 fdb1 	bl	80061e4 <USB_ReadPMA>
 8002682:	e020      	b.n	80026c6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	3306      	adds	r3, #6
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	6959      	ldr	r1, [r3, #20]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	895a      	ldrh	r2, [r3, #10]
 80026c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c2:	f003 fd8f 	bl	80061e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026cc:	441a      	add	r2, r3
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d8:	441a      	add	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x4b0>
 80026e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d206      	bcs.n	80026fe <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f005 fb0a 	bl	8007d10 <HAL_PCD_DataOutStageCallback>
 80026fc:	e005      	b.n	800270a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	4618      	mov	r0, r3
 8002706:	f002 facb 	bl	8004ca0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800270a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d07a      	beq.n	800280a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002714:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	843b      	strh	r3, [r7, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	8c3b      	ldrh	r3, [r7, #32]
 8002754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275c:	b29b      	uxth	r3, r3
 800275e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	78db      	ldrb	r3, [r3, #3]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d108      	bne.n	800277a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800276c:	2b02      	cmp	r3, #2
 800276e:	d146      	bne.n	80027fe <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d141      	bne.n	80027fe <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	3302      	adds	r3, #2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	8bfb      	ldrh	r3, [r7, #30]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d906      	bls.n	80027bc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	8bfb      	ldrh	r3, [r7, #30]
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	e002      	b.n	80027c2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f005 fab8 	bl	8007d46 <HAL_PCD_DataInStageCallback>
 80027d6:	e018      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	441a      	add	r2, r3
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	8bfb      	ldrh	r3, [r7, #30]
 80027ea:	441a      	add	r2, r3
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fa52 	bl	8004ca0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027fc:	e005      	b.n	800280a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002800:	461a      	mov	r2, r3
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f91b 	bl	8002a40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002812:	b29b      	uxth	r3, r3
 8002814:	b21b      	sxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f6ff ad17 	blt.w	800224a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3738      	adds	r7, #56	; 0x38
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b088      	sub	sp, #32
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07e      	beq.n	800293c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	3302      	adds	r3, #2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	429a      	cmp	r2, r3
 8002870:	d306      	bcc.n	8002880 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	8b7b      	ldrh	r3, [r7, #26]
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d123      	bne.n	80028d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	833b      	strh	r3, [r7, #24]
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b0:	833b      	strh	r3, [r7, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8b3b      	ldrh	r3, [r7, #24]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01f      	beq.n	8002920 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	82fb      	strh	r3, [r7, #22]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	8afb      	ldrh	r3, [r7, #22]
 800290c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800291c:	b29b      	uxth	r3, r3
 800291e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	891a      	ldrh	r2, [r3, #8]
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	f003 fc55 	bl	80061e4 <USB_ReadPMA>
 800293a:	e07c      	b.n	8002a36 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3306      	adds	r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002964:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	8b7b      	ldrh	r3, [r7, #26]
 800296c:	429a      	cmp	r2, r3
 800296e:	d306      	bcc.n	800297e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	8b7b      	ldrh	r3, [r7, #26]
 8002976:	1ad2      	subs	r2, r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	619a      	str	r2, [r3, #24]
 800297c:	e002      	b.n	8002984 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d123      	bne.n	80029d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	83fb      	strh	r3, [r7, #30]
 80029a8:	8bfb      	ldrh	r3, [r7, #30]
 80029aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029ae:	83fb      	strh	r3, [r7, #30]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	8bfb      	ldrh	r3, [r7, #30]
 80029c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11f      	bne.n	8002a1e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	83bb      	strh	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	8bbb      	ldrh	r3, [r7, #28]
 8002a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a1e:	8b7b      	ldrh	r3, [r7, #26]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6959      	ldr	r1, [r3, #20]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	895a      	ldrh	r2, [r3, #10]
 8002a30:	8b7b      	ldrh	r3, [r7, #26]
 8002a32:	f003 fbd7 	bl	80061e4 <USB_ReadPMA>
    }
  }

  return count;
 8002a36:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b092      	sub	sp, #72	; 0x48
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8132 	beq.w	8002cbe <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d906      	bls.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	619a      	str	r2, [r3, #24]
 8002a9a:	e002      	b.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12c      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f005 f948 	bl	8007d46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 822f 	beq.w	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002adc:	827b      	strh	r3, [r7, #18]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	8a7b      	ldrh	r3, [r7, #18]
 8002aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]
 8002b02:	e20d      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01f      	beq.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f040 81e3 	bne.w	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b60:	441a      	add	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d309      	bcc.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	e014      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ba6:	e009      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d155      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x230>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	011a      	lsls	r2, r3, #4
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	e047      	b.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c1c:	d811      	bhi.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x202>
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	3301      	adds	r3, #1
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e032      	b.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x218>
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e01b      	b.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d117      	bne.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	011a      	lsls	r2, r3, #4
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6959      	ldr	r1, [r3, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	891a      	ldrh	r2, [r3, #8]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f003 fa50 	bl	800615c <USB_WritePMA>
 8002cbc:	e130      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3306      	adds	r3, #6
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d306      	bcc.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	619a      	str	r2, [r3, #24]
 8002cfe:	e002      	b.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d12c      	bne.n	8002d68 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f005 f816 	bl	8007d46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 80fd 	bne.w	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
 8002d66:	e0db      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11f      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 80b1 	bne.w	8002f20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d309      	bcc.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	e014      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e0a:	e009      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d155      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0x49a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	4413      	add	r3, r2
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	011a      	lsls	r2, r3, #4
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	4413      	add	r3, r2
 8002e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d112      	bne.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x442>
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6a:	801a      	strh	r2, [r3, #0]
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	e044      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b3e      	cmp	r3, #62	; 0x3e
 8002e86:	d811      	bhi.n	8002eac <HAL_PCD_EP_DB_Transmit+0x46c>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	e02f      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	e018      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d114      	bne.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	4413      	add	r3, r2
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	011a      	lsls	r2, r3, #4
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	4413      	add	r3, r2
 8002efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6959      	ldr	r1, [r3, #20]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	895a      	ldrh	r2, [r3, #10]
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f003 f91e 	bl	800615c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	823b      	strh	r3, [r7, #16]
 8002f3c:	8a3b      	ldrh	r3, [r7, #16]
 8002f3e:	f083 0310 	eor.w	r3, r3, #16
 8002f42:	823b      	strh	r3, [r7, #16]
 8002f44:	8a3b      	ldrh	r3, [r7, #16]
 8002f46:	f083 0320 	eor.w	r3, r3, #32
 8002f4a:	823b      	strh	r3, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	8a3b      	ldrh	r3, [r7, #16]
 8002f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3748      	adds	r7, #72	; 0x48
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e009      	b.n	8002fc4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fb0:	897a      	ldrh	r2, [r7, #10]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	80da      	strh	r2, [r3, #6]
 8002fd8:	e00b      	b.n	8002ff2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0c1b      	lsrs	r3, r3, #16
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e26c      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b92      	ldr	r3, [pc, #584]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
 8003038:	4b8c      	ldr	r3, [pc, #560]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b89      	ldr	r3, [pc, #548]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x12c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e246      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x76>
 8003068:	4b80      	ldr	r3, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7f      	ldr	r2, [pc, #508]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b7b      	ldr	r3, [pc, #492]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7a      	ldr	r2, [pc, #488]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b78      	ldr	r3, [pc, #480]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a77      	ldr	r2, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xbc>
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a71      	ldr	r2, [pc, #452]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe f960 	bl	80013a0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe f95c 	bl	80013a0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1fa      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe4>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe f94c 	bl	80013a0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe f948 	bl	80013a0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1e6      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x10c>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003146:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1ba      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4939      	ldr	r1, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCC_OscConfig+0x270>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe f901 	bl	80013a0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe f8fd 	bl	80013a0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e19b      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4927      	ldr	r1, [pc, #156]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_OscConfig+0x270>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe f8e0 	bl	80013a0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7fe f8dc 	bl	80013a0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e17a      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03a      	beq.n	8003284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_RCC_OscConfig+0x274>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fe f8c0 	bl	80013a0 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe f8bc 	bl	80013a0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e15a      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f000 faa8 	bl	8003798 <RCC_Delay>
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_OscConfig+0x274>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fe f8a6 	bl	80013a0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003256:	e00f      	b.n	8003278 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe f8a2 	bl	80013a0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e140      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	42420000 	.word	0x42420000
 8003274:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b9e      	ldr	r3, [pc, #632]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e9      	bne.n	8003258 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a6 	beq.w	80033de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b97      	ldr	r3, [pc, #604]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b94      	ldr	r3, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a93      	ldr	r2, [pc, #588]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b91      	ldr	r3, [pc, #580]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a8a      	ldr	r2, [pc, #552]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fe f863 	bl	80013a0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fe f85f 	bl	80013a0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0fd      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e02d      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x334>
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e01c      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x356>
 800333c:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a6c      	ldr	r2, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a69      	ldr	r2, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003356:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a66      	ldr	r2, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a63      	ldr	r2, [pc, #396]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d015      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe f813 	bl	80013a0 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe f80f 	bl	80013a0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0ab      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ee      	beq.n	800337e <HAL_RCC_OscConfig+0x37e>
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fd fffd 	bl	80013a0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fff9 	bl	80013a0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e095      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ee      	bne.n	80033aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a47      	ldr	r2, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8081 	beq.w	80034ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d061      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d146      	bne.n	800348a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fd ffcd 	bl	80013a0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd ffc9 	bl	80013a0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e067      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	492d      	ldr	r1, [pc, #180]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a19      	ldr	r1, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	430b      	orrs	r3, r1
 8003456:	4927      	ldr	r1, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd ff9d 	bl	80013a0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fd ff99 	bl	80013a0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e037      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
 8003488:	e02f      	b.n	80034ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd ff86 	bl	80013a0 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fd ff82 	bl	80013a0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e020      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x498>
 80034b6:	e018      	b.n	80034ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e013      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	42420060 	.word	0x42420060

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fd fed6 	bl	80013a0 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fd fed2 	bl	80013a0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4601      	mov	r1, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	5cd3      	ldrb	r3, [r2, r3]
 80036a2:	fa21 f303 	lsr.w	r3, r1, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fe34 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800ae04 	.word	0x0800ae04
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b490      	push	{r4, r7}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036dc:	1d3c      	adds	r4, r7, #4
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x46>
 8003712:	e02d      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	e02d      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003726:	4413      	add	r3, r2
 8003728:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800372c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c5b      	lsrs	r3, r3, #17
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003746:	4413      	add	r3, r2
 8003748:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800374c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003752:	fb02 f203 	mul.w	r2, r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	e004      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	623b      	str	r3, [r7, #32]
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003772:	623b      	str	r3, [r7, #32]
      break;
 8003774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003776:	6a3b      	ldr	r3, [r7, #32]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc90      	pop	{r4, r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	0800ada8 	.word	0x0800ada8
 8003788:	0800adb8 	.word	0x0800adb8
 800378c:	40021000 	.word	0x40021000
 8003790:	007a1200 	.word	0x007a1200
 8003794:	003d0900 	.word	0x003d0900

08003798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RCC_Delay+0x34>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <RCC_Delay+0x38>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0a5b      	lsrs	r3, r3, #9
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b4:	bf00      	nop
  }
  while (Delay --);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f9      	bne.n	80037b4 <RCC_Delay+0x1c>
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000
 80037d0:	10624dd3 	.word	0x10624dd3

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d07d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f4:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
 800380c:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d118      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a42      	ldr	r2, [pc, #264]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003834:	f7fd fdb4 	bl	80013a0 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fd fdb0 	bl	80013a0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e06d      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02e      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d027      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd fd7f 	bl	80013a0 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fd7b 	bl	80013a0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e036      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	490b      	ldr	r1, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	42420440 	.word	0x42420440

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e041      	b.n	80039d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fb66 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fa64 	bl	8003e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d001      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e03a      	b.n	8003a6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_TIM_Base_Start_IT+0x98>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x58>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d009      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x58>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d010      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	e007      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9a4 	bl	8003e14 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f997 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9a6 	bl	8003e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f97a 	bl	8003e14 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f96d 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f97c 	bl	8003e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f950 	bl	8003e14 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f943 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f952 	bl	8003e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0210 	mvn.w	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f926 	bl	8003e14 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f919 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f928 	bl	8003e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f956 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa6b 	bl	800410a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8ec 	bl	8003e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa36 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_ConfigClockSource+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e0a6      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x166>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d067      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x120>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d80b      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x6c>
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d073      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x140>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d802      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x62>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d06f      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cf4:	e078      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d06c      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x140>
 8003cfa:	2b30      	cmp	r3, #48	; 0x30
 8003cfc:	d06a      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cfe:	e073      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d00d      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x8c>
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d804      	bhi.n	8003d12 <HAL_TIM_ConfigClockSource+0x7e>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d033      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xe0>
 8003d0c:	2b60      	cmp	r3, #96	; 0x60
 8003d0e:	d041      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d10:	e06a      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d16:	d066      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x152>
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d017      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d1e:	e063      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f000 f965 	bl	8003ffe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]
      break;
 8003d4c:	e04c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f000 f94e 	bl	8003ffe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e039      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f000 f8c5 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2150      	movs	r1, #80	; 0x50
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f91c 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003d92:	e029      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f000 f8e3 	bl	8003f6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2160      	movs	r1, #96	; 0x60
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f90c 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003db2:	e019      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f000 f8a5 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8fc 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e009      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 f8f3 	bl	8003fca <TIM_ITRx_SetConfig>
        break;
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
	...

08003e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <TIM_Base_SetConfig+0xb8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x30>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x30>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <TIM_Base_SetConfig+0xbc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x30>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <TIM_Base_SetConfig+0xc0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <TIM_Base_SetConfig+0xb8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00b      	beq.n	8003eae <TIM_Base_SetConfig+0x62>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d007      	beq.n	8003eae <TIM_Base_SetConfig+0x62>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <TIM_Base_SetConfig+0xbc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_Base_SetConfig+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <TIM_Base_SetConfig+0xc0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d108      	bne.n	8003ec0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <TIM_Base_SetConfig+0xb8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800

08003f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 0210 	bic.w	r2, r3, #16
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	031b      	lsls	r3, r3, #12
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f043 0307 	orr.w	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004018:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	431a      	orrs	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004050:	2302      	movs	r3, #2
 8004052:	e046      	b.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a0:	d009      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10c      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800411c:	b084      	sub	sp, #16
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	f107 0014 	add.w	r0, r7, #20
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr

0800413c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800414c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004150:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004170:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004174:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	b29b      	uxth	r3, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	4013      	ands	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041b4:	b084      	sub	sp, #16
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	f107 0014 	add.w	r0, r7, #20
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	b004      	add	sp, #16
 80041f2:	4770      	bx	lr

080041f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b09b      	sub	sp, #108	; 0x6c
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d81f      	bhi.n	8004266 <USB_ActivateEndpoint+0x72>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <USB_ActivateEndpoint+0x38>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	08004259 	.word	0x08004259
 8004234:	0800426f 	.word	0x0800426f
 8004238:	0800424b 	.word	0x0800424b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800423c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004244:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004248:	e012      	b.n	8004270 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800424a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800424e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004252:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004256:	e00b      	b.n	8004270 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004258:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800425c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004260:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004264:	e004      	b.n	8004270 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800426c:	e000      	b.n	8004270 <USB_ActivateEndpoint+0x7c>
      break;
 800426e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	7b1b      	ldrb	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 8149 	bne.w	8004574 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8084 	beq.w	80043f4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	011a      	lsls	r2, r3, #4
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	88db      	ldrh	r3, [r3, #6]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	b29b      	uxth	r3, r3
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	81fb      	strh	r3, [r7, #14]
 800432e:	89fb      	ldrh	r3, [r7, #14]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <USB_ActivateEndpoint+0x17c>
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	81bb      	strh	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	89bb      	ldrh	r3, [r7, #12]
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	78db      	ldrb	r3, [r3, #3]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d020      	beq.n	80043ba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438e:	813b      	strh	r3, [r7, #8]
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	f083 0320 	eor.w	r3, r3, #32
 8004396:	813b      	strh	r3, [r7, #8]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	893b      	ldrh	r3, [r7, #8]
 80043a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]
 80043b8:	e27f      	b.n	80048ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	441a      	add	r2, r3
 80043dc:	897b      	ldrh	r3, [r7, #10]
 80043de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8013      	strh	r3, [r2, #0]
 80043f2:	e262      	b.n	80048ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	4413      	add	r3, r2
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	011a      	lsls	r2, r3, #4
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	4413      	add	r3, r2
 8004412:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	88db      	ldrh	r3, [r3, #6]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004432:	b29b      	uxth	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	4413      	add	r3, r2
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	011a      	lsls	r2, r3, #4
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4413      	add	r3, r2
 8004446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d112      	bne.n	800447a <USB_ActivateEndpoint+0x286>
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800445e:	b29a      	uxth	r2, r3
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004472:	b29a      	uxth	r2, r3
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	e02f      	b.n	80044da <USB_ActivateEndpoint+0x2e6>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b3e      	cmp	r3, #62	; 0x3e
 8004480:	d813      	bhi.n	80044aa <USB_ActivateEndpoint+0x2b6>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	663b      	str	r3, [r7, #96]	; 0x60
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <USB_ActivateEndpoint+0x2a8>
 8004496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004498:	3301      	adds	r3, #1
 800449a:	663b      	str	r3, [r7, #96]	; 0x60
 800449c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800449e:	b29b      	uxth	r3, r3
 80044a0:	029b      	lsls	r3, r3, #10
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e017      	b.n	80044da <USB_ActivateEndpoint+0x2e6>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	663b      	str	r3, [r7, #96]	; 0x60
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <USB_ActivateEndpoint+0x2d0>
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	3b01      	subs	r3, #1
 80044c2:	663b      	str	r3, [r7, #96]	; 0x60
 80044c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	83fb      	strh	r3, [r7, #30]
 80044e8:	8bfb      	ldrh	r3, [r7, #30]
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <USB_ActivateEndpoint+0x336>
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004508:	83bb      	strh	r3, [r7, #28]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	8bbb      	ldrh	r3, [r7, #28]
 8004516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004526:	b29b      	uxth	r3, r3
 8004528:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004540:	837b      	strh	r3, [r7, #26]
 8004542:	8b7b      	ldrh	r3, [r7, #26]
 8004544:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004548:	837b      	strh	r3, [r7, #26]
 800454a:	8b7b      	ldrh	r3, [r7, #26]
 800454c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004550:	837b      	strh	r3, [r7, #26]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
 8004572:	e1a2      	b.n	80048ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c0:	4413      	add	r3, r2
 80045c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d2:	657b      	str	r3, [r7, #84]	; 0x54
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	891b      	ldrh	r3, [r3, #8]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	653b      	str	r3, [r7, #80]	; 0x50
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f4:	4413      	add	r3, r2
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	011a      	lsls	r2, r3, #4
 80045fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004600:	4413      	add	r3, r2
 8004602:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	895b      	ldrh	r3, [r3, #10]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8091 	bne.w	8004744 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004630:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <USB_ActivateEndpoint+0x47e>
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01b      	beq.n	80046c2 <USB_ActivateEndpoint+0x4ce>
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004720:	867b      	strh	r3, [r7, #50]	; 0x32
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]
 8004742:	e0ba      	b.n	80048ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01d      	beq.n	800479c <USB_ActivateEndpoint+0x5a8>
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	441a      	add	r2, r3
 8004784:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01d      	beq.n	80047f4 <USB_ActivateEndpoint+0x600>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	78db      	ldrb	r3, [r3, #3]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d024      	beq.n	8004846 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004816:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800481a:	f083 0320 	eor.w	r3, r3, #32
 800481e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
 8004844:	e01d      	b.n	8004882 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048be:	4618      	mov	r0, r3
 80048c0:	376c      	adds	r7, #108	; 0x6c
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b08d      	sub	sp, #52	; 0x34
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	7b1b      	ldrb	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 808e 	bne.w	80049f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d044      	beq.n	800496e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	81bb      	strh	r3, [r7, #12]
 80048f2:	89bb      	ldrh	r3, [r7, #12]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <USB_DeactivateEndpoint+0x6c>
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	813b      	strh	r3, [r7, #8]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	893b      	ldrh	r3, [r7, #8]
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
 800496c:	e192      	b.n	8004c94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	827b      	strh	r3, [r7, #18]
 800497c:	8a7b      	ldrh	r3, [r7, #18]
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_DeactivateEndpoint+0xf6>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	823b      	strh	r3, [r7, #16]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8a3b      	ldrh	r3, [r7, #16]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	81fb      	strh	r3, [r7, #14]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e14d      	b.n	8004c94 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 80a5 	bne.w	8004b4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	843b      	strh	r3, [r7, #32]
 8004a10:	8c3b      	ldrh	r3, [r7, #32]
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <USB_DeactivateEndpoint+0x18a>
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	83fb      	strh	r3, [r7, #30]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8bfb      	ldrh	r3, [r7, #30]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	83bb      	strh	r3, [r7, #28]
 8004a60:	8bbb      	ldrh	r3, [r7, #28]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <USB_DeactivateEndpoint+0x1da>
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	837b      	strh	r3, [r7, #26]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8b7b      	ldrh	r3, [r7, #26]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	833b      	strh	r3, [r7, #24]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	8b3b      	ldrh	r3, [r7, #24]
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	82fb      	strh	r3, [r7, #22]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	8afb      	ldrh	r3, [r7, #22]
 8004afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b28:	82bb      	strh	r3, [r7, #20]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	8abb      	ldrh	r3, [r7, #20]
 8004b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8013      	strh	r3, [r2, #0]
 8004b4a:	e0a3      	b.n	8004c94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <USB_DeactivateEndpoint+0x2d4>
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004baa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <USB_DeactivateEndpoint+0x324>
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3734      	adds	r7, #52	; 0x34
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b0c4      	sub	sp, #272	; 0x110
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	6018      	str	r0, [r3, #0]
 8004caa:	463b      	mov	r3, r7
 8004cac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	f040 8557 	bne.w	8005768 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cba:	463b      	mov	r3, r7
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d905      	bls.n	8004cd6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004cd4:	e004      	b.n	8004ce0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	7b1b      	ldrb	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d12c      	bne.n	8004d44 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6959      	ldr	r1, [r3, #20]
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	88da      	ldrh	r2, [r3, #6]
 8004cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	1d38      	adds	r0, r7, #4
 8004cfe:	6800      	ldr	r0, [r0, #0]
 8004d00:	f001 fa2c 	bl	800615c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	011a      	lsls	r2, r3, #4
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4413      	add	r3, r2
 8004d28:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	f000 bcdd 	b.w	80056fe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	f040 8347 	bne.w	80053de <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d50:	463b      	mov	r3, r7
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	463b      	mov	r3, r7
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	f240 82eb 	bls.w	8005338 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	463b      	mov	r3, r7
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004d80:	1d3b      	adds	r3, r7, #4
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	463b      	mov	r3, r7
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8159 	beq.w	8005086 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d164      	bne.n	8004eae <USB_EPStartXfer+0x20e>
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	4413      	add	r3, r2
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	011a      	lsls	r2, r3, #4
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	4413      	add	r3, r2
 8004e08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d112      	bne.n	8004e3c <USB_EPStartXfer+0x19c>
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e054      	b.n	8004ee6 <USB_EPStartXfer+0x246>
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e40:	2b3e      	cmp	r3, #62	; 0x3e
 8004e42:	d817      	bhi.n	8004e74 <USB_EPStartXfer+0x1d4>
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <USB_EPStartXfer+0x1c4>
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	029b      	lsls	r3, r3, #10
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e038      	b.n	8004ee6 <USB_EPStartXfer+0x246>
 8004e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <USB_EPStartXfer+0x1f4>
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	029b      	lsls	r3, r3, #10
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	e01b      	b.n	8004ee6 <USB_EPStartXfer+0x246>
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d116      	bne.n	8004ee6 <USB_EPStartXfer+0x246>
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	4413      	add	r3, r2
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	895b      	ldrh	r3, [r3, #10]
 8004eec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6959      	ldr	r1, [r3, #20]
 8004ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f00:	1d38      	adds	r0, r7, #4
 8004f02:	6800      	ldr	r0, [r0, #0]
 8004f04:	f001 f92a 	bl	800615c <USB_WritePMA>
            ep->xfer_buff += len;
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f12:	441a      	add	r2, r3
 8004f14:	463b      	mov	r3, r7
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	463b      	mov	r3, r7
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d909      	bls.n	8004f3e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	e008      	b.n	8004f50 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f50:	463b      	mov	r3, r7
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d164      	bne.n	8005024 <USB_EPStartXfer+0x384>
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	011a      	lsls	r2, r3, #4
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d112      	bne.n	8004fb2 <USB_EPStartXfer+0x312>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e057      	b.n	8005062 <USB_EPStartXfer+0x3c2>
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb8:	d817      	bhi.n	8004fea <USB_EPStartXfer+0x34a>
 8004fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <USB_EPStartXfer+0x33a>
 8004fd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	029b      	lsls	r3, r3, #10
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	e03b      	b.n	8005062 <USB_EPStartXfer+0x3c2>
 8004fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <USB_EPStartXfer+0x36a>
 8005000:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005004:	3b01      	subs	r3, #1
 8005006:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800500a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501c:	b29a      	uxth	r2, r3
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	e01e      	b.n	8005062 <USB_EPStartXfer+0x3c2>
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d119      	bne.n	8005062 <USB_EPStartXfer+0x3c2>
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
 8005034:	1d3b      	adds	r3, r7, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	4413      	add	r3, r2
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	011a      	lsls	r2, r3, #4
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	4413      	add	r3, r2
 8005052:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	b29a      	uxth	r2, r3
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	891b      	ldrh	r3, [r3, #8]
 8005068:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005076:	b29b      	uxth	r3, r3
 8005078:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800507c:	1d38      	adds	r0, r7, #4
 800507e:	6800      	ldr	r0, [r0, #0]
 8005080:	f001 f86c 	bl	800615c <USB_WritePMA>
 8005084:	e33b      	b.n	80056fe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005086:	463b      	mov	r3, r7
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	785b      	ldrb	r3, [r3, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d164      	bne.n	800515a <USB_EPStartXfer+0x4ba>
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	4413      	add	r3, r2
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d112      	bne.n	80050e8 <USB_EPStartXfer+0x448>
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e057      	b.n	8005198 <USB_EPStartXfer+0x4f8>
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d817      	bhi.n	8005120 <USB_EPStartXfer+0x480>
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <USB_EPStartXfer+0x470>
 8005106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510a:	3301      	adds	r3, #1
 800510c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005114:	b29b      	uxth	r3, r3
 8005116:	029b      	lsls	r3, r3, #10
 8005118:	b29a      	uxth	r2, r3
 800511a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e03b      	b.n	8005198 <USB_EPStartXfer+0x4f8>
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800512a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <USB_EPStartXfer+0x4a0>
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	3b01      	subs	r3, #1
 800513c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005144:	b29b      	uxth	r3, r3
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	b29b      	uxth	r3, r3
 800514a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005152:	b29a      	uxth	r2, r3
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e01e      	b.n	8005198 <USB_EPStartXfer+0x4f8>
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d119      	bne.n	8005198 <USB_EPStartXfer+0x4f8>
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	657b      	str	r3, [r7, #84]	; 0x54
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	4413      	add	r3, r2
 800517a:	657b      	str	r3, [r7, #84]	; 0x54
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	011a      	lsls	r2, r3, #4
 8005184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005186:	4413      	add	r3, r2
 8005188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518c:	653b      	str	r3, [r7, #80]	; 0x50
 800518e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005192:	b29a      	uxth	r2, r3
 8005194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005196:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	891b      	ldrh	r3, [r3, #8]
 800519e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6959      	ldr	r1, [r3, #20]
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051b2:	1d38      	adds	r0, r7, #4
 80051b4:	6800      	ldr	r0, [r0, #0]
 80051b6:	f000 ffd1 	bl	800615c <USB_WritePMA>
            ep->xfer_buff += len;
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	441a      	add	r2, r3
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d909      	bls.n	80051f0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80051dc:	463b      	mov	r3, r7
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a1a      	ldr	r2, [r3, #32]
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	621a      	str	r2, [r3, #32]
 80051ee:	e008      	b.n	8005202 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	647b      	str	r3, [r7, #68]	; 0x44
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d164      	bne.n	80052dc <USB_EPStartXfer+0x63c>
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	4413      	add	r3, r2
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	4413      	add	r3, r2
 8005236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d112      	bne.n	800526a <USB_EPStartXfer+0x5ca>
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800524e:	b29a      	uxth	r2, r3
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e054      	b.n	8005314 <USB_EPStartXfer+0x674>
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526e:	2b3e      	cmp	r3, #62	; 0x3e
 8005270:	d817      	bhi.n	80052a2 <USB_EPStartXfer+0x602>
 8005272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <USB_EPStartXfer+0x5f2>
 8005288:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800528c:	3301      	adds	r3, #1
 800528e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29a      	uxth	r2, r3
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	e038      	b.n	8005314 <USB_EPStartXfer+0x674>
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <USB_EPStartXfer+0x622>
 80052b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052bc:	3b01      	subs	r3, #1
 80052be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	029b      	lsls	r3, r3, #10
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e01b      	b.n	8005314 <USB_EPStartXfer+0x674>
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d116      	bne.n	8005314 <USB_EPStartXfer+0x674>
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	4413      	add	r3, r2
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	011a      	lsls	r2, r3, #4
 8005300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005302:	4413      	add	r3, r2
 8005304:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005308:	643b      	str	r3, [r7, #64]	; 0x40
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	b29a      	uxth	r2, r3
 8005310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005312:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	895b      	ldrh	r3, [r3, #10]
 800531a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6959      	ldr	r1, [r3, #20]
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005328:	b29b      	uxth	r3, r3
 800532a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800532e:	1d38      	adds	r0, r7, #4
 8005330:	6800      	ldr	r0, [r0, #0]
 8005332:	f000 ff13 	bl	800615c <USB_WritePMA>
 8005336:	e1e2      	b.n	80056fe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	663b      	str	r3, [r7, #96]	; 0x60
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800539a:	4413      	add	r3, r2
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011a      	lsls	r2, r3, #4
 80053a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053ba:	463b      	mov	r3, r7
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	891b      	ldrh	r3, [r3, #8]
 80053c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6959      	ldr	r1, [r3, #20]
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053d4:	1d38      	adds	r0, r7, #4
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	f000 fec0 	bl	800615c <USB_WritePMA>
 80053dc:	e18f      	b.n	80056fe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	463b      	mov	r3, r7
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 808f 	beq.w	8005518 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005400:	463b      	mov	r3, r7
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	785b      	ldrb	r3, [r3, #1]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d164      	bne.n	80054d4 <USB_EPStartXfer+0x834>
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	673b      	str	r3, [r7, #112]	; 0x70
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005418:	b29b      	uxth	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800541e:	4413      	add	r3, r2
 8005420:	673b      	str	r3, [r7, #112]	; 0x70
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	011a      	lsls	r2, r3, #4
 800542a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800542c:	4413      	add	r3, r2
 800542e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d112      	bne.n	8005462 <USB_EPStartXfer+0x7c2>
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005446:	b29a      	uxth	r2, r3
 8005448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e054      	b.n	800550c <USB_EPStartXfer+0x86c>
 8005462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d817      	bhi.n	800549a <USB_EPStartXfer+0x7fa>
 800546a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <USB_EPStartXfer+0x7ea>
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	3301      	adds	r3, #1
 8005486:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29a      	uxth	r2, r3
 8005494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	e038      	b.n	800550c <USB_EPStartXfer+0x86c>
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <USB_EPStartXfer+0x81a>
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	3b01      	subs	r3, #1
 80054b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e01b      	b.n	800550c <USB_EPStartXfer+0x86c>
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d116      	bne.n	800550c <USB_EPStartXfer+0x86c>
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ec:	4413      	add	r3, r2
 80054ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	011a      	lsls	r2, r3, #4
 80054f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fa:	4413      	add	r3, r2
 80054fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005500:	677b      	str	r3, [r7, #116]	; 0x74
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005506:	b29a      	uxth	r2, r3
 8005508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	895b      	ldrh	r3, [r3, #10]
 8005512:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005516:	e097      	b.n	8005648 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005518:	463b      	mov	r3, r7
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d168      	bne.n	80055f4 <USB_EPStartXfer+0x954>
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800553a:	4413      	add	r3, r2
 800553c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	011a      	lsls	r2, r3, #4
 8005548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800554c:	4413      	add	r3, r2
 800554e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005552:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d112      	bne.n	8005582 <USB_EPStartXfer+0x8e2>
 800555c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005566:	b29a      	uxth	r2, r3
 8005568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557a:	b29a      	uxth	r2, r3
 800557c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e05d      	b.n	800563e <USB_EPStartXfer+0x99e>
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	2b3e      	cmp	r3, #62	; 0x3e
 8005588:	d817      	bhi.n	80055ba <USB_EPStartXfer+0x91a>
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <USB_EPStartXfer+0x90a>
 80055a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055a4:	3301      	adds	r3, #1
 80055a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	e041      	b.n	800563e <USB_EPStartXfer+0x99e>
 80055ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <USB_EPStartXfer+0x93a>
 80055d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055de:	b29b      	uxth	r3, r3
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e024      	b.n	800563e <USB_EPStartXfer+0x99e>
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d11f      	bne.n	800563e <USB_EPStartXfer+0x99e>
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005616:	4413      	add	r3, r2
 8005618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	011a      	lsls	r2, r3, #4
 8005624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005628:	4413      	add	r3, r2
 800562a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005636:	b29a      	uxth	r2, r3
 8005638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	891b      	ldrh	r3, [r3, #8]
 8005644:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6959      	ldr	r1, [r3, #20]
 800564e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005652:	b29b      	uxth	r3, r3
 8005654:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005658:	1d38      	adds	r0, r7, #4
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	f000 fd7e 	bl	800615c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d122      	bne.n	80056b0 <USB_EPStartXfer+0xa10>
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005684:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]
 80056ae:	e026      	b.n	80056fe <USB_EPStartXfer+0xa5e>
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d121      	bne.n	80056fe <USB_EPStartXfer+0xa5e>
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f107 020e 	add.w	r2, r7, #14
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571c:	8013      	strh	r3, [r2, #0]
 800571e:	f107 030e 	add.w	r3, r7, #14
 8005722:	f107 020e 	add.w	r2, r7, #14
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	f082 0210 	eor.w	r2, r2, #16
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	f107 030e 	add.w	r3, r7, #14
 8005732:	f107 020e 	add.w	r2, r7, #14
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	f082 0220 	eor.w	r2, r2, #32
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	f107 030e 	add.w	r3, r7, #14
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
 8005766:	e3b5      	b.n	8005ed4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f040 8090 	bne.w	8005894 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d90e      	bls.n	80057a2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	619a      	str	r2, [r3, #24]
 80057a0:	e008      	b.n	80057b4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057cc:	4413      	add	r3, r2
 80057ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	011a      	lsls	r2, r3, #4
 80057da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057de:	4413      	add	r3, r2
 80057e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d116      	bne.n	800581e <USB_EPStartXfer+0xb7e>
 80057f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005814:	b29a      	uxth	r2, r3
 8005816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e32c      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
 800581e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005822:	2b3e      	cmp	r3, #62	; 0x3e
 8005824:	d818      	bhi.n	8005858 <USB_EPStartXfer+0xbb8>
 8005826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <USB_EPStartXfer+0xba6>
 800583c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005840:	3301      	adds	r3, #1
 8005842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800584a:	b29b      	uxth	r3, r3
 800584c:	029b      	lsls	r3, r3, #10
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e30f      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
 8005858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <USB_EPStartXfer+0xbd8>
 800586e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005872:	3b01      	subs	r3, #1
 8005874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005878:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800587c:	b29b      	uxth	r3, r3
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e2f1      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b02      	cmp	r3, #2
 800589c:	f040 818f 	bne.w	8005bbe <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d175      	bne.n	8005996 <USB_EPStartXfer+0xcf6>
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058c2:	4413      	add	r3, r2
 80058c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c8:	463b      	mov	r3, r7
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	011a      	lsls	r2, r3, #4
 80058d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058d4:	4413      	add	r3, r2
 80058d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d116      	bne.n	8005916 <USB_EPStartXfer+0xc76>
 80058e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e065      	b.n	80059e2 <USB_EPStartXfer+0xd42>
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b3e      	cmp	r3, #62	; 0x3e
 800591e:	d81a      	bhi.n	8005956 <USB_EPStartXfer+0xcb6>
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <USB_EPStartXfer+0xca4>
 800593a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800593e:	3301      	adds	r3, #1
 8005940:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005944:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29a      	uxth	r2, r3
 800594e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	e045      	b.n	80059e2 <USB_EPStartXfer+0xd42>
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <USB_EPStartXfer+0xcda>
 8005970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005974:	3b01      	subs	r3, #1
 8005976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800597a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800597e:	b29b      	uxth	r3, r3
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	b29b      	uxth	r3, r3
 8005984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e025      	b.n	80059e2 <USB_EPStartXfer+0xd42>
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d120      	bne.n	80059e2 <USB_EPStartXfer+0xd42>
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059b8:	4413      	add	r3, r2
 80059ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ca:	4413      	add	r3, r2
 80059cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d4:	463b      	mov	r3, r7
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d175      	bne.n	8005ae0 <USB_EPStartXfer+0xe40>
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059fc:	1d3b      	adds	r3, r7, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	011a      	lsls	r2, r3, #4
 8005a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1e:	4413      	add	r3, r2
 8005a20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <USB_EPStartXfer+0xdc0>
 8005a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e061      	b.n	8005b24 <USB_EPStartXfer+0xe84>
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d81a      	bhi.n	8005aa0 <USB_EPStartXfer+0xe00>
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a76:	463b      	mov	r3, r7
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <USB_EPStartXfer+0xdee>
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a88:	3301      	adds	r3, #1
 8005a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	029b      	lsls	r3, r3, #10
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e041      	b.n	8005b24 <USB_EPStartXfer+0xe84>
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aac:	463b      	mov	r3, r7
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0xe24>
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	029b      	lsls	r3, r3, #10
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e021      	b.n	8005b24 <USB_EPStartXfer+0xe84>
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d11c      	bne.n	8005b24 <USB_EPStartXfer+0xe84>
 8005aea:	1d3b      	adds	r3, r7, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005afa:	4413      	add	r3, r2
 8005afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	011a      	lsls	r2, r3, #4
 8005b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 81a4 	beq.w	8005e78 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b44:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <USB_EPStartXfer+0xebc>
 8005b50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10d      	bne.n	8005b78 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b5c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 8187 	bne.w	8005e78 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 8180 	bne.w	8005e78 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b78:	1d3b      	adds	r3, r7, #4
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
 8005bbc:	e15c      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	78db      	ldrb	r3, [r3, #3]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 8155 	bne.w	8005e74 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d90e      	bls.n	8005bf8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	619a      	str	r2, [r3, #24]
 8005bf6:	e008      	b.n	8005c0a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d16f      	bne.n	8005cf4 <USB_EPStartXfer+0x1054>
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c1c:	1d3b      	adds	r3, r7, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	011a      	lsls	r2, r3, #4
 8005c3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c3e:	4413      	add	r3, r2
 8005c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d116      	bne.n	8005c7e <USB_EPStartXfer+0xfde>
 8005c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e05f      	b.n	8005d3e <USB_EPStartXfer+0x109e>
 8005c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c82:	2b3e      	cmp	r3, #62	; 0x3e
 8005c84:	d818      	bhi.n	8005cb8 <USB_EPStartXfer+0x1018>
 8005c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <USB_EPStartXfer+0x1006>
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e042      	b.n	8005d3e <USB_EPStartXfer+0x109e>
 8005cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_EPStartXfer+0x1038>
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e024      	b.n	8005d3e <USB_EPStartXfer+0x109e>
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d11f      	bne.n	8005d3e <USB_EPStartXfer+0x109e>
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d16:	4413      	add	r3, r2
 8005d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d16f      	bne.n	8005e30 <USB_EPStartXfer+0x1190>
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <USB_EPStartXfer+0x111a>
 8005d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db6:	801a      	strh	r2, [r3, #0]
 8005db8:	e05e      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc0:	d818      	bhi.n	8005df4 <USB_EPStartXfer+0x1154>
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <USB_EPStartXfer+0x1142>
 8005dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e041      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <USB_EPStartXfer+0x1174>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e023      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d11e      	bne.n	8005e78 <USB_EPStartXfer+0x11d8>
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	011a      	lsls	r2, r3, #4
 8005e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e001      	b.n	8005e78 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e02e      	b.n	8005ed6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005e96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e9e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ea2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ea6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eaa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f08:	81bb      	strh	r3, [r7, #12]
 8005f0a:	89bb      	ldrh	r3, [r7, #12]
 8005f0c:	f083 0310 	eor.w	r3, r3, #16
 8005f10:	81bb      	strh	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	89bb      	ldrh	r3, [r7, #12]
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	e01f      	b.n	8005f74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	81fb      	strh	r3, [r7, #14]
 8005f4c:	89fb      	ldrh	r3, [r7, #14]
 8005f4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f52:	81fb      	strh	r3, [r7, #14]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 809d 	bne.w	80060ce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04c      	beq.n	8006036 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	823b      	strh	r3, [r7, #16]
 8005faa:	8a3b      	ldrh	r3, [r7, #16]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <USB_EPClearStall+0x6c>
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	81fb      	strh	r3, [r7, #14]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	89fb      	ldrh	r3, [r7, #14]
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d06c      	beq.n	80060ce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600a:	81bb      	strh	r3, [r7, #12]
 800600c:	89bb      	ldrh	r3, [r7, #12]
 800600e:	f083 0320 	eor.w	r3, r3, #32
 8006012:	81bb      	strh	r3, [r7, #12]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	89bb      	ldrh	r3, [r7, #12]
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
 8006034:	e04b      	b.n	80060ce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	82fb      	strh	r3, [r7, #22]
 8006044:	8afb      	ldrh	r3, [r7, #22]
 8006046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01b      	beq.n	8006086 <USB_EPClearStall+0x106>
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	82bb      	strh	r3, [r7, #20]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8abb      	ldrh	r3, [r7, #20]
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609c:	827b      	strh	r3, [r7, #18]
 800609e:	8a7b      	ldrh	r3, [r7, #18]
 80060a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060a4:	827b      	strh	r3, [r7, #18]
 80060a6:	8a7b      	ldrh	r3, [r7, #18]
 80060a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060ac:	827b      	strh	r3, [r7, #18]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	8a7b      	ldrh	r3, [r7, #18]
 80060ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006136:	b29b      	uxth	r3, r3
 8006138:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr

08006146 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800615c:	b480      	push	{r7}
 800615e:	b08d      	sub	sp, #52	; 0x34
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4611      	mov	r1, r2
 8006168:	461a      	mov	r2, r3
 800616a:	460b      	mov	r3, r1
 800616c:	80fb      	strh	r3, [r7, #6]
 800616e:	4613      	mov	r3, r2
 8006170:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006172:	88bb      	ldrh	r3, [r7, #4]
 8006174:	3301      	adds	r3, #1
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	005a      	lsls	r2, r3, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	e01e      	b.n	80061d4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	3301      	adds	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	3302      	adds	r3, #2
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	3302      	adds	r3, #2
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	3301      	adds	r3, #1
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	3b01      	subs	r3, #1
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1dd      	bne.n	8006196 <USB_WritePMA+0x3a>
  }
}
 80061da:	bf00      	nop
 80061dc:	3734      	adds	r7, #52	; 0x34
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b08b      	sub	sp, #44	; 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	80fb      	strh	r3, [r7, #6]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061fa:	88bb      	ldrh	r3, [r7, #4]
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	b29b      	uxth	r3, r3
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	005a      	lsls	r2, r3, #1
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
 800621c:	e01b      	b.n	8006256 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	3302      	adds	r3, #2
 800622a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b2da      	uxtb	r2, r3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	3302      	adds	r3, #2
 800624e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	3b01      	subs	r3, #1
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e0      	bne.n	800621e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	701a      	strb	r2, [r3, #0]
  }
}
 8006278:	bf00      	nop
 800627a:	372c      	adds	r7, #44	; 0x2c
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7c1b      	ldrb	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d115      	bne.n	80062c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800629a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629e:	2202      	movs	r2, #2
 80062a0:	2181      	movs	r1, #129	; 0x81
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fe33 	bl	8007f0e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b2:	2202      	movs	r2, #2
 80062b4:	2101      	movs	r1, #1
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fe29 	bl	8007f0e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062c4:	e012      	b.n	80062ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	2202      	movs	r2, #2
 80062ca:	2181      	movs	r1, #129	; 0x81
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fe1e 	bl	8007f0e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	2202      	movs	r2, #2
 80062dc:	2101      	movs	r1, #1
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fe15 	bl	8007f0e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062ec:	2308      	movs	r3, #8
 80062ee:	2203      	movs	r2, #3
 80062f0:	2182      	movs	r1, #130	; 0x82
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe0b 	bl	8007f0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006302:	f001 ff2b 	bl	800815c <USBD_static_malloc>
 8006306:	4602      	mov	r2, r0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e026      	b.n	800636c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7c1b      	ldrb	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	2101      	movs	r1, #1
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fecb 	bl	80080f0 <USBD_LL_PrepareReceive>
 800635a:	e007      	b.n	800636c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fec2 	bl	80080f0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006386:	2181      	movs	r1, #129	; 0x81
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 fde6 	bl	8007f5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006394:	2101      	movs	r1, #1
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fddf 	bl	8007f5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063a4:	2182      	movs	r1, #130	; 0x82
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fdd7 	bl	8007f5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fed1 	bl	8008174 <USBD_static_free>
    pdev->pClassData = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800640a:	2b00      	cmp	r3, #0
 800640c:	d039      	beq.n	8006482 <USBD_CDC_Setup+0x9e>
 800640e:	2b20      	cmp	r3, #32
 8006410:	d17c      	bne.n	800650c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	88db      	ldrh	r3, [r3, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d029      	beq.n	800646e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b25b      	sxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	da11      	bge.n	8006448 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006430:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	88d2      	ldrh	r2, [r2, #6]
 8006436:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006438:	6939      	ldr	r1, [r7, #16]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	88db      	ldrh	r3, [r3, #6]
 800643e:	461a      	mov	r2, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f9c9 	bl	80077d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006446:	e068      	b.n	800651a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785a      	ldrb	r2, [r3, #1]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800645e:	6939      	ldr	r1, [r7, #16]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	88db      	ldrh	r3, [r3, #6]
 8006464:	461a      	mov	r2, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 f9e4 	bl	8007834 <USBD_CtlPrepareRx>
      break;
 800646c:	e055      	b.n	800651a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
 800647a:	2200      	movs	r2, #0
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4798      	blx	r3
      break;
 8006480:	e04b      	b.n	800651a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b0a      	cmp	r3, #10
 8006488:	d017      	beq.n	80064ba <USBD_CDC_Setup+0xd6>
 800648a:	2b0b      	cmp	r3, #11
 800648c:	d029      	beq.n	80064e2 <USBD_CDC_Setup+0xfe>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d133      	bne.n	80064fa <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	2b03      	cmp	r3, #3
 800649a:	d107      	bne.n	80064ac <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	2202      	movs	r2, #2
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f997 	bl	80077d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064aa:	e02e      	b.n	800650a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f928 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 80064b4:	2302      	movs	r3, #2
 80064b6:	75fb      	strb	r3, [r7, #23]
          break;
 80064b8:	e027      	b.n	800650a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d107      	bne.n	80064d4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064c4:	f107 030f 	add.w	r3, r7, #15
 80064c8:	2201      	movs	r2, #1
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f983 	bl	80077d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d2:	e01a      	b.n	800650a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 f914 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 80064dc:	2302      	movs	r3, #2
 80064de:	75fb      	strb	r3, [r7, #23]
          break;
 80064e0:	e013      	b.n	800650a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d00d      	beq.n	8006508 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f908 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064f8:	e006      	b.n	8006508 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f901 	bl	8007704 <USBD_CtlError>
          ret = USBD_FAIL;
 8006502:	2302      	movs	r3, #2
 8006504:	75fb      	strb	r3, [r7, #23]
          break;
 8006506:	e000      	b.n	800650a <USBD_CDC_Setup+0x126>
          break;
 8006508:	bf00      	nop
      }
      break;
 800650a:	e006      	b.n	800651a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f8f8 	bl	8007704 <USBD_CtlError>
      ret = USBD_FAIL;
 8006514:	2302      	movs	r3, #2
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	bf00      	nop
  }

  return ret;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800653e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d03a      	beq.n	80065c0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	331c      	adds	r3, #28
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d029      	beq.n	80065b4 <USBD_CDC_DataIn+0x90>
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	331c      	adds	r3, #28
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	78f9      	ldrb	r1, [r7, #3]
 8006574:	68b8      	ldr	r0, [r7, #8]
 8006576:	460b      	mov	r3, r1
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4403      	add	r3, r0
 8006580:	3338      	adds	r3, #56	; 0x38
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	fbb2 f1f3 	udiv	r1, r2, r3
 8006588:	fb03 f301 	mul.w	r3, r3, r1
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d110      	bne.n	80065b4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	331c      	adds	r3, #28
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065a6:	78f9      	ldrb	r1, [r7, #3]
 80065a8:	2300      	movs	r3, #0
 80065aa:	2200      	movs	r2, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fd7c 	bl	80080aa <USBD_LL_Transmit>
 80065b2:	e003      	b.n	80065bc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	e000      	b.n	80065c2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065c0:	2302      	movs	r3, #2
  }
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fda7 	bl	8008136 <USBD_LL_GetRxDataSize>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800660e:	4611      	mov	r1, r2
 8006610:	4798      	blx	r3

    return USBD_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006616:	2302      	movs	r3, #2
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006636:	2b00      	cmp	r3, #0
 8006638:	d015      	beq.n	8006666 <USBD_CDC_EP0_RxReady+0x46>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006640:	2bff      	cmp	r3, #255	; 0xff
 8006642:	d010      	beq.n	8006666 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006652:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800665a:	b292      	uxth	r2, r2
 800665c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2243      	movs	r2, #67	; 0x43
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000094 	.word	0x20000094

08006690 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2243      	movs	r2, #67	; 0x43
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000050 	.word	0x20000050

080066b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2243      	movs	r2, #67	; 0x43
 80066bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	200000d8 	.word	0x200000d8

080066d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	220a      	movs	r2, #10
 80066dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80066de:	4b03      	ldr	r3, [pc, #12]	; (80066ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066fa:	2302      	movs	r3, #2
 80066fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d017      	beq.n	80067be <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7c1b      	ldrb	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800679c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fca4 	bl	80080f0 <USBD_LL_PrepareReceive>
 80067a8:	e007      	b.n	80067ba <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fc9b 	bl	80080f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e000      	b.n	80067c0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067be:	2302      	movs	r3, #2
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067dc:	2302      	movs	r3, #2
 80067de:	e01a      	b.n	8006816 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	79fa      	ldrb	r2, [r7, #7]
 800680c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f001 fb08 	bl	8007e24 <USBD_LL_Init>

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
 800683e:	e001      	b.n	8006844 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006840:	2302      	movs	r3, #2
 8006842:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fb3d 	bl	8007ed8 <USBD_LL_Start>

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006888:	2302      	movs	r3, #2
 800688a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	4611      	mov	r1, r2
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 feca 	bl	800768c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2b01      	cmp	r3, #1
 800691a:	d00c      	beq.n	8006936 <USBD_LL_SetupStage+0x56>
 800691c:	2b01      	cmp	r3, #1
 800691e:	d302      	bcc.n	8006926 <USBD_LL_SetupStage+0x46>
 8006920:	2b02      	cmp	r3, #2
 8006922:	d010      	beq.n	8006946 <USBD_LL_SetupStage+0x66>
 8006924:	e017      	b.n	8006956 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9ca 	bl	8006cc8 <USBD_StdDevReq>
      break;
 8006934:	e01a      	b.n	800696c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa2c 	bl	8006d9c <USBD_StdItfReq>
      break;
 8006944:	e012      	b.n	800696c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa6a 	bl	8006e28 <USBD_StdEPReq>
      break;
 8006954:	e00a      	b.n	800696c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800695c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fb17 	bl	8007f98 <USBD_LL_StallEP>
      break;
 800696a:	bf00      	nop
  }

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	460b      	mov	r3, r1
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d14b      	bne.n	8006a22 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006990:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006998:	2b03      	cmp	r3, #3
 800699a:	d134      	bne.n	8006a06 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d919      	bls.n	80069dc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069be:	429a      	cmp	r2, r3
 80069c0:	d203      	bcs.n	80069ca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	e002      	b.n	80069d0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 ff4b 	bl	8007870 <USBD_CtlContinueRx>
 80069da:	e038      	b.n	8006a4e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d105      	bne.n	80069fe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 ff48 	bl	8007894 <USBD_CtlSendStatus>
 8006a04:	e023      	b.n	8006a4e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d11e      	bne.n	8006a4e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f001 fabc 	bl	8007f98 <USBD_LL_StallEP>
 8006a20:	e015      	b.n	8006a4e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d108      	bne.n	8006a4a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	7afa      	ldrb	r2, [r7, #11]
 8006a42:	4611      	mov	r1, r2
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	4798      	blx	r3
 8006a48:	e001      	b.n	8006a4e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e000      	b.n	8006a50 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	460b      	mov	r3, r1
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d17f      	bne.n	8006b6c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3314      	adds	r3, #20
 8006a70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d15c      	bne.n	8006b36 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d915      	bls.n	8006ab4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	1ad2      	subs	r2, r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 feb5 	bl	8007810 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 fb1f 	bl	80080f0 <USBD_LL_PrepareReceive>
 8006ab2:	e04e      	b.n	8006b52 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	6912      	ldr	r2, [r2, #16]
 8006abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ac0:	fb02 f201 	mul.w	r2, r2, r1
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d11c      	bne.n	8006b04 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d316      	bcc.n	8006b04 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d20f      	bcs.n	8006b04 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fe91 	bl	8007810 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 faf7 	bl	80080f0 <USBD_LL_PrepareReceive>
 8006b02:	e026      	b.n	8006b52 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d105      	bne.n	8006b26 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b26:	2180      	movs	r1, #128	; 0x80
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f001 fa35 	bl	8007f98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fec3 	bl	80078ba <USBD_CtlReceiveStatus>
 8006b34:	e00d      	b.n	8006b52 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d004      	beq.n	8006b4a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f001 fa23 	bl	8007f98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d11d      	bne.n	8006b98 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff fe83 	bl	8006868 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b6a:	e015      	b.n	8006b98 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d108      	bne.n	8006b94 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	7afa      	ldrb	r2, [r7, #11]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
 8006b92:	e001      	b.n	8006b98 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b94:	2302      	movs	r3, #2
 8006b96:	e000      	b.n	8006b9a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	2200      	movs	r2, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f9ac 	bl	8007f0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2240      	movs	r2, #64	; 0x40
 8006bc2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f99e 	bl	8007f0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6852      	ldr	r2, [r2, #4]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	4611      	mov	r1, r2
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
  }

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d105      	bne.n	8006c88 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d10b      	bne.n	8006cbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d004      	beq.n	8006cec <USBD_StdDevReq+0x24>
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d002      	beq.n	8006cec <USBD_StdDevReq+0x24>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <USBD_StdDevReq+0x34>
 8006cea:	e04c      	b.n	8006d86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
      break;
 8006cfa:	e049      	b.n	8006d90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	d83a      	bhi.n	8006d7a <USBD_StdDevReq+0xb2>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_StdDevReq+0x44>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d5d 	.word	0x08006d5d
 8006d10:	08006d71 	.word	0x08006d71
 8006d14:	08006d7b 	.word	0x08006d7b
 8006d18:	08006d67 	.word	0x08006d67
 8006d1c:	08006d7b 	.word	0x08006d7b
 8006d20:	08006d3f 	.word	0x08006d3f
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d7b 	.word	0x08006d7b
 8006d2c:	08006d53 	.word	0x08006d53
 8006d30:	08006d49 	.word	0x08006d49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f9d4 	bl	80070e4 <USBD_GetDescriptor>
          break;
 8006d3c:	e022      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fb37 	bl	80073b4 <USBD_SetAddress>
          break;
 8006d46:	e01d      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb74 	bl	8007438 <USBD_SetConfig>
          break;
 8006d50:	e018      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fbfd 	bl	8007554 <USBD_GetConfig>
          break;
 8006d5a:	e013      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fc2c 	bl	80075bc <USBD_GetStatus>
          break;
 8006d64:	e00e      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc5a 	bl	8007622 <USBD_SetFeature>
          break;
 8006d6e:	e009      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc69 	bl	800764a <USBD_ClrFeature>
          break;
 8006d78:	e004      	b.n	8006d84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fcc1 	bl	8007704 <USBD_CtlError>
          break;
 8006d82:	bf00      	nop
      }
      break;
 8006d84:	e004      	b.n	8006d90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fcbb 	bl	8007704 <USBD_CtlError>
      break;
 8006d8e:	bf00      	nop
  }

  return ret;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop

08006d9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d003      	beq.n	8006dbe <USBD_StdItfReq+0x22>
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d001      	beq.n	8006dbe <USBD_StdItfReq+0x22>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d12a      	bne.n	8006e14 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d81d      	bhi.n	8006e06 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	889b      	ldrh	r3, [r3, #4]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d813      	bhi.n	8006dfc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	88db      	ldrh	r3, [r3, #6]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d110      	bne.n	8006e10 <USBD_StdItfReq+0x74>
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10d      	bne.n	8006e10 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fd4d 	bl	8007894 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dfa:	e009      	b.n	8006e10 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc80 	bl	8007704 <USBD_CtlError>
          break;
 8006e04:	e004      	b.n	8006e10 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc7b 	bl	8007704 <USBD_CtlError>
          break;
 8006e0e:	e000      	b.n	8006e12 <USBD_StdItfReq+0x76>
          break;
 8006e10:	bf00      	nop
      }
      break;
 8006e12:	e004      	b.n	8006e1e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fc74 	bl	8007704 <USBD_CtlError>
      break;
 8006e1c:	bf00      	nop
  }

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	889b      	ldrh	r3, [r3, #4]
 8006e3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d004      	beq.n	8006e52 <USBD_StdEPReq+0x2a>
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d002      	beq.n	8006e52 <USBD_StdEPReq+0x2a>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <USBD_StdEPReq+0x3a>
 8006e50:	e13d      	b.n	80070ce <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
      break;
 8006e60:	e13a      	b.n	80070d8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d10a      	bne.n	8006e84 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	e12a      	b.n	80070da <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d03e      	beq.n	8006f0a <USBD_StdEPReq+0xe2>
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d002      	beq.n	8006e96 <USBD_StdEPReq+0x6e>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d070      	beq.n	8006f76 <USBD_StdEPReq+0x14e>
 8006e94:	e115      	b.n	80070c2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d002      	beq.n	8006ea6 <USBD_StdEPReq+0x7e>
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d015      	beq.n	8006ed0 <USBD_StdEPReq+0xa8>
 8006ea4:	e02b      	b.n	8006efe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <USBD_StdEPReq+0x9e>
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b80      	cmp	r3, #128	; 0x80
 8006eb0:	d009      	beq.n	8006ec6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f86e 	bl	8007f98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 f86a 	bl	8007f98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ec4:	e020      	b.n	8006f08 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc1b 	bl	8007704 <USBD_CtlError>
              break;
 8006ece:	e01b      	b.n	8006f08 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	885b      	ldrh	r3, [r3, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10e      	bne.n	8006ef6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <USBD_StdEPReq+0xce>
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b80      	cmp	r3, #128	; 0x80
 8006ee2:	d008      	beq.n	8006ef6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f851 	bl	8007f98 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fccc 	bl	8007894 <USBD_CtlSendStatus>

              break;
 8006efc:	e004      	b.n	8006f08 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fbff 	bl	8007704 <USBD_CtlError>
              break;
 8006f06:	bf00      	nop
          }
          break;
 8006f08:	e0e0      	b.n	80070cc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d002      	beq.n	8006f1a <USBD_StdEPReq+0xf2>
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d015      	beq.n	8006f44 <USBD_StdEPReq+0x11c>
 8006f18:	e026      	b.n	8006f68 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00c      	beq.n	8006f3a <USBD_StdEPReq+0x112>
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d009      	beq.n	8006f3a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f834 	bl	8007f98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f830 	bl	8007f98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f38:	e01c      	b.n	8006f74 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fbe1 	bl	8007704 <USBD_CtlError>
              break;
 8006f42:	e017      	b.n	8006f74 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	885b      	ldrh	r3, [r3, #2]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d112      	bne.n	8006f72 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 f83b 	bl	8007fd6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc97 	bl	8007894 <USBD_CtlSendStatus>
              }
              break;
 8006f66:	e004      	b.n	8006f72 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbca 	bl	8007704 <USBD_CtlError>
              break;
 8006f70:	e000      	b.n	8006f74 <USBD_StdEPReq+0x14c>
              break;
 8006f72:	bf00      	nop
          }
          break;
 8006f74:	e0aa      	b.n	80070cc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USBD_StdEPReq+0x15e>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d032      	beq.n	8006fea <USBD_StdEPReq+0x1c2>
 8006f84:	e097      	b.n	80070b6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <USBD_StdEPReq+0x174>
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d004      	beq.n	8006f9c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fbb5 	bl	8007704 <USBD_CtlError>
                break;
 8006f9a:	e091      	b.n	80070c0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da0b      	bge.n	8006fbc <USBD_StdEPReq+0x194>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	3310      	adds	r3, #16
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	e00b      	b.n	8006fd4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fbf8 	bl	80077d8 <USBD_CtlSendData>
              break;
 8006fe8:	e06a      	b.n	80070c0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da11      	bge.n	8007016 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	f003 020f 	and.w	r2, r3, #15
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3318      	adds	r3, #24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d117      	bne.n	800703c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fb78 	bl	8007704 <USBD_CtlError>
                  break;
 8007014:	e054      	b.n	80070c0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb65 	bl	8007704 <USBD_CtlError>
                  break;
 800703a:	e041      	b.n	80070c0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da0b      	bge.n	800705c <USBD_StdEPReq+0x234>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3310      	adds	r3, #16
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	e00b      	b.n	8007074 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <USBD_StdEPReq+0x25a>
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b80      	cmp	r3, #128	; 0x80
 8007080:	d103      	bne.n	800708a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	e00e      	b.n	80070a8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 ffc0 	bl	8008014 <USBD_LL_IsStallEP>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e002      	b.n	80070a8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2202      	movs	r2, #2
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb92 	bl	80077d8 <USBD_CtlSendData>
              break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb23 	bl	8007704 <USBD_CtlError>
              break;
 80070be:	bf00      	nop
          }
          break;
 80070c0:	e004      	b.n	80070cc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fb1d 	bl	8007704 <USBD_CtlError>
          break;
 80070ca:	bf00      	nop
      }
      break;
 80070cc:	e004      	b.n	80070d8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fb17 	bl	8007704 <USBD_CtlError>
      break;
 80070d6:	bf00      	nop
  }

  return ret;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	885b      	ldrh	r3, [r3, #2]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	2b06      	cmp	r3, #6
 8007106:	f200 8128 	bhi.w	800735a <USBD_GetDescriptor+0x276>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USBD_GetDescriptor+0x2c>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	0800712d 	.word	0x0800712d
 8007114:	08007145 	.word	0x08007145
 8007118:	08007185 	.word	0x08007185
 800711c:	0800735b 	.word	0x0800735b
 8007120:	0800735b 	.word	0x0800735b
 8007124:	080072fb 	.word	0x080072fb
 8007128:	08007327 	.word	0x08007327
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	7c12      	ldrb	r2, [r2, #16]
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
 8007140:	60f8      	str	r0, [r7, #12]
      break;
 8007142:	e112      	b.n	800736a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7c1b      	ldrb	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10d      	bne.n	8007168 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	f107 0208 	add.w	r2, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	2202      	movs	r2, #2
 8007164:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007166:	e100      	b.n	800736a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f107 0208 	add.w	r2, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      break;
 8007182:	e0f2      	b.n	800736a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	885b      	ldrh	r3, [r3, #2]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b05      	cmp	r3, #5
 800718c:	f200 80ac 	bhi.w	80072e8 <USBD_GetDescriptor+0x204>
 8007190:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <USBD_GetDescriptor+0xb4>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071e5 	.word	0x080071e5
 80071a0:	08007219 	.word	0x08007219
 80071a4:	0800724d 	.word	0x0800724d
 80071a8:	08007281 	.word	0x08007281
 80071ac:	080072b5 	.word	0x080072b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d2:	e091      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa94 	bl	8007704 <USBD_CtlError>
            err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
          break;
 80071e2:	e089      	b.n	80072f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007206:	e077      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa7a 	bl	8007704 <USBD_CtlError>
            err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
          break;
 8007216:	e06f      	b.n	80072f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7c12      	ldrb	r2, [r2, #16]
 8007230:	f107 0108 	add.w	r1, r7, #8
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723a:	e05d      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa60 	bl	8007704 <USBD_CtlError>
            err++;
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	3301      	adds	r3, #1
 8007248:	72fb      	strb	r3, [r7, #11]
          break;
 800724a:	e055      	b.n	80072f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	7c12      	ldrb	r2, [r2, #16]
 8007264:	f107 0108 	add.w	r1, r7, #8
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800726e:	e043      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa46 	bl	8007704 <USBD_CtlError>
            err++;
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	3301      	adds	r3, #1
 800727c:	72fb      	strb	r3, [r7, #11]
          break;
 800727e:	e03b      	b.n	80072f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	7c12      	ldrb	r2, [r2, #16]
 8007298:	f107 0108 	add.w	r1, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a2:	e029      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa2c 	bl	8007704 <USBD_CtlError>
            err++;
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	3301      	adds	r3, #1
 80072b0:	72fb      	strb	r3, [r7, #11]
          break;
 80072b2:	e021      	b.n	80072f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	7c12      	ldrb	r2, [r2, #16]
 80072cc:	f107 0108 	add.w	r1, r7, #8
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072d6:	e00f      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa12 	bl	8007704 <USBD_CtlError>
            err++;
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	3301      	adds	r3, #1
 80072e4:	72fb      	strb	r3, [r7, #11]
          break;
 80072e6:	e007      	b.n	80072f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa0a 	bl	8007704 <USBD_CtlError>
          err++;
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	3301      	adds	r3, #1
 80072f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072f6:	e038      	b.n	800736a <USBD_GetDescriptor+0x286>
 80072f8:	e037      	b.n	800736a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7c1b      	ldrb	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	f107 0208 	add.w	r2, r7, #8
 800730e:	4610      	mov	r0, r2
 8007310:	4798      	blx	r3
 8007312:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007314:	e029      	b.n	800736a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9f3 	bl	8007704 <USBD_CtlError>
        err++;
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	3301      	adds	r3, #1
 8007322:	72fb      	strb	r3, [r7, #11]
      break;
 8007324:	e021      	b.n	800736a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7c1b      	ldrb	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10d      	bne.n	800734a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f107 0208 	add.w	r2, r7, #8
 800733a:	4610      	mov	r0, r2
 800733c:	4798      	blx	r3
 800733e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3301      	adds	r3, #1
 8007344:	2207      	movs	r2, #7
 8007346:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007348:	e00f      	b.n	800736a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9d9 	bl	8007704 <USBD_CtlError>
        err++;
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	3301      	adds	r3, #1
 8007356:	72fb      	strb	r3, [r7, #11]
      break;
 8007358:	e007      	b.n	800736a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9d1 	bl	8007704 <USBD_CtlError>
      err++;
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	3301      	adds	r3, #1
 8007366:	72fb      	strb	r3, [r7, #11]
      break;
 8007368:	bf00      	nop
  }

  if (err != 0U)
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11c      	bne.n	80073aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <USBD_GetDescriptor+0x2b6>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88db      	ldrh	r3, [r3, #6]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	88da      	ldrh	r2, [r3, #6]
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	4293      	cmp	r3, r2
 8007386:	bf28      	it	cs
 8007388:	4613      	movcs	r3, r2
 800738a:	b29b      	uxth	r3, r3
 800738c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800738e:	893b      	ldrh	r3, [r7, #8]
 8007390:	461a      	mov	r2, r3
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa1f 	bl	80077d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	88db      	ldrh	r3, [r3, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa76 	bl	8007894 <USBD_CtlSendStatus>
 80073a8:	e000      	b.n	80073ac <USBD_GetDescriptor+0x2c8>
    return;
 80073aa:	bf00      	nop
    }
  }
}
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop

080073b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	889b      	ldrh	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d130      	bne.n	8007428 <USBD_SetAddress+0x74>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12c      	bne.n	8007428 <USBD_SetAddress+0x74>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	885b      	ldrh	r3, [r3, #2]
 80073d2:	2b7f      	cmp	r3, #127	; 0x7f
 80073d4:	d828      	bhi.n	8007428 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	885b      	ldrh	r3, [r3, #2]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d104      	bne.n	80073f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f988 	bl	8007704 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f4:	e01c      	b.n	8007430 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fe32 	bl	800806c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa43 	bl	8007894 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741c:	e008      	b.n	8007430 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	e003      	b.n	8007430 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f96a 	bl	8007704 <USBD_CtlError>
  }
}
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	885b      	ldrh	r3, [r3, #2]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	4b41      	ldr	r3, [pc, #260]	; (8007550 <USBD_SetConfig+0x118>)
 800744a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800744c:	4b40      	ldr	r3, [pc, #256]	; (8007550 <USBD_SetConfig+0x118>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d904      	bls.n	800745e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f954 	bl	8007704 <USBD_CtlError>
 800745c:	e075      	b.n	800754a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	2b02      	cmp	r3, #2
 8007466:	d002      	beq.n	800746e <USBD_SetConfig+0x36>
 8007468:	2b03      	cmp	r3, #3
 800746a:	d023      	beq.n	80074b4 <USBD_SetConfig+0x7c>
 800746c:	e062      	b.n	8007534 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800746e:	4b38      	ldr	r3, [pc, #224]	; (8007550 <USBD_SetConfig+0x118>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01a      	beq.n	80074ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007476:	4b36      	ldr	r3, [pc, #216]	; (8007550 <USBD_SetConfig+0x118>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2203      	movs	r2, #3
 8007484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007488:	4b31      	ldr	r3, [pc, #196]	; (8007550 <USBD_SetConfig+0x118>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f9f4 	bl	800687c <USBD_SetClassConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	2b02      	cmp	r3, #2
 8007498:	d104      	bne.n	80074a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f931 	bl	8007704 <USBD_CtlError>
            return;
 80074a2:	e052      	b.n	800754a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9f5 	bl	8007894 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074aa:	e04e      	b.n	800754a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f9f1 	bl	8007894 <USBD_CtlSendStatus>
        break;
 80074b2:	e04a      	b.n	800754a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074b4:	4b26      	ldr	r3, [pc, #152]	; (8007550 <USBD_SetConfig+0x118>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d112      	bne.n	80074e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074c4:	4b22      	ldr	r3, [pc, #136]	; (8007550 <USBD_SetConfig+0x118>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074ce:	4b20      	ldr	r3, [pc, #128]	; (8007550 <USBD_SetConfig+0x118>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff f9f0 	bl	80068ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9da 	bl	8007894 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074e0:	e033      	b.n	800754a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074e2:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <USBD_SetConfig+0x118>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d01d      	beq.n	800752c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff f9de 	bl	80068ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <USBD_SetConfig+0x118>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <USBD_SetConfig+0x118>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f9b4 	bl	800687c <USBD_SetClassConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	2b02      	cmp	r3, #2
 8007518:	d104      	bne.n	8007524 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f8f1 	bl	8007704 <USBD_CtlError>
            return;
 8007522:	e012      	b.n	800754a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9b5 	bl	8007894 <USBD_CtlSendStatus>
        break;
 800752a:	e00e      	b.n	800754a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9b1 	bl	8007894 <USBD_CtlSendStatus>
        break;
 8007532:	e00a      	b.n	800754a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8e4 	bl	8007704 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f9b9 	bl	80068ba <USBD_ClrClassConfig>
        break;
 8007548:	bf00      	nop
    }
  }
}
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000390 	.word	0x20000390

08007554 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88db      	ldrh	r3, [r3, #6]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d004      	beq.n	8007570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8cb 	bl	8007704 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800756e:	e021      	b.n	80075b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007576:	2b01      	cmp	r3, #1
 8007578:	db17      	blt.n	80075aa <USBD_GetConfig+0x56>
 800757a:	2b02      	cmp	r3, #2
 800757c:	dd02      	ble.n	8007584 <USBD_GetConfig+0x30>
 800757e:	2b03      	cmp	r3, #3
 8007580:	d00b      	beq.n	800759a <USBD_GetConfig+0x46>
 8007582:	e012      	b.n	80075aa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3308      	adds	r3, #8
 800758e:	2201      	movs	r2, #1
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f920 	bl	80077d8 <USBD_CtlSendData>
        break;
 8007598:	e00c      	b.n	80075b4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	2201      	movs	r2, #1
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f918 	bl	80077d8 <USBD_CtlSendData>
        break;
 80075a8:	e004      	b.n	80075b4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8a9 	bl	8007704 <USBD_CtlError>
        break;
 80075b2:	bf00      	nop
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	3b01      	subs	r3, #1
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d81e      	bhi.n	8007610 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	88db      	ldrh	r3, [r3, #6]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d004      	beq.n	80075e4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f891 	bl	8007704 <USBD_CtlError>
        break;
 80075e2:	e01a      	b.n	800761a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f043 0202 	orr.w	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	330c      	adds	r3, #12
 8007604:	2202      	movs	r2, #2
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f8e5 	bl	80077d8 <USBD_CtlSendData>
      break;
 800760e:	e004      	b.n	800761a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f876 	bl	8007704 <USBD_CtlError>
      break;
 8007618:	bf00      	nop
  }
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f929 	bl	8007894 <USBD_CtlSendStatus>
  }
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765a:	3b01      	subs	r3, #1
 800765c:	2b02      	cmp	r3, #2
 800765e:	d80b      	bhi.n	8007678 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	885b      	ldrh	r3, [r3, #2]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d10c      	bne.n	8007682 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f90f 	bl	8007894 <USBD_CtlSendStatus>
      }
      break;
 8007676:	e004      	b.n	8007682 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f842 	bl	8007704 <USBD_CtlError>
      break;
 8007680:	e000      	b.n	8007684 <USBD_ClrFeature+0x3a>
      break;
 8007682:	bf00      	nop
  }
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	785a      	ldrb	r2, [r3, #1]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3302      	adds	r3, #2
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	3303      	adds	r3, #3
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	3305      	adds	r3, #5
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	3306      	adds	r3, #6
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3307      	adds	r3, #7
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	80da      	strh	r2, [r3, #6]

}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800770e:	2180      	movs	r1, #128	; 0x80
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc41 	bl	8007f98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007716:	2100      	movs	r1, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc3d 	bl	8007f98 <USBD_LL_StallEP>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d032      	beq.n	80077a2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f834 	bl	80077aa <USBD_GetLen>
 8007742:	4603      	mov	r3, r0
 8007744:	3301      	adds	r3, #1
 8007746:	b29b      	uxth	r3, r3
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	75fa      	strb	r2, [r7, #23]
 8007756:	461a      	mov	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4413      	add	r3, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7812      	ldrb	r2, [r2, #0]
 8007760:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	75fa      	strb	r2, [r7, #23]
 8007768:	461a      	mov	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	2203      	movs	r2, #3
 8007770:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007772:	e012      	b.n	800779a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	60fa      	str	r2, [r7, #12]
 800777a:	7dfa      	ldrb	r2, [r7, #23]
 800777c:	1c51      	adds	r1, r2, #1
 800777e:	75f9      	strb	r1, [r7, #23]
 8007780:	4611      	mov	r1, r2
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	440a      	add	r2, r1
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	75fa      	strb	r2, [r7, #23]
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e8      	bne.n	8007774 <USBD_GetString+0x4e>
    }
  }
}
 80077a2:	bf00      	nop
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077b6:	e005      	b.n	80077c4 <USBD_GetLen+0x1a>
  {
    len++;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	3301      	adds	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3301      	adds	r3, #1
 80077c2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f5      	bne.n	80077b8 <USBD_GetLen+0xe>
  }

  return len;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fc52 	bl	80080aa <USBD_LL_Transmit>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	2100      	movs	r1, #0
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fc40 	bl	80080aa <USBD_LL_Transmit>

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2203      	movs	r2, #3
 8007846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fc45 	bl	80080f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	2100      	movs	r1, #0
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fc33 	bl	80080f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fbfd 	bl	80080aa <USBD_LL_Transmit>

  return USBD_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2205      	movs	r2, #5
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ca:	2300      	movs	r3, #0
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc0d 	bl	80080f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078e4:	2200      	movs	r2, #0
 80078e6:	4912      	ldr	r1, [pc, #72]	; (8007930 <MX_USB_DEVICE_Init+0x50>)
 80078e8:	4812      	ldr	r0, [pc, #72]	; (8007934 <MX_USB_DEVICE_Init+0x54>)
 80078ea:	f7fe ff6d 	bl	80067c8 <USBD_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078f4:	f7f9 fb68 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078f8:	490f      	ldr	r1, [pc, #60]	; (8007938 <MX_USB_DEVICE_Init+0x58>)
 80078fa:	480e      	ldr	r0, [pc, #56]	; (8007934 <MX_USB_DEVICE_Init+0x54>)
 80078fc:	f7fe ff8f 	bl	800681e <USBD_RegisterClass>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007906:	f7f9 fb5f 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800790a:	490c      	ldr	r1, [pc, #48]	; (800793c <MX_USB_DEVICE_Init+0x5c>)
 800790c:	4809      	ldr	r0, [pc, #36]	; (8007934 <MX_USB_DEVICE_Init+0x54>)
 800790e:	f7fe feef 	bl	80066f0 <USBD_CDC_RegisterInterface>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007918:	f7f9 fb56 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800791c:	4805      	ldr	r0, [pc, #20]	; (8007934 <MX_USB_DEVICE_Init+0x54>)
 800791e:	f7fe ff97 	bl	8006850 <USBD_Start>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007928:	f7f9 fb4e 	bl	8000fc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000134 	.word	0x20000134
 8007934:	200008d0 	.word	0x200008d0
 8007938:	20000018 	.word	0x20000018
 800793c:	20000124 	.word	0x20000124

08007940 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007944:	2200      	movs	r2, #0
 8007946:	4905      	ldr	r1, [pc, #20]	; (800795c <CDC_Init_FS+0x1c>)
 8007948:	4805      	ldr	r0, [pc, #20]	; (8007960 <CDC_Init_FS+0x20>)
 800794a:	f7fe fee7 	bl	800671c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800794e:	4905      	ldr	r1, [pc, #20]	; (8007964 <CDC_Init_FS+0x24>)
 8007950:	4803      	ldr	r0, [pc, #12]	; (8007960 <CDC_Init_FS+0x20>)
 8007952:	f7fe fefc 	bl	800674e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007956:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007958:	4618      	mov	r0, r3
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20001394 	.word	0x20001394
 8007960:	200008d0 	.word	0x200008d0
 8007964:	20000b94 	.word	0x20000b94

08007968 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800796c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800796e:	4618      	mov	r0, r3
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
	...

08007978 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
 8007984:	4613      	mov	r3, r2
 8007986:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2b23      	cmp	r3, #35	; 0x23
 800798c:	d85c      	bhi.n	8007a48 <CDC_Control_FS+0xd0>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <CDC_Control_FS+0x1c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	08007a49 	.word	0x08007a49
 8007998:	08007a49 	.word	0x08007a49
 800799c:	08007a49 	.word	0x08007a49
 80079a0:	08007a49 	.word	0x08007a49
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007a49 	.word	0x08007a49
 80079ac:	08007a49 	.word	0x08007a49
 80079b0:	08007a49 	.word	0x08007a49
 80079b4:	08007a49 	.word	0x08007a49
 80079b8:	08007a49 	.word	0x08007a49
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007a49 	.word	0x08007a49
 80079cc:	08007a49 	.word	0x08007a49
 80079d0:	08007a49 	.word	0x08007a49
 80079d4:	08007a49 	.word	0x08007a49
 80079d8:	08007a49 	.word	0x08007a49
 80079dc:	08007a49 	.word	0x08007a49
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	08007a49 	.word	0x08007a49
 80079e8:	08007a49 	.word	0x08007a49
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a49 	.word	0x08007a49
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a37 	.word	0x08007a37
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a49 	.word	0x08007a49
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <CDC_Control_FS+0xe0>)
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	6810      	ldr	r0, [r2, #0]
 8007a2a:	6018      	str	r0, [r3, #0]
 8007a2c:	8891      	ldrh	r1, [r2, #4]
 8007a2e:	7992      	ldrb	r2, [r2, #6]
 8007a30:	8099      	strh	r1, [r3, #4]
 8007a32:	719a      	strb	r2, [r3, #6]
    break;
 8007a34:	e009      	b.n	8007a4a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	4a07      	ldr	r2, [pc, #28]	; (8007a58 <CDC_Control_FS+0xe0>)
 8007a3a:	6810      	ldr	r0, [r2, #0]
 8007a3c:	6018      	str	r0, [r3, #0]
 8007a3e:	8891      	ldrh	r1, [r2, #4]
 8007a40:	7992      	ldrb	r2, [r2, #6]
 8007a42:	8099      	strh	r1, [r3, #4]
 8007a44:	719a      	strb	r2, [r3, #6]
    break;
 8007a46:	e000      	b.n	8007a4a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a48:	bf00      	nop
  }

  return (USBD_OK);
 8007a4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	2000011c 	.word	0x2000011c

08007a5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4805      	ldr	r0, [pc, #20]	; (8007a80 <CDC_Receive_FS+0x24>)
 8007a6a:	f7fe fe70 	bl	800674e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a6e:	4804      	ldr	r0, [pc, #16]	; (8007a80 <CDC_Receive_FS+0x24>)
 8007a70:	f7fe fe80 	bl	8006774 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200008d0 	.word	0x200008d0

08007a84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2212      	movs	r2, #18
 8007a94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000150 	.word	0x20000150

08007aa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aba:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000164 	.word	0x20000164

08007acc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4907      	ldr	r1, [pc, #28]	; (8007b00 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae2:	4808      	ldr	r0, [pc, #32]	; (8007b04 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae4:	f7ff fe1f 	bl	8007726 <USBD_GetString>
 8007ae8:	e004      	b.n	8007af4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4904      	ldr	r1, [pc, #16]	; (8007b00 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aee:	4805      	ldr	r0, [pc, #20]	; (8007b04 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af0:	f7ff fe19 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20001b94 	.word	0x20001b94
 8007b04:	0800adbc 	.word	0x0800adbc

08007b08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	4904      	ldr	r1, [pc, #16]	; (8007b28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b18:	4804      	ldr	r0, [pc, #16]	; (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b1a:	f7ff fe04 	bl	8007726 <USBD_GetString>
  return USBD_StrDesc;
 8007b1e:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20001b94 	.word	0x20001b94
 8007b2c:	0800add4 	.word	0x0800add4

08007b30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	221a      	movs	r2, #26
 8007b40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b42:	f000 f843 	bl	8007bcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b46:	4b02      	ldr	r3, [pc, #8]	; (8007b50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000168 	.word	0x20000168

08007b54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	6039      	str	r1, [r7, #0]
 8007b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	4907      	ldr	r1, [pc, #28]	; (8007b88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6a:	4808      	ldr	r0, [pc, #32]	; (8007b8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b6c:	f7ff fddb 	bl	8007726 <USBD_GetString>
 8007b70:	e004      	b.n	8007b7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4904      	ldr	r1, [pc, #16]	; (8007b88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b76:	4805      	ldr	r0, [pc, #20]	; (8007b8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b78:	f7ff fdd5 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20001b94 	.word	0x20001b94
 8007b8c:	0800ade8 	.word	0x0800ade8

08007b90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4907      	ldr	r1, [pc, #28]	; (8007bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ba6:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ba8:	f7ff fdbd 	bl	8007726 <USBD_GetString>
 8007bac:	e004      	b.n	8007bb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb2:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb4:	f7ff fdb7 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20001b94 	.word	0x20001b94
 8007bc8:	0800adf4 	.word	0x0800adf4

08007bcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <Get_SerialNum+0x44>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <Get_SerialNum+0x48>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bde:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <Get_SerialNum+0x4c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	4909      	ldr	r1, [pc, #36]	; (8007c1c <Get_SerialNum+0x50>)
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f814 	bl	8007c24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	4908      	ldr	r1, [pc, #32]	; (8007c20 <Get_SerialNum+0x54>)
 8007c00:	68b8      	ldr	r0, [r7, #8]
 8007c02:	f000 f80f 	bl	8007c24 <IntToUnicode>
  }
}
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	1ffff7e8 	.word	0x1ffff7e8
 8007c14:	1ffff7ec 	.word	0x1ffff7ec
 8007c18:	1ffff7f0 	.word	0x1ffff7f0
 8007c1c:	2000016a 	.word	0x2000016a
 8007c20:	2000017a 	.word	0x2000017a

08007c24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]
 8007c3a:	e027      	b.n	8007c8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0f1b      	lsrs	r3, r3, #28
 8007c40:	2b09      	cmp	r3, #9
 8007c42:	d80b      	bhi.n	8007c5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	0f1b      	lsrs	r3, r3, #28
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	4619      	mov	r1, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	440b      	add	r3, r1
 8007c54:	3230      	adds	r2, #48	; 0x30
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e00a      	b.n	8007c72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	0f1b      	lsrs	r3, r3, #28
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	4619      	mov	r1, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3237      	adds	r2, #55	; 0x37
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	7dfa      	ldrb	r2, [r7, #23]
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d3d3      	bcc.n	8007c3c <IntToUnicode+0x18>
  }
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
	...

08007ca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0d      	ldr	r2, [pc, #52]	; (8007ce4 <HAL_PCD_MspInit+0x44>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d113      	bne.n	8007cda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <HAL_PCD_MspInit+0x48>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <HAL_PCD_MspInit+0x48>)
 8007cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cbc:	61d3      	str	r3, [r2, #28]
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <HAL_PCD_MspInit+0x48>)
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2014      	movs	r0, #20
 8007cd0:	f7f9 fc69 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cd4:	2014      	movs	r0, #20
 8007cd6:	f7f9 fc82 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40005c00 	.word	0x40005c00
 8007ce8:	40021000 	.word	0x40021000

08007cec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fe fdec 	bl	80068e0 <USBD_LL_SetupStage>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	440b      	add	r3, r1
 8007d30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7fe fe1c 	bl	8006976 <USBD_LL_DataOutStage>
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	440b      	add	r3, r1
 8007d66:	333c      	adds	r3, #60	; 0x3c
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f7fe fe73 	bl	8006a58 <USBD_LL_DataInStage>
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe ff83 	bl	8006c94 <USBD_LL_SOF>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d001      	beq.n	8007dae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007daa:	f7f9 f90d 	bl	8000fc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe ff33 	bl	8006c24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe feec 	bl	8006ba2 <USBD_LL_Reset>
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe ff2d 	bl	8006c42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <HAL_PCD_SuspendCallback+0x30>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	4a03      	ldr	r2, [pc, #12]	; (8007e04 <HAL_PCD_SuspendCallback+0x30>)
 8007df6:	f043 0306 	orr.w	r3, r3, #6
 8007dfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe ff27 	bl	8006c6a <USBD_LL_Resume>
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e2c:	4a28      	ldr	r2, [pc, #160]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e3c:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e3e:	4a25      	ldr	r2, [pc, #148]	; (8007ed4 <USBD_LL_Init+0xb0>)
 8007e40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e42:	4b23      	ldr	r3, [pc, #140]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e44:	2208      	movs	r2, #8
 8007e46:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e48:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e4e:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e54:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e60:	481b      	ldr	r0, [pc, #108]	; (8007ed0 <USBD_LL_Init+0xac>)
 8007e62:	f7f9 fd49 	bl	80018f8 <HAL_PCD_Init>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e6c:	f7f9 f8ac 	bl	8000fc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e76:	2318      	movs	r3, #24
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	f7fb f87d 	bl	8002f7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e86:	2358      	movs	r3, #88	; 0x58
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2180      	movs	r1, #128	; 0x80
 8007e8c:	f7fb f875 	bl	8002f7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e96:	23c0      	movs	r3, #192	; 0xc0
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2181      	movs	r1, #129	; 0x81
 8007e9c:	f7fb f86d 	bl	8002f7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ea6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2101      	movs	r1, #1
 8007eae:	f7fb f864 	bl	8002f7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2182      	movs	r1, #130	; 0x82
 8007ec0:	f7fb f85b 	bl	8002f7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001d94 	.word	0x20001d94
 8007ed4:	40005c00 	.word	0x40005c00

08007ed8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f9 fe0d 	bl	8001b0e <HAL_PCD_Start>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f94e 	bl	800819c <USBD_Get_USB_Status>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	4608      	mov	r0, r1
 8007f18:	4611      	mov	r1, r2
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	70fb      	strb	r3, [r7, #3]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70bb      	strb	r3, [r7, #2]
 8007f24:	4613      	mov	r3, r2
 8007f26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f36:	78bb      	ldrb	r3, [r7, #2]
 8007f38:	883a      	ldrh	r2, [r7, #0]
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	f7f9 ff87 	bl	8001e4e <HAL_PCD_EP_Open>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f928 	bl	800819c <USBD_Get_USB_Status>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7f9 ffce 	bl	8001f1a <HAL_PCD_EP_Close>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f909 	bl	800819c <USBD_Get_USB_Status>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fa f88e 	bl	80020d8 <HAL_PCD_EP_SetStall>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f8ea 	bl	800819c <USBD_Get_USB_Status>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fa f8cf 	bl	8002198 <HAL_PCD_EP_ClrStall>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f8cb 	bl	800819c <USBD_Get_USB_Status>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800a:	7bbb      	ldrb	r3, [r7, #14]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008026:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800802c:	2b00      	cmp	r3, #0
 800802e:	da0c      	bge.n	800804a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	440b      	add	r3, r1
 8008044:	3302      	adds	r3, #2
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	e00b      	b.n	8008062 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	440b      	add	r3, r1
 800805c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008060:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f7f9 feba 	bl	8001e04 <HAL_PCD_SetAddress>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f880 	bl	800819c <USBD_Get_USB_Status>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	461a      	mov	r2, r3
 80080b6:	460b      	mov	r3, r1
 80080b8:	72fb      	strb	r3, [r7, #11]
 80080ba:	4613      	mov	r3, r2
 80080bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080cc:	893b      	ldrh	r3, [r7, #8]
 80080ce:	7af9      	ldrb	r1, [r7, #11]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	f7f9 ffbe 	bl	8002052 <HAL_PCD_EP_Transmit>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f85d 	bl	800819c <USBD_Get_USB_Status>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	461a      	mov	r2, r3
 80080fc:	460b      	mov	r3, r1
 80080fe:	72fb      	strb	r3, [r7, #11]
 8008100:	4613      	mov	r3, r2
 8008102:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008112:	893b      	ldrh	r3, [r7, #8]
 8008114:	7af9      	ldrb	r1, [r7, #11]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	f7f9 ff47 	bl	8001faa <HAL_PCD_EP_Receive>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f83a 	bl	800819c <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800812c:	7dbb      	ldrb	r3, [r7, #22]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7f9 ff69 	bl	8002024 <HAL_PCD_EP_GetRxCount>
 8008152:	4603      	mov	r3, r0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008164:	4b02      	ldr	r3, [pc, #8]	; (8008170 <USBD_static_malloc+0x14>)
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	bc80      	pop	{r7}
 800816e:	4770      	bx	lr
 8008170:	20000394 	.word	0x20000394

08008174 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr

08008186 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d817      	bhi.n	80081e0 <USBD_Get_USB_Status+0x44>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_Get_USB_Status+0x1c>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081cf 	.word	0x080081cf
 80081c0:	080081d5 	.word	0x080081d5
 80081c4:	080081db 	.word	0x080081db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
    break;
 80081cc:	e00b      	b.n	80081e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	73fb      	strb	r3, [r7, #15]
    break;
 80081d2:	e008      	b.n	80081e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	e005      	b.n	80081e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	73fb      	strb	r3, [r7, #15]
    break;
 80081de:	e002      	b.n	80081e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081e0:	2302      	movs	r3, #2
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	bf00      	nop
  }
  return usb_status;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <__errno>:
 80081f4:	4b01      	ldr	r3, [pc, #4]	; (80081fc <__errno+0x8>)
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000184 	.word	0x20000184

08008200 <fiprintf>:
 8008200:	b40e      	push	{r1, r2, r3}
 8008202:	b503      	push	{r0, r1, lr}
 8008204:	4601      	mov	r1, r0
 8008206:	ab03      	add	r3, sp, #12
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <fiprintf+0x20>)
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f000 f911 	bl	8008438 <_vfiprintf_r>
 8008216:	b002      	add	sp, #8
 8008218:	f85d eb04 	ldr.w	lr, [sp], #4
 800821c:	b003      	add	sp, #12
 800821e:	4770      	bx	lr
 8008220:	20000184 	.word	0x20000184

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	2500      	movs	r5, #0
 8008228:	4e0c      	ldr	r6, [pc, #48]	; (800825c <__libc_init_array+0x38>)
 800822a:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <__libc_init_array+0x3c>)
 800822c:	1ba4      	subs	r4, r4, r6
 800822e:	10a4      	asrs	r4, r4, #2
 8008230:	42a5      	cmp	r5, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	f002 fd30 	bl	800ac98 <_init>
 8008238:	2500      	movs	r5, #0
 800823a:	4e0a      	ldr	r6, [pc, #40]	; (8008264 <__libc_init_array+0x40>)
 800823c:	4c0a      	ldr	r4, [pc, #40]	; (8008268 <__libc_init_array+0x44>)
 800823e:	1ba4      	subs	r4, r4, r6
 8008240:	10a4      	asrs	r4, r4, #2
 8008242:	42a5      	cmp	r5, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800824c:	4798      	blx	r3
 800824e:	3501      	adds	r5, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008256:	4798      	blx	r3
 8008258:	3501      	adds	r5, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	0800b768 	.word	0x0800b768
 8008260:	0800b768 	.word	0x0800b768
 8008264:	0800b768 	.word	0x0800b768
 8008268:	0800b76c 	.word	0x0800b76c

0800826c <malloc>:
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <malloc+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f000 b85f 	b.w	8008334 <_malloc_r>
 8008276:	bf00      	nop
 8008278:	20000184 	.word	0x20000184

0800827c <free>:
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <free+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 b80b 	b.w	800829c <_free_r>
 8008286:	bf00      	nop
 8008288:	20000184 	.word	0x20000184

0800828c <memset>:
 800828c:	4603      	mov	r3, r0
 800828e:	4402      	add	r2, r0
 8008290:	4293      	cmp	r3, r2
 8008292:	d100      	bne.n	8008296 <memset+0xa>
 8008294:	4770      	bx	lr
 8008296:	f803 1b01 	strb.w	r1, [r3], #1
 800829a:	e7f9      	b.n	8008290 <memset+0x4>

0800829c <_free_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4605      	mov	r5, r0
 80082a0:	2900      	cmp	r1, #0
 80082a2:	d043      	beq.n	800832c <_free_r+0x90>
 80082a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a8:	1f0c      	subs	r4, r1, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfb8      	it	lt
 80082ae:	18e4      	addlt	r4, r4, r3
 80082b0:	f002 f93b 	bl	800a52a <__malloc_lock>
 80082b4:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <_free_r+0x94>)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	4610      	mov	r0, r2
 80082ba:	b933      	cbnz	r3, 80082ca <_free_r+0x2e>
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	6014      	str	r4, [r2, #0]
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c6:	f002 b931 	b.w	800a52c <__malloc_unlock>
 80082ca:	42a3      	cmp	r3, r4
 80082cc:	d90b      	bls.n	80082e6 <_free_r+0x4a>
 80082ce:	6821      	ldr	r1, [r4, #0]
 80082d0:	1862      	adds	r2, r4, r1
 80082d2:	4293      	cmp	r3, r2
 80082d4:	bf01      	itttt	eq
 80082d6:	681a      	ldreq	r2, [r3, #0]
 80082d8:	685b      	ldreq	r3, [r3, #4]
 80082da:	1852      	addeq	r2, r2, r1
 80082dc:	6022      	streq	r2, [r4, #0]
 80082de:	6063      	str	r3, [r4, #4]
 80082e0:	6004      	str	r4, [r0, #0]
 80082e2:	e7ed      	b.n	80082c0 <_free_r+0x24>
 80082e4:	4613      	mov	r3, r2
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	b10a      	cbz	r2, 80082ee <_free_r+0x52>
 80082ea:	42a2      	cmp	r2, r4
 80082ec:	d9fa      	bls.n	80082e4 <_free_r+0x48>
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	1858      	adds	r0, r3, r1
 80082f2:	42a0      	cmp	r0, r4
 80082f4:	d10b      	bne.n	800830e <_free_r+0x72>
 80082f6:	6820      	ldr	r0, [r4, #0]
 80082f8:	4401      	add	r1, r0
 80082fa:	1858      	adds	r0, r3, r1
 80082fc:	4282      	cmp	r2, r0
 80082fe:	6019      	str	r1, [r3, #0]
 8008300:	d1de      	bne.n	80082c0 <_free_r+0x24>
 8008302:	6810      	ldr	r0, [r2, #0]
 8008304:	6852      	ldr	r2, [r2, #4]
 8008306:	4401      	add	r1, r0
 8008308:	6019      	str	r1, [r3, #0]
 800830a:	605a      	str	r2, [r3, #4]
 800830c:	e7d8      	b.n	80082c0 <_free_r+0x24>
 800830e:	d902      	bls.n	8008316 <_free_r+0x7a>
 8008310:	230c      	movs	r3, #12
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	e7d4      	b.n	80082c0 <_free_r+0x24>
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	1821      	adds	r1, r4, r0
 800831a:	428a      	cmp	r2, r1
 800831c:	bf01      	itttt	eq
 800831e:	6811      	ldreq	r1, [r2, #0]
 8008320:	6852      	ldreq	r2, [r2, #4]
 8008322:	1809      	addeq	r1, r1, r0
 8008324:	6021      	streq	r1, [r4, #0]
 8008326:	6062      	str	r2, [r4, #4]
 8008328:	605c      	str	r4, [r3, #4]
 800832a:	e7c9      	b.n	80082c0 <_free_r+0x24>
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	200005b4 	.word	0x200005b4

08008334 <_malloc_r>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	1ccd      	adds	r5, r1, #3
 8008338:	f025 0503 	bic.w	r5, r5, #3
 800833c:	3508      	adds	r5, #8
 800833e:	2d0c      	cmp	r5, #12
 8008340:	bf38      	it	cc
 8008342:	250c      	movcc	r5, #12
 8008344:	2d00      	cmp	r5, #0
 8008346:	4606      	mov	r6, r0
 8008348:	db01      	blt.n	800834e <_malloc_r+0x1a>
 800834a:	42a9      	cmp	r1, r5
 800834c:	d903      	bls.n	8008356 <_malloc_r+0x22>
 800834e:	230c      	movs	r3, #12
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	2000      	movs	r0, #0
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	f002 f8e8 	bl	800a52a <__malloc_lock>
 800835a:	4a21      	ldr	r2, [pc, #132]	; (80083e0 <_malloc_r+0xac>)
 800835c:	6814      	ldr	r4, [r2, #0]
 800835e:	4621      	mov	r1, r4
 8008360:	b991      	cbnz	r1, 8008388 <_malloc_r+0x54>
 8008362:	4c20      	ldr	r4, [pc, #128]	; (80083e4 <_malloc_r+0xb0>)
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	b91b      	cbnz	r3, 8008370 <_malloc_r+0x3c>
 8008368:	4630      	mov	r0, r6
 800836a:	f000 fdcb 	bl	8008f04 <_sbrk_r>
 800836e:	6020      	str	r0, [r4, #0]
 8008370:	4629      	mov	r1, r5
 8008372:	4630      	mov	r0, r6
 8008374:	f000 fdc6 	bl	8008f04 <_sbrk_r>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d124      	bne.n	80083c6 <_malloc_r+0x92>
 800837c:	230c      	movs	r3, #12
 800837e:	4630      	mov	r0, r6
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	f002 f8d3 	bl	800a52c <__malloc_unlock>
 8008386:	e7e4      	b.n	8008352 <_malloc_r+0x1e>
 8008388:	680b      	ldr	r3, [r1, #0]
 800838a:	1b5b      	subs	r3, r3, r5
 800838c:	d418      	bmi.n	80083c0 <_malloc_r+0x8c>
 800838e:	2b0b      	cmp	r3, #11
 8008390:	d90f      	bls.n	80083b2 <_malloc_r+0x7e>
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	18cc      	adds	r4, r1, r3
 8008396:	50cd      	str	r5, [r1, r3]
 8008398:	4630      	mov	r0, r6
 800839a:	f002 f8c7 	bl	800a52c <__malloc_unlock>
 800839e:	f104 000b 	add.w	r0, r4, #11
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	f020 0007 	bic.w	r0, r0, #7
 80083a8:	1ac3      	subs	r3, r0, r3
 80083aa:	d0d3      	beq.n	8008354 <_malloc_r+0x20>
 80083ac:	425a      	negs	r2, r3
 80083ae:	50e2      	str	r2, [r4, r3]
 80083b0:	e7d0      	b.n	8008354 <_malloc_r+0x20>
 80083b2:	684b      	ldr	r3, [r1, #4]
 80083b4:	428c      	cmp	r4, r1
 80083b6:	bf16      	itet	ne
 80083b8:	6063      	strne	r3, [r4, #4]
 80083ba:	6013      	streq	r3, [r2, #0]
 80083bc:	460c      	movne	r4, r1
 80083be:	e7eb      	b.n	8008398 <_malloc_r+0x64>
 80083c0:	460c      	mov	r4, r1
 80083c2:	6849      	ldr	r1, [r1, #4]
 80083c4:	e7cc      	b.n	8008360 <_malloc_r+0x2c>
 80083c6:	1cc4      	adds	r4, r0, #3
 80083c8:	f024 0403 	bic.w	r4, r4, #3
 80083cc:	42a0      	cmp	r0, r4
 80083ce:	d005      	beq.n	80083dc <_malloc_r+0xa8>
 80083d0:	1a21      	subs	r1, r4, r0
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 fd96 	bl	8008f04 <_sbrk_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	d0cf      	beq.n	800837c <_malloc_r+0x48>
 80083dc:	6025      	str	r5, [r4, #0]
 80083de:	e7db      	b.n	8008398 <_malloc_r+0x64>
 80083e0:	200005b4 	.word	0x200005b4
 80083e4:	200005b8 	.word	0x200005b8

080083e8 <__sfputc_r>:
 80083e8:	6893      	ldr	r3, [r2, #8]
 80083ea:	b410      	push	{r4}
 80083ec:	3b01      	subs	r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	6093      	str	r3, [r2, #8]
 80083f2:	da07      	bge.n	8008404 <__sfputc_r+0x1c>
 80083f4:	6994      	ldr	r4, [r2, #24]
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	db01      	blt.n	80083fe <__sfputc_r+0x16>
 80083fa:	290a      	cmp	r1, #10
 80083fc:	d102      	bne.n	8008404 <__sfputc_r+0x1c>
 80083fe:	bc10      	pop	{r4}
 8008400:	f000 bf8a 	b.w	8009318 <__swbuf_r>
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	1c58      	adds	r0, r3, #1
 8008408:	6010      	str	r0, [r2, #0]
 800840a:	7019      	strb	r1, [r3, #0]
 800840c:	4608      	mov	r0, r1
 800840e:	bc10      	pop	{r4}
 8008410:	4770      	bx	lr

08008412 <__sfputs_r>:
 8008412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	4614      	mov	r4, r2
 800841a:	18d5      	adds	r5, r2, r3
 800841c:	42ac      	cmp	r4, r5
 800841e:	d101      	bne.n	8008424 <__sfputs_r+0x12>
 8008420:	2000      	movs	r0, #0
 8008422:	e007      	b.n	8008434 <__sfputs_r+0x22>
 8008424:	463a      	mov	r2, r7
 8008426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffdc 	bl	80083e8 <__sfputc_r>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d1f3      	bne.n	800841c <__sfputs_r+0xa>
 8008434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008438 <_vfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	b09d      	sub	sp, #116	; 0x74
 8008440:	4617      	mov	r7, r2
 8008442:	461d      	mov	r5, r3
 8008444:	4606      	mov	r6, r0
 8008446:	b118      	cbz	r0, 8008450 <_vfiprintf_r+0x18>
 8008448:	6983      	ldr	r3, [r0, #24]
 800844a:	b90b      	cbnz	r3, 8008450 <_vfiprintf_r+0x18>
 800844c:	f001 ff58 	bl	800a300 <__sinit>
 8008450:	4b7c      	ldr	r3, [pc, #496]	; (8008644 <_vfiprintf_r+0x20c>)
 8008452:	429c      	cmp	r4, r3
 8008454:	d158      	bne.n	8008508 <_vfiprintf_r+0xd0>
 8008456:	6874      	ldr	r4, [r6, #4]
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	0718      	lsls	r0, r3, #28
 800845c:	d55e      	bpl.n	800851c <_vfiprintf_r+0xe4>
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d05b      	beq.n	800851c <_vfiprintf_r+0xe4>
 8008464:	2300      	movs	r3, #0
 8008466:	9309      	str	r3, [sp, #36]	; 0x24
 8008468:	2320      	movs	r3, #32
 800846a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800846e:	2330      	movs	r3, #48	; 0x30
 8008470:	f04f 0b01 	mov.w	fp, #1
 8008474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008478:	9503      	str	r5, [sp, #12]
 800847a:	46b8      	mov	r8, r7
 800847c:	4645      	mov	r5, r8
 800847e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008482:	b10b      	cbz	r3, 8008488 <_vfiprintf_r+0x50>
 8008484:	2b25      	cmp	r3, #37	; 0x25
 8008486:	d154      	bne.n	8008532 <_vfiprintf_r+0xfa>
 8008488:	ebb8 0a07 	subs.w	sl, r8, r7
 800848c:	d00b      	beq.n	80084a6 <_vfiprintf_r+0x6e>
 800848e:	4653      	mov	r3, sl
 8008490:	463a      	mov	r2, r7
 8008492:	4621      	mov	r1, r4
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ffbc 	bl	8008412 <__sfputs_r>
 800849a:	3001      	adds	r0, #1
 800849c:	f000 80c2 	beq.w	8008624 <_vfiprintf_r+0x1ec>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	4453      	add	r3, sl
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	f898 3000 	ldrb.w	r3, [r8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80ba 	beq.w	8008624 <_vfiprintf_r+0x1ec>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	9307      	str	r3, [sp, #28]
 80084be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c2:	931a      	str	r3, [sp, #104]	; 0x68
 80084c4:	46a8      	mov	r8, r5
 80084c6:	2205      	movs	r2, #5
 80084c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80084cc:	485e      	ldr	r0, [pc, #376]	; (8008648 <_vfiprintf_r+0x210>)
 80084ce:	f002 f813 	bl	800a4f8 <memchr>
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	bb78      	cbnz	r0, 8008536 <_vfiprintf_r+0xfe>
 80084d6:	06d9      	lsls	r1, r3, #27
 80084d8:	bf44      	itt	mi
 80084da:	2220      	movmi	r2, #32
 80084dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084e0:	071a      	lsls	r2, r3, #28
 80084e2:	bf44      	itt	mi
 80084e4:	222b      	movmi	r2, #43	; 0x2b
 80084e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084ea:	782a      	ldrb	r2, [r5, #0]
 80084ec:	2a2a      	cmp	r2, #42	; 0x2a
 80084ee:	d02a      	beq.n	8008546 <_vfiprintf_r+0x10e>
 80084f0:	46a8      	mov	r8, r5
 80084f2:	2000      	movs	r0, #0
 80084f4:	250a      	movs	r5, #10
 80084f6:	9a07      	ldr	r2, [sp, #28]
 80084f8:	4641      	mov	r1, r8
 80084fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084fe:	3b30      	subs	r3, #48	; 0x30
 8008500:	2b09      	cmp	r3, #9
 8008502:	d969      	bls.n	80085d8 <_vfiprintf_r+0x1a0>
 8008504:	b360      	cbz	r0, 8008560 <_vfiprintf_r+0x128>
 8008506:	e024      	b.n	8008552 <_vfiprintf_r+0x11a>
 8008508:	4b50      	ldr	r3, [pc, #320]	; (800864c <_vfiprintf_r+0x214>)
 800850a:	429c      	cmp	r4, r3
 800850c:	d101      	bne.n	8008512 <_vfiprintf_r+0xda>
 800850e:	68b4      	ldr	r4, [r6, #8]
 8008510:	e7a2      	b.n	8008458 <_vfiprintf_r+0x20>
 8008512:	4b4f      	ldr	r3, [pc, #316]	; (8008650 <_vfiprintf_r+0x218>)
 8008514:	429c      	cmp	r4, r3
 8008516:	bf08      	it	eq
 8008518:	68f4      	ldreq	r4, [r6, #12]
 800851a:	e79d      	b.n	8008458 <_vfiprintf_r+0x20>
 800851c:	4621      	mov	r1, r4
 800851e:	4630      	mov	r0, r6
 8008520:	f000 ff4c 	bl	80093bc <__swsetup_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	d09d      	beq.n	8008464 <_vfiprintf_r+0x2c>
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	b01d      	add	sp, #116	; 0x74
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	46a8      	mov	r8, r5
 8008534:	e7a2      	b.n	800847c <_vfiprintf_r+0x44>
 8008536:	4a44      	ldr	r2, [pc, #272]	; (8008648 <_vfiprintf_r+0x210>)
 8008538:	4645      	mov	r5, r8
 800853a:	1a80      	subs	r0, r0, r2
 800853c:	fa0b f000 	lsl.w	r0, fp, r0
 8008540:	4318      	orrs	r0, r3
 8008542:	9004      	str	r0, [sp, #16]
 8008544:	e7be      	b.n	80084c4 <_vfiprintf_r+0x8c>
 8008546:	9a03      	ldr	r2, [sp, #12]
 8008548:	1d11      	adds	r1, r2, #4
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	9103      	str	r1, [sp, #12]
 800854e:	2a00      	cmp	r2, #0
 8008550:	db01      	blt.n	8008556 <_vfiprintf_r+0x11e>
 8008552:	9207      	str	r2, [sp, #28]
 8008554:	e004      	b.n	8008560 <_vfiprintf_r+0x128>
 8008556:	4252      	negs	r2, r2
 8008558:	f043 0302 	orr.w	r3, r3, #2
 800855c:	9207      	str	r2, [sp, #28]
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	f898 3000 	ldrb.w	r3, [r8]
 8008564:	2b2e      	cmp	r3, #46	; 0x2e
 8008566:	d10e      	bne.n	8008586 <_vfiprintf_r+0x14e>
 8008568:	f898 3001 	ldrb.w	r3, [r8, #1]
 800856c:	2b2a      	cmp	r3, #42	; 0x2a
 800856e:	d138      	bne.n	80085e2 <_vfiprintf_r+0x1aa>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	f108 0802 	add.w	r8, r8, #2
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	9203      	str	r2, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfb8      	it	lt
 8008580:	f04f 33ff 	movlt.w	r3, #4294967295
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	4d33      	ldr	r5, [pc, #204]	; (8008654 <_vfiprintf_r+0x21c>)
 8008588:	2203      	movs	r2, #3
 800858a:	f898 1000 	ldrb.w	r1, [r8]
 800858e:	4628      	mov	r0, r5
 8008590:	f001 ffb2 	bl	800a4f8 <memchr>
 8008594:	b140      	cbz	r0, 80085a8 <_vfiprintf_r+0x170>
 8008596:	2340      	movs	r3, #64	; 0x40
 8008598:	1b40      	subs	r0, r0, r5
 800859a:	fa03 f000 	lsl.w	r0, r3, r0
 800859e:	9b04      	ldr	r3, [sp, #16]
 80085a0:	f108 0801 	add.w	r8, r8, #1
 80085a4:	4303      	orrs	r3, r0
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	f898 1000 	ldrb.w	r1, [r8]
 80085ac:	2206      	movs	r2, #6
 80085ae:	482a      	ldr	r0, [pc, #168]	; (8008658 <_vfiprintf_r+0x220>)
 80085b0:	f108 0701 	add.w	r7, r8, #1
 80085b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085b8:	f001 ff9e 	bl	800a4f8 <memchr>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d037      	beq.n	8008630 <_vfiprintf_r+0x1f8>
 80085c0:	4b26      	ldr	r3, [pc, #152]	; (800865c <_vfiprintf_r+0x224>)
 80085c2:	bb1b      	cbnz	r3, 800860c <_vfiprintf_r+0x1d4>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	3307      	adds	r3, #7
 80085c8:	f023 0307 	bic.w	r3, r3, #7
 80085cc:	3308      	adds	r3, #8
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	444b      	add	r3, r9
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	e750      	b.n	800847a <_vfiprintf_r+0x42>
 80085d8:	fb05 3202 	mla	r2, r5, r2, r3
 80085dc:	2001      	movs	r0, #1
 80085de:	4688      	mov	r8, r1
 80085e0:	e78a      	b.n	80084f8 <_vfiprintf_r+0xc0>
 80085e2:	2300      	movs	r3, #0
 80085e4:	250a      	movs	r5, #10
 80085e6:	4619      	mov	r1, r3
 80085e8:	f108 0801 	add.w	r8, r8, #1
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	4640      	mov	r0, r8
 80085f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f4:	3a30      	subs	r2, #48	; 0x30
 80085f6:	2a09      	cmp	r2, #9
 80085f8:	d903      	bls.n	8008602 <_vfiprintf_r+0x1ca>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0c3      	beq.n	8008586 <_vfiprintf_r+0x14e>
 80085fe:	9105      	str	r1, [sp, #20]
 8008600:	e7c1      	b.n	8008586 <_vfiprintf_r+0x14e>
 8008602:	fb05 2101 	mla	r1, r5, r1, r2
 8008606:	2301      	movs	r3, #1
 8008608:	4680      	mov	r8, r0
 800860a:	e7f0      	b.n	80085ee <_vfiprintf_r+0x1b6>
 800860c:	ab03      	add	r3, sp, #12
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	4622      	mov	r2, r4
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <_vfiprintf_r+0x228>)
 8008614:	a904      	add	r1, sp, #16
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f8b6 	bl	8008788 <_printf_float>
 800861c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008620:	4681      	mov	r9, r0
 8008622:	d1d5      	bne.n	80085d0 <_vfiprintf_r+0x198>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	065b      	lsls	r3, r3, #25
 8008628:	f53f af7e 	bmi.w	8008528 <_vfiprintf_r+0xf0>
 800862c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862e:	e77d      	b.n	800852c <_vfiprintf_r+0xf4>
 8008630:	ab03      	add	r3, sp, #12
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	4622      	mov	r2, r4
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <_vfiprintf_r+0x228>)
 8008638:	a904      	add	r1, sp, #16
 800863a:	4630      	mov	r0, r6
 800863c:	f000 fb50 	bl	8008ce0 <_printf_i>
 8008640:	e7ec      	b.n	800861c <_vfiprintf_r+0x1e4>
 8008642:	bf00      	nop
 8008644:	0800b520 	.word	0x0800b520
 8008648:	0800ae18 	.word	0x0800ae18
 800864c:	0800b540 	.word	0x0800b540
 8008650:	0800b500 	.word	0x0800b500
 8008654:	0800ae1e 	.word	0x0800ae1e
 8008658:	0800ae22 	.word	0x0800ae22
 800865c:	08008789 	.word	0x08008789
 8008660:	08008413 	.word	0x08008413

08008664 <__cvt>:
 8008664:	2b00      	cmp	r3, #0
 8008666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866a:	461e      	mov	r6, r3
 800866c:	bfbb      	ittet	lt
 800866e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008672:	461e      	movlt	r6, r3
 8008674:	2300      	movge	r3, #0
 8008676:	232d      	movlt	r3, #45	; 0x2d
 8008678:	b088      	sub	sp, #32
 800867a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800867c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008680:	f027 0720 	bic.w	r7, r7, #32
 8008684:	2f46      	cmp	r7, #70	; 0x46
 8008686:	4614      	mov	r4, r2
 8008688:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800868a:	700b      	strb	r3, [r1, #0]
 800868c:	d004      	beq.n	8008698 <__cvt+0x34>
 800868e:	2f45      	cmp	r7, #69	; 0x45
 8008690:	d100      	bne.n	8008694 <__cvt+0x30>
 8008692:	3501      	adds	r5, #1
 8008694:	2302      	movs	r3, #2
 8008696:	e000      	b.n	800869a <__cvt+0x36>
 8008698:	2303      	movs	r3, #3
 800869a:	aa07      	add	r2, sp, #28
 800869c:	9204      	str	r2, [sp, #16]
 800869e:	aa06      	add	r2, sp, #24
 80086a0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086a4:	e9cd 3500 	strd	r3, r5, [sp]
 80086a8:	4622      	mov	r2, r4
 80086aa:	4633      	mov	r3, r6
 80086ac:	f000 ff84 	bl	80095b8 <_dtoa_r>
 80086b0:	2f47      	cmp	r7, #71	; 0x47
 80086b2:	4680      	mov	r8, r0
 80086b4:	d102      	bne.n	80086bc <__cvt+0x58>
 80086b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b8:	07db      	lsls	r3, r3, #31
 80086ba:	d526      	bpl.n	800870a <__cvt+0xa6>
 80086bc:	2f46      	cmp	r7, #70	; 0x46
 80086be:	eb08 0905 	add.w	r9, r8, r5
 80086c2:	d111      	bne.n	80086e8 <__cvt+0x84>
 80086c4:	f898 3000 	ldrb.w	r3, [r8]
 80086c8:	2b30      	cmp	r3, #48	; 0x30
 80086ca:	d10a      	bne.n	80086e2 <__cvt+0x7e>
 80086cc:	2200      	movs	r2, #0
 80086ce:	2300      	movs	r3, #0
 80086d0:	4620      	mov	r0, r4
 80086d2:	4631      	mov	r1, r6
 80086d4:	f7f8 f968 	bl	80009a8 <__aeabi_dcmpeq>
 80086d8:	b918      	cbnz	r0, 80086e2 <__cvt+0x7e>
 80086da:	f1c5 0501 	rsb	r5, r5, #1
 80086de:	f8ca 5000 	str.w	r5, [sl]
 80086e2:	f8da 3000 	ldr.w	r3, [sl]
 80086e6:	4499      	add	r9, r3
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	4620      	mov	r0, r4
 80086ee:	4631      	mov	r1, r6
 80086f0:	f7f8 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80086f4:	b938      	cbnz	r0, 8008706 <__cvt+0xa2>
 80086f6:	2230      	movs	r2, #48	; 0x30
 80086f8:	9b07      	ldr	r3, [sp, #28]
 80086fa:	454b      	cmp	r3, r9
 80086fc:	d205      	bcs.n	800870a <__cvt+0xa6>
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	9107      	str	r1, [sp, #28]
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e7f8      	b.n	80086f8 <__cvt+0x94>
 8008706:	f8cd 901c 	str.w	r9, [sp, #28]
 800870a:	4640      	mov	r0, r8
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008710:	eba3 0308 	sub.w	r3, r3, r8
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	b008      	add	sp, #32
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800871c <__exponent>:
 800871c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800871e:	2900      	cmp	r1, #0
 8008720:	bfb4      	ite	lt
 8008722:	232d      	movlt	r3, #45	; 0x2d
 8008724:	232b      	movge	r3, #43	; 0x2b
 8008726:	4604      	mov	r4, r0
 8008728:	bfb8      	it	lt
 800872a:	4249      	neglt	r1, r1
 800872c:	2909      	cmp	r1, #9
 800872e:	f804 2b02 	strb.w	r2, [r4], #2
 8008732:	7043      	strb	r3, [r0, #1]
 8008734:	dd21      	ble.n	800877a <__exponent+0x5e>
 8008736:	f10d 0307 	add.w	r3, sp, #7
 800873a:	461f      	mov	r7, r3
 800873c:	260a      	movs	r6, #10
 800873e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008742:	fb06 1115 	mls	r1, r6, r5, r1
 8008746:	2d09      	cmp	r5, #9
 8008748:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800874c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008750:	f103 32ff 	add.w	r2, r3, #4294967295
 8008754:	4629      	mov	r1, r5
 8008756:	dc09      	bgt.n	800876c <__exponent+0x50>
 8008758:	3130      	adds	r1, #48	; 0x30
 800875a:	3b02      	subs	r3, #2
 800875c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008760:	42bb      	cmp	r3, r7
 8008762:	4622      	mov	r2, r4
 8008764:	d304      	bcc.n	8008770 <__exponent+0x54>
 8008766:	1a10      	subs	r0, r2, r0
 8008768:	b003      	add	sp, #12
 800876a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876c:	4613      	mov	r3, r2
 800876e:	e7e6      	b.n	800873e <__exponent+0x22>
 8008770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008774:	f804 2b01 	strb.w	r2, [r4], #1
 8008778:	e7f2      	b.n	8008760 <__exponent+0x44>
 800877a:	2330      	movs	r3, #48	; 0x30
 800877c:	4419      	add	r1, r3
 800877e:	7083      	strb	r3, [r0, #2]
 8008780:	1d02      	adds	r2, r0, #4
 8008782:	70c1      	strb	r1, [r0, #3]
 8008784:	e7ef      	b.n	8008766 <__exponent+0x4a>
	...

08008788 <_printf_float>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b091      	sub	sp, #68	; 0x44
 800878e:	460c      	mov	r4, r1
 8008790:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008792:	4693      	mov	fp, r2
 8008794:	461e      	mov	r6, r3
 8008796:	4605      	mov	r5, r0
 8008798:	f001 fe3c 	bl	800a414 <_localeconv_r>
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	9309      	str	r3, [sp, #36]	; 0x24
 80087a2:	f7f7 fcd5 	bl	8000150 <strlen>
 80087a6:	2300      	movs	r3, #0
 80087a8:	930e      	str	r3, [sp, #56]	; 0x38
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	900a      	str	r0, [sp, #40]	; 0x28
 80087ae:	3307      	adds	r3, #7
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	f103 0208 	add.w	r2, r3, #8
 80087b8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80087bc:	f8d4 a000 	ldr.w	sl, [r4]
 80087c0:	603a      	str	r2, [r7, #0]
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087ca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80087ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	4ba6      	ldr	r3, [pc, #664]	; (8008a74 <_printf_float+0x2ec>)
 80087da:	4638      	mov	r0, r7
 80087dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087de:	f7f8 f915 	bl	8000a0c <__aeabi_dcmpun>
 80087e2:	bb68      	cbnz	r0, 8008840 <_printf_float+0xb8>
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	4ba2      	ldr	r3, [pc, #648]	; (8008a74 <_printf_float+0x2ec>)
 80087ea:	4638      	mov	r0, r7
 80087ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ee:	f7f8 f8ef 	bl	80009d0 <__aeabi_dcmple>
 80087f2:	bb28      	cbnz	r0, 8008840 <_printf_float+0xb8>
 80087f4:	2200      	movs	r2, #0
 80087f6:	2300      	movs	r3, #0
 80087f8:	4638      	mov	r0, r7
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f8 f8de 	bl	80009bc <__aeabi_dcmplt>
 8008800:	b110      	cbz	r0, 8008808 <_printf_float+0x80>
 8008802:	232d      	movs	r3, #45	; 0x2d
 8008804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008808:	4f9b      	ldr	r7, [pc, #620]	; (8008a78 <_printf_float+0x2f0>)
 800880a:	4b9c      	ldr	r3, [pc, #624]	; (8008a7c <_printf_float+0x2f4>)
 800880c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008810:	bf98      	it	ls
 8008812:	461f      	movls	r7, r3
 8008814:	2303      	movs	r3, #3
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	f02a 0304 	bic.w	r3, sl, #4
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	9600      	str	r6, [sp, #0]
 8008824:	465b      	mov	r3, fp
 8008826:	aa0f      	add	r2, sp, #60	; 0x3c
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f9e2 	bl	8008bf4 <_printf_common>
 8008830:	3001      	adds	r0, #1
 8008832:	f040 8090 	bne.w	8008956 <_printf_float+0x1ce>
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	b011      	add	sp, #68	; 0x44
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	463a      	mov	r2, r7
 8008842:	464b      	mov	r3, r9
 8008844:	4638      	mov	r0, r7
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f8e0 	bl	8000a0c <__aeabi_dcmpun>
 800884c:	b110      	cbz	r0, 8008854 <_printf_float+0xcc>
 800884e:	4f8c      	ldr	r7, [pc, #560]	; (8008a80 <_printf_float+0x2f8>)
 8008850:	4b8c      	ldr	r3, [pc, #560]	; (8008a84 <_printf_float+0x2fc>)
 8008852:	e7db      	b.n	800880c <_printf_float+0x84>
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800885a:	1c59      	adds	r1, r3, #1
 800885c:	a80d      	add	r0, sp, #52	; 0x34
 800885e:	a90e      	add	r1, sp, #56	; 0x38
 8008860:	d140      	bne.n	80088e4 <_printf_float+0x15c>
 8008862:	2306      	movs	r3, #6
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	f04f 0c00 	mov.w	ip, #0
 800886a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800886e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	463a      	mov	r2, r7
 800887e:	464b      	mov	r3, r9
 8008880:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008884:	4628      	mov	r0, r5
 8008886:	f7ff feed 	bl	8008664 <__cvt>
 800888a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800888e:	2b47      	cmp	r3, #71	; 0x47
 8008890:	4607      	mov	r7, r0
 8008892:	d109      	bne.n	80088a8 <_printf_float+0x120>
 8008894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008896:	1cd8      	adds	r0, r3, #3
 8008898:	db02      	blt.n	80088a0 <_printf_float+0x118>
 800889a:	6862      	ldr	r2, [r4, #4]
 800889c:	4293      	cmp	r3, r2
 800889e:	dd47      	ble.n	8008930 <_printf_float+0x1a8>
 80088a0:	f1a8 0802 	sub.w	r8, r8, #2
 80088a4:	fa5f f888 	uxtb.w	r8, r8
 80088a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80088ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088ae:	d824      	bhi.n	80088fa <_printf_float+0x172>
 80088b0:	3901      	subs	r1, #1
 80088b2:	4642      	mov	r2, r8
 80088b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088b8:	910d      	str	r1, [sp, #52]	; 0x34
 80088ba:	f7ff ff2f 	bl	800871c <__exponent>
 80088be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088c0:	4681      	mov	r9, r0
 80088c2:	1813      	adds	r3, r2, r0
 80088c4:	2a01      	cmp	r2, #1
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	dc02      	bgt.n	80088d0 <_printf_float+0x148>
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	07d1      	lsls	r1, r2, #31
 80088ce:	d501      	bpl.n	80088d4 <_printf_float+0x14c>
 80088d0:	3301      	adds	r3, #1
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0a2      	beq.n	8008822 <_printf_float+0x9a>
 80088dc:	232d      	movs	r3, #45	; 0x2d
 80088de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e2:	e79e      	b.n	8008822 <_printf_float+0x9a>
 80088e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80088e8:	f000 816e 	beq.w	8008bc8 <_printf_float+0x440>
 80088ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088f0:	d1b9      	bne.n	8008866 <_printf_float+0xde>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1b7      	bne.n	8008866 <_printf_float+0xde>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7b4      	b.n	8008864 <_printf_float+0xdc>
 80088fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80088fe:	d119      	bne.n	8008934 <_printf_float+0x1ac>
 8008900:	2900      	cmp	r1, #0
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	dd0c      	ble.n	8008920 <_printf_float+0x198>
 8008906:	6121      	str	r1, [r4, #16]
 8008908:	b913      	cbnz	r3, 8008910 <_printf_float+0x188>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	07d2      	lsls	r2, r2, #31
 800890e:	d502      	bpl.n	8008916 <_printf_float+0x18e>
 8008910:	3301      	adds	r3, #1
 8008912:	440b      	add	r3, r1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008918:	f04f 0900 	mov.w	r9, #0
 800891c:	65a3      	str	r3, [r4, #88]	; 0x58
 800891e:	e7d9      	b.n	80088d4 <_printf_float+0x14c>
 8008920:	b913      	cbnz	r3, 8008928 <_printf_float+0x1a0>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	07d0      	lsls	r0, r2, #31
 8008926:	d501      	bpl.n	800892c <_printf_float+0x1a4>
 8008928:	3302      	adds	r3, #2
 800892a:	e7f3      	b.n	8008914 <_printf_float+0x18c>
 800892c:	2301      	movs	r3, #1
 800892e:	e7f1      	b.n	8008914 <_printf_float+0x18c>
 8008930:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008934:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008938:	4293      	cmp	r3, r2
 800893a:	db05      	blt.n	8008948 <_printf_float+0x1c0>
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	6123      	str	r3, [r4, #16]
 8008940:	07d1      	lsls	r1, r2, #31
 8008942:	d5e8      	bpl.n	8008916 <_printf_float+0x18e>
 8008944:	3301      	adds	r3, #1
 8008946:	e7e5      	b.n	8008914 <_printf_float+0x18c>
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfcc      	ite	gt
 800894c:	2301      	movgt	r3, #1
 800894e:	f1c3 0302 	rsble	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	e7de      	b.n	8008914 <_printf_float+0x18c>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	055a      	lsls	r2, r3, #21
 800895a:	d407      	bmi.n	800896c <_printf_float+0x1e4>
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	463a      	mov	r2, r7
 8008960:	4659      	mov	r1, fp
 8008962:	4628      	mov	r0, r5
 8008964:	47b0      	blx	r6
 8008966:	3001      	adds	r0, #1
 8008968:	d129      	bne.n	80089be <_printf_float+0x236>
 800896a:	e764      	b.n	8008836 <_printf_float+0xae>
 800896c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008970:	f240 80d7 	bls.w	8008b22 <_printf_float+0x39a>
 8008974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	f7f8 f814 	bl	80009a8 <__aeabi_dcmpeq>
 8008980:	b388      	cbz	r0, 80089e6 <_printf_float+0x25e>
 8008982:	2301      	movs	r3, #1
 8008984:	4a40      	ldr	r2, [pc, #256]	; (8008a88 <_printf_float+0x300>)
 8008986:	4659      	mov	r1, fp
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	3001      	adds	r0, #1
 800898e:	f43f af52 	beq.w	8008836 <_printf_float+0xae>
 8008992:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008996:	429a      	cmp	r2, r3
 8008998:	db02      	blt.n	80089a0 <_printf_float+0x218>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	07d8      	lsls	r0, r3, #31
 800899e:	d50e      	bpl.n	80089be <_printf_float+0x236>
 80089a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a4:	4659      	mov	r1, fp
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b0      	blx	r6
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af43 	beq.w	8008836 <_printf_float+0xae>
 80089b0:	2700      	movs	r7, #0
 80089b2:	f104 081a 	add.w	r8, r4, #26
 80089b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b8:	3b01      	subs	r3, #1
 80089ba:	42bb      	cmp	r3, r7
 80089bc:	dc09      	bgt.n	80089d2 <_printf_float+0x24a>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	079f      	lsls	r7, r3, #30
 80089c2:	f100 80fd 	bmi.w	8008bc0 <_printf_float+0x438>
 80089c6:	68e0      	ldr	r0, [r4, #12]
 80089c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ca:	4298      	cmp	r0, r3
 80089cc:	bfb8      	it	lt
 80089ce:	4618      	movlt	r0, r3
 80089d0:	e733      	b.n	800883a <_printf_float+0xb2>
 80089d2:	2301      	movs	r3, #1
 80089d4:	4642      	mov	r2, r8
 80089d6:	4659      	mov	r1, fp
 80089d8:	4628      	mov	r0, r5
 80089da:	47b0      	blx	r6
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f af2a 	beq.w	8008836 <_printf_float+0xae>
 80089e2:	3701      	adds	r7, #1
 80089e4:	e7e7      	b.n	80089b6 <_printf_float+0x22e>
 80089e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dc2b      	bgt.n	8008a44 <_printf_float+0x2bc>
 80089ec:	2301      	movs	r3, #1
 80089ee:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <_printf_float+0x300>)
 80089f0:	4659      	mov	r1, fp
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b0      	blx	r6
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af1d 	beq.w	8008836 <_printf_float+0xae>
 80089fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fe:	b923      	cbnz	r3, 8008a0a <_printf_float+0x282>
 8008a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a02:	b913      	cbnz	r3, 8008a0a <_printf_float+0x282>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	d5d9      	bpl.n	80089be <_printf_float+0x236>
 8008a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a0e:	4659      	mov	r1, fp
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f af0e 	beq.w	8008836 <_printf_float+0xae>
 8008a1a:	f04f 0800 	mov.w	r8, #0
 8008a1e:	f104 091a 	add.w	r9, r4, #26
 8008a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a24:	425b      	negs	r3, r3
 8008a26:	4543      	cmp	r3, r8
 8008a28:	dc01      	bgt.n	8008a2e <_printf_float+0x2a6>
 8008a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a2c:	e797      	b.n	800895e <_printf_float+0x1d6>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	464a      	mov	r2, r9
 8008a32:	4659      	mov	r1, fp
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b0      	blx	r6
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f aefc 	beq.w	8008836 <_printf_float+0xae>
 8008a3e:	f108 0801 	add.w	r8, r8, #1
 8008a42:	e7ee      	b.n	8008a22 <_printf_float+0x29a>
 8008a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	bfa8      	it	ge
 8008a4c:	461a      	movge	r2, r3
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	4690      	mov	r8, r2
 8008a52:	dd07      	ble.n	8008a64 <_printf_float+0x2dc>
 8008a54:	4613      	mov	r3, r2
 8008a56:	4659      	mov	r1, fp
 8008a58:	463a      	mov	r2, r7
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b0      	blx	r6
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f aee9 	beq.w	8008836 <_printf_float+0xae>
 8008a64:	f104 031a 	add.w	r3, r4, #26
 8008a68:	f04f 0a00 	mov.w	sl, #0
 8008a6c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a72:	e015      	b.n	8008aa0 <_printf_float+0x318>
 8008a74:	7fefffff 	.word	0x7fefffff
 8008a78:	0800ae2d 	.word	0x0800ae2d
 8008a7c:	0800ae29 	.word	0x0800ae29
 8008a80:	0800ae35 	.word	0x0800ae35
 8008a84:	0800ae31 	.word	0x0800ae31
 8008a88:	0800ae39 	.word	0x0800ae39
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a90:	4659      	mov	r1, fp
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b0      	blx	r6
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f aecd 	beq.w	8008836 <_printf_float+0xae>
 8008a9c:	f10a 0a01 	add.w	sl, sl, #1
 8008aa0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008aa4:	eba9 0308 	sub.w	r3, r9, r8
 8008aa8:	4553      	cmp	r3, sl
 8008aaa:	dcef      	bgt.n	8008a8c <_printf_float+0x304>
 8008aac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	444f      	add	r7, r9
 8008ab4:	db14      	blt.n	8008ae0 <_printf_float+0x358>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	07da      	lsls	r2, r3, #31
 8008aba:	d411      	bmi.n	8008ae0 <_printf_float+0x358>
 8008abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008abe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ac0:	eba3 0209 	sub.w	r2, r3, r9
 8008ac4:	eba3 0901 	sub.w	r9, r3, r1
 8008ac8:	4591      	cmp	r9, r2
 8008aca:	bfa8      	it	ge
 8008acc:	4691      	movge	r9, r2
 8008ace:	f1b9 0f00 	cmp.w	r9, #0
 8008ad2:	dc0d      	bgt.n	8008af0 <_printf_float+0x368>
 8008ad4:	2700      	movs	r7, #0
 8008ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ada:	f104 081a 	add.w	r8, r4, #26
 8008ade:	e018      	b.n	8008b12 <_printf_float+0x38a>
 8008ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ae4:	4659      	mov	r1, fp
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	3001      	adds	r0, #1
 8008aec:	d1e6      	bne.n	8008abc <_printf_float+0x334>
 8008aee:	e6a2      	b.n	8008836 <_printf_float+0xae>
 8008af0:	464b      	mov	r3, r9
 8008af2:	463a      	mov	r2, r7
 8008af4:	4659      	mov	r1, fp
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b0      	blx	r6
 8008afa:	3001      	adds	r0, #1
 8008afc:	d1ea      	bne.n	8008ad4 <_printf_float+0x34c>
 8008afe:	e69a      	b.n	8008836 <_printf_float+0xae>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4642      	mov	r2, r8
 8008b04:	4659      	mov	r1, fp
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b0      	blx	r6
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f ae93 	beq.w	8008836 <_printf_float+0xae>
 8008b10:	3701      	adds	r7, #1
 8008b12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	eba3 0309 	sub.w	r3, r3, r9
 8008b1c:	42bb      	cmp	r3, r7
 8008b1e:	dcef      	bgt.n	8008b00 <_printf_float+0x378>
 8008b20:	e74d      	b.n	80089be <_printf_float+0x236>
 8008b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b24:	2a01      	cmp	r2, #1
 8008b26:	dc01      	bgt.n	8008b2c <_printf_float+0x3a4>
 8008b28:	07db      	lsls	r3, r3, #31
 8008b2a:	d538      	bpl.n	8008b9e <_printf_float+0x416>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	463a      	mov	r2, r7
 8008b30:	4659      	mov	r1, fp
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b0      	blx	r6
 8008b36:	3001      	adds	r0, #1
 8008b38:	f43f ae7d 	beq.w	8008836 <_printf_float+0xae>
 8008b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b40:	4659      	mov	r1, fp
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b0      	blx	r6
 8008b46:	3001      	adds	r0, #1
 8008b48:	f107 0701 	add.w	r7, r7, #1
 8008b4c:	f43f ae73 	beq.w	8008836 <_printf_float+0xae>
 8008b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b56:	2200      	movs	r2, #0
 8008b58:	f103 38ff 	add.w	r8, r3, #4294967295
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f7f7 ff23 	bl	80009a8 <__aeabi_dcmpeq>
 8008b62:	b9c0      	cbnz	r0, 8008b96 <_printf_float+0x40e>
 8008b64:	4643      	mov	r3, r8
 8008b66:	463a      	mov	r2, r7
 8008b68:	4659      	mov	r1, fp
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b0      	blx	r6
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d10d      	bne.n	8008b8e <_printf_float+0x406>
 8008b72:	e660      	b.n	8008836 <_printf_float+0xae>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4642      	mov	r2, r8
 8008b78:	4659      	mov	r1, fp
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b0      	blx	r6
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f ae59 	beq.w	8008836 <_printf_float+0xae>
 8008b84:	3701      	adds	r7, #1
 8008b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	42bb      	cmp	r3, r7
 8008b8c:	dcf2      	bgt.n	8008b74 <_printf_float+0x3ec>
 8008b8e:	464b      	mov	r3, r9
 8008b90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b94:	e6e4      	b.n	8008960 <_printf_float+0x1d8>
 8008b96:	2700      	movs	r7, #0
 8008b98:	f104 081a 	add.w	r8, r4, #26
 8008b9c:	e7f3      	b.n	8008b86 <_printf_float+0x3fe>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7e1      	b.n	8008b66 <_printf_float+0x3de>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	4659      	mov	r1, fp
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	3001      	adds	r0, #1
 8008bae:	f43f ae42 	beq.w	8008836 <_printf_float+0xae>
 8008bb2:	3701      	adds	r7, #1
 8008bb4:	68e3      	ldr	r3, [r4, #12]
 8008bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	42bb      	cmp	r3, r7
 8008bbc:	dcf1      	bgt.n	8008ba2 <_printf_float+0x41a>
 8008bbe:	e702      	b.n	80089c6 <_printf_float+0x23e>
 8008bc0:	2700      	movs	r7, #0
 8008bc2:	f104 0819 	add.w	r8, r4, #25
 8008bc6:	e7f5      	b.n	8008bb4 <_printf_float+0x42c>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f43f ae94 	beq.w	80088f6 <_printf_float+0x16e>
 8008bce:	f04f 0c00 	mov.w	ip, #0
 8008bd2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008bd6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008bda:	6022      	str	r2, [r4, #0]
 8008bdc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008be0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	463a      	mov	r2, r7
 8008be8:	464b      	mov	r3, r9
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7ff fd3a 	bl	8008664 <__cvt>
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	e64f      	b.n	8008894 <_printf_float+0x10c>

08008bf4 <_printf_common>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	4691      	mov	r9, r2
 8008bfa:	461f      	mov	r7, r3
 8008bfc:	688a      	ldr	r2, [r1, #8]
 8008bfe:	690b      	ldr	r3, [r1, #16]
 8008c00:	4606      	mov	r6, r0
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bfb8      	it	lt
 8008c06:	4613      	movlt	r3, r2
 8008c08:	f8c9 3000 	str.w	r3, [r9]
 8008c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c10:	460c      	mov	r4, r1
 8008c12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c16:	b112      	cbz	r2, 8008c1e <_printf_common+0x2a>
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f8c9 3000 	str.w	r3, [r9]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	0699      	lsls	r1, r3, #26
 8008c22:	bf42      	ittt	mi
 8008c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c28:	3302      	addmi	r3, #2
 8008c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8008c2e:	6825      	ldr	r5, [r4, #0]
 8008c30:	f015 0506 	ands.w	r5, r5, #6
 8008c34:	d107      	bne.n	8008c46 <_printf_common+0x52>
 8008c36:	f104 0a19 	add.w	sl, r4, #25
 8008c3a:	68e3      	ldr	r3, [r4, #12]
 8008c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	42ab      	cmp	r3, r5
 8008c44:	dc29      	bgt.n	8008c9a <_printf_common+0xa6>
 8008c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	3300      	adds	r3, #0
 8008c4e:	bf18      	it	ne
 8008c50:	2301      	movne	r3, #1
 8008c52:	0692      	lsls	r2, r2, #26
 8008c54:	d42e      	bmi.n	8008cb4 <_printf_common+0xc0>
 8008c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	47c0      	blx	r8
 8008c60:	3001      	adds	r0, #1
 8008c62:	d021      	beq.n	8008ca8 <_printf_common+0xb4>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	68e5      	ldr	r5, [r4, #12]
 8008c68:	f003 0306 	and.w	r3, r3, #6
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	bf18      	it	ne
 8008c70:	2500      	movne	r5, #0
 8008c72:	f8d9 2000 	ldr.w	r2, [r9]
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	bf08      	it	eq
 8008c7c:	1aad      	subeq	r5, r5, r2
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	6922      	ldr	r2, [r4, #16]
 8008c82:	bf08      	it	eq
 8008c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	bfc4      	itt	gt
 8008c8c:	1a9b      	subgt	r3, r3, r2
 8008c8e:	18ed      	addgt	r5, r5, r3
 8008c90:	341a      	adds	r4, #26
 8008c92:	454d      	cmp	r5, r9
 8008c94:	d11a      	bne.n	8008ccc <_printf_common+0xd8>
 8008c96:	2000      	movs	r0, #0
 8008c98:	e008      	b.n	8008cac <_printf_common+0xb8>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4652      	mov	r2, sl
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	47c0      	blx	r8
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d103      	bne.n	8008cb0 <_printf_common+0xbc>
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	e7c2      	b.n	8008c3a <_printf_common+0x46>
 8008cb4:	2030      	movs	r0, #48	; 0x30
 8008cb6:	18e1      	adds	r1, r4, r3
 8008cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cc2:	4422      	add	r2, r4
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cca:	e7c4      	b.n	8008c56 <_printf_common+0x62>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4622      	mov	r2, r4
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	47c0      	blx	r8
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d0e6      	beq.n	8008ca8 <_printf_common+0xb4>
 8008cda:	f109 0901 	add.w	r9, r9, #1
 8008cde:	e7d8      	b.n	8008c92 <_printf_common+0x9e>

08008ce0 <_printf_i>:
 8008ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ce8:	460c      	mov	r4, r1
 8008cea:	7e09      	ldrb	r1, [r1, #24]
 8008cec:	b085      	sub	sp, #20
 8008cee:	296e      	cmp	r1, #110	; 0x6e
 8008cf0:	4617      	mov	r7, r2
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	4698      	mov	r8, r3
 8008cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cf8:	f000 80b3 	beq.w	8008e62 <_printf_i+0x182>
 8008cfc:	d822      	bhi.n	8008d44 <_printf_i+0x64>
 8008cfe:	2963      	cmp	r1, #99	; 0x63
 8008d00:	d036      	beq.n	8008d70 <_printf_i+0x90>
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x3a>
 8008d04:	2900      	cmp	r1, #0
 8008d06:	f000 80b9 	beq.w	8008e7c <_printf_i+0x19c>
 8008d0a:	2958      	cmp	r1, #88	; 0x58
 8008d0c:	f000 8083 	beq.w	8008e16 <_printf_i+0x136>
 8008d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d18:	e032      	b.n	8008d80 <_printf_i+0xa0>
 8008d1a:	2964      	cmp	r1, #100	; 0x64
 8008d1c:	d001      	beq.n	8008d22 <_printf_i+0x42>
 8008d1e:	2969      	cmp	r1, #105	; 0x69
 8008d20:	d1f6      	bne.n	8008d10 <_printf_i+0x30>
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	6813      	ldr	r3, [r2, #0]
 8008d26:	0605      	lsls	r5, r0, #24
 8008d28:	f103 0104 	add.w	r1, r3, #4
 8008d2c:	d52a      	bpl.n	8008d84 <_printf_i+0xa4>
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da03      	bge.n	8008d3e <_printf_i+0x5e>
 8008d36:	222d      	movs	r2, #45	; 0x2d
 8008d38:	425b      	negs	r3, r3
 8008d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d3e:	486f      	ldr	r0, [pc, #444]	; (8008efc <_printf_i+0x21c>)
 8008d40:	220a      	movs	r2, #10
 8008d42:	e039      	b.n	8008db8 <_printf_i+0xd8>
 8008d44:	2973      	cmp	r1, #115	; 0x73
 8008d46:	f000 809d 	beq.w	8008e84 <_printf_i+0x1a4>
 8008d4a:	d808      	bhi.n	8008d5e <_printf_i+0x7e>
 8008d4c:	296f      	cmp	r1, #111	; 0x6f
 8008d4e:	d020      	beq.n	8008d92 <_printf_i+0xb2>
 8008d50:	2970      	cmp	r1, #112	; 0x70
 8008d52:	d1dd      	bne.n	8008d10 <_printf_i+0x30>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	f043 0320 	orr.w	r3, r3, #32
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	e003      	b.n	8008d66 <_printf_i+0x86>
 8008d5e:	2975      	cmp	r1, #117	; 0x75
 8008d60:	d017      	beq.n	8008d92 <_printf_i+0xb2>
 8008d62:	2978      	cmp	r1, #120	; 0x78
 8008d64:	d1d4      	bne.n	8008d10 <_printf_i+0x30>
 8008d66:	2378      	movs	r3, #120	; 0x78
 8008d68:	4865      	ldr	r0, [pc, #404]	; (8008f00 <_printf_i+0x220>)
 8008d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d6e:	e055      	b.n	8008e1c <_printf_i+0x13c>
 8008d70:	6813      	ldr	r3, [r2, #0]
 8008d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d76:	1d19      	adds	r1, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6011      	str	r1, [r2, #0]
 8008d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d80:	2301      	movs	r3, #1
 8008d82:	e08c      	b.n	8008e9e <_printf_i+0x1be>
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d8a:	6011      	str	r1, [r2, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	b21b      	sxthne	r3, r3
 8008d90:	e7cf      	b.n	8008d32 <_printf_i+0x52>
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	6825      	ldr	r5, [r4, #0]
 8008d96:	1d18      	adds	r0, r3, #4
 8008d98:	6010      	str	r0, [r2, #0]
 8008d9a:	0628      	lsls	r0, r5, #24
 8008d9c:	d501      	bpl.n	8008da2 <_printf_i+0xc2>
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	e002      	b.n	8008da8 <_printf_i+0xc8>
 8008da2:	0668      	lsls	r0, r5, #25
 8008da4:	d5fb      	bpl.n	8008d9e <_printf_i+0xbe>
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	296f      	cmp	r1, #111	; 0x6f
 8008daa:	bf14      	ite	ne
 8008dac:	220a      	movne	r2, #10
 8008dae:	2208      	moveq	r2, #8
 8008db0:	4852      	ldr	r0, [pc, #328]	; (8008efc <_printf_i+0x21c>)
 8008db2:	2100      	movs	r1, #0
 8008db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008db8:	6865      	ldr	r5, [r4, #4]
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	60a5      	str	r5, [r4, #8]
 8008dbe:	f2c0 8095 	blt.w	8008eec <_printf_i+0x20c>
 8008dc2:	6821      	ldr	r1, [r4, #0]
 8008dc4:	f021 0104 	bic.w	r1, r1, #4
 8008dc8:	6021      	str	r1, [r4, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d13d      	bne.n	8008e4a <_printf_i+0x16a>
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	f040 808e 	bne.w	8008ef0 <_printf_i+0x210>
 8008dd4:	4665      	mov	r5, ip
 8008dd6:	2a08      	cmp	r2, #8
 8008dd8:	d10b      	bne.n	8008df2 <_printf_i+0x112>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	07db      	lsls	r3, r3, #31
 8008dde:	d508      	bpl.n	8008df2 <_printf_i+0x112>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	6862      	ldr	r2, [r4, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	bfde      	ittt	le
 8008de8:	2330      	movle	r3, #48	; 0x30
 8008dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008df2:	ebac 0305 	sub.w	r3, ip, r5
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	f8cd 8000 	str.w	r8, [sp]
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	aa03      	add	r2, sp, #12
 8008e00:	4621      	mov	r1, r4
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7ff fef6 	bl	8008bf4 <_printf_common>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d14d      	bne.n	8008ea8 <_printf_i+0x1c8>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	b005      	add	sp, #20
 8008e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e16:	4839      	ldr	r0, [pc, #228]	; (8008efc <_printf_i+0x21c>)
 8008e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e1c:	6813      	ldr	r3, [r2, #0]
 8008e1e:	6821      	ldr	r1, [r4, #0]
 8008e20:	1d1d      	adds	r5, r3, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6015      	str	r5, [r2, #0]
 8008e26:	060a      	lsls	r2, r1, #24
 8008e28:	d50b      	bpl.n	8008e42 <_printf_i+0x162>
 8008e2a:	07ca      	lsls	r2, r1, #31
 8008e2c:	bf44      	itt	mi
 8008e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8008e32:	6021      	strmi	r1, [r4, #0]
 8008e34:	b91b      	cbnz	r3, 8008e3e <_printf_i+0x15e>
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	f022 0220 	bic.w	r2, r2, #32
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	2210      	movs	r2, #16
 8008e40:	e7b7      	b.n	8008db2 <_printf_i+0xd2>
 8008e42:	064d      	lsls	r5, r1, #25
 8008e44:	bf48      	it	mi
 8008e46:	b29b      	uxthmi	r3, r3
 8008e48:	e7ef      	b.n	8008e2a <_printf_i+0x14a>
 8008e4a:	4665      	mov	r5, ip
 8008e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e50:	fb02 3311 	mls	r3, r2, r1, r3
 8008e54:	5cc3      	ldrb	r3, [r0, r3]
 8008e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	d1f5      	bne.n	8008e4c <_printf_i+0x16c>
 8008e60:	e7b9      	b.n	8008dd6 <_printf_i+0xf6>
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	1d18      	adds	r0, r3, #4
 8008e68:	6961      	ldr	r1, [r4, #20]
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	0628      	lsls	r0, r5, #24
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	d501      	bpl.n	8008e76 <_printf_i+0x196>
 8008e72:	6019      	str	r1, [r3, #0]
 8008e74:	e002      	b.n	8008e7c <_printf_i+0x19c>
 8008e76:	066a      	lsls	r2, r5, #25
 8008e78:	d5fb      	bpl.n	8008e72 <_printf_i+0x192>
 8008e7a:	8019      	strh	r1, [r3, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4665      	mov	r5, ip
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	e7b9      	b.n	8008df8 <_printf_i+0x118>
 8008e84:	6813      	ldr	r3, [r2, #0]
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	6011      	str	r1, [r2, #0]
 8008e8a:	681d      	ldr	r5, [r3, #0]
 8008e8c:	6862      	ldr	r2, [r4, #4]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4628      	mov	r0, r5
 8008e92:	f001 fb31 	bl	800a4f8 <memchr>
 8008e96:	b108      	cbz	r0, 8008e9c <_printf_i+0x1bc>
 8008e98:	1b40      	subs	r0, r0, r5
 8008e9a:	6060      	str	r0, [r4, #4]
 8008e9c:	6863      	ldr	r3, [r4, #4]
 8008e9e:	6123      	str	r3, [r4, #16]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea6:	e7a7      	b.n	8008df8 <_printf_i+0x118>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4639      	mov	r1, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	47c0      	blx	r8
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d0aa      	beq.n	8008e0c <_printf_i+0x12c>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	079b      	lsls	r3, r3, #30
 8008eba:	d413      	bmi.n	8008ee4 <_printf_i+0x204>
 8008ebc:	68e0      	ldr	r0, [r4, #12]
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	4298      	cmp	r0, r3
 8008ec2:	bfb8      	it	lt
 8008ec4:	4618      	movlt	r0, r3
 8008ec6:	e7a3      	b.n	8008e10 <_printf_i+0x130>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	464a      	mov	r2, r9
 8008ecc:	4639      	mov	r1, r7
 8008ece:	4630      	mov	r0, r6
 8008ed0:	47c0      	blx	r8
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d09a      	beq.n	8008e0c <_printf_i+0x12c>
 8008ed6:	3501      	adds	r5, #1
 8008ed8:	68e3      	ldr	r3, [r4, #12]
 8008eda:	9a03      	ldr	r2, [sp, #12]
 8008edc:	1a9b      	subs	r3, r3, r2
 8008ede:	42ab      	cmp	r3, r5
 8008ee0:	dcf2      	bgt.n	8008ec8 <_printf_i+0x1e8>
 8008ee2:	e7eb      	b.n	8008ebc <_printf_i+0x1dc>
 8008ee4:	2500      	movs	r5, #0
 8008ee6:	f104 0919 	add.w	r9, r4, #25
 8008eea:	e7f5      	b.n	8008ed8 <_printf_i+0x1f8>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1ac      	bne.n	8008e4a <_printf_i+0x16a>
 8008ef0:	7803      	ldrb	r3, [r0, #0]
 8008ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008efa:	e76c      	b.n	8008dd6 <_printf_i+0xf6>
 8008efc:	0800ae3b 	.word	0x0800ae3b
 8008f00:	0800ae4c 	.word	0x0800ae4c

08008f04 <_sbrk_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	2300      	movs	r3, #0
 8008f08:	4c05      	ldr	r4, [pc, #20]	; (8008f20 <_sbrk_r+0x1c>)
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	f7f8 f95e 	bl	80011d0 <_sbrk>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_sbrk_r+0x1a>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_sbrk_r+0x1a>
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20002080 	.word	0x20002080

08008f24 <strcpy>:
 8008f24:	4603      	mov	r3, r0
 8008f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f2a:	f803 2b01 	strb.w	r2, [r3], #1
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d1f9      	bne.n	8008f26 <strcpy+0x2>
 8008f32:	4770      	bx	lr

08008f34 <_strerror_r>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	288e      	cmp	r0, #142	; 0x8e
 8008f3e:	f200 812f 	bhi.w	80091a0 <_strerror_r+0x26c>
 8008f42:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008f46:	0138      	.short	0x0138
 8008f48:	0091008f 	.word	0x0091008f
 8008f4c:	00950093 	.word	0x00950093
 8008f50:	00990097 	.word	0x00990097
 8008f54:	009d009b 	.word	0x009d009b
 8008f58:	00a300a1 	.word	0x00a300a1
 8008f5c:	00a900a7 	.word	0x00a900a7
 8008f60:	00ad00ab 	.word	0x00ad00ab
 8008f64:	00af012d 	.word	0x00af012d
 8008f68:	00b300b1 	.word	0x00b300b1
 8008f6c:	00b700b5 	.word	0x00b700b5
 8008f70:	00bf00bd 	.word	0x00bf00bd
 8008f74:	00c700c5 	.word	0x00c700c5
 8008f78:	00cb00c9 	.word	0x00cb00c9
 8008f7c:	00d100cd 	.word	0x00d100cd
 8008f80:	00d700d5 	.word	0x00d700d5
 8008f84:	00db00d9 	.word	0x00db00d9
 8008f88:	00df00dd 	.word	0x00df00dd
 8008f8c:	00e300e1 	.word	0x00e300e1
 8008f90:	012d012d 	.word	0x012d012d
 8008f94:	012d012d 	.word	0x012d012d
 8008f98:	012d012d 	.word	0x012d012d
 8008f9c:	012d012d 	.word	0x012d012d
 8008fa0:	00eb00e7 	.word	0x00eb00e7
 8008fa4:	012d012d 	.word	0x012d012d
 8008fa8:	012d012d 	.word	0x012d012d
 8008fac:	012d012d 	.word	0x012d012d
 8008fb0:	012d012d 	.word	0x012d012d
 8008fb4:	012d012d 	.word	0x012d012d
 8008fb8:	012d012d 	.word	0x012d012d
 8008fbc:	00ed012d 	.word	0x00ed012d
 8008fc0:	00ef0107 	.word	0x00ef0107
 8008fc4:	012d00f1 	.word	0x012d00f1
 8008fc8:	012d012d 	.word	0x012d012d
 8008fcc:	012d00f3 	.word	0x012d00f3
 8008fd0:	012d012d 	.word	0x012d012d
 8008fd4:	012d00f5 	.word	0x012d00f5
 8008fd8:	00f9012d 	.word	0x00f9012d
 8008fdc:	012d012d 	.word	0x012d012d
 8008fe0:	012d00fb 	.word	0x012d00fb
 8008fe4:	012d012d 	.word	0x012d012d
 8008fe8:	012d012d 	.word	0x012d012d
 8008fec:	012d012d 	.word	0x012d012d
 8008ff0:	012d012d 	.word	0x012d012d
 8008ff4:	00fd012d 	.word	0x00fd012d
 8008ff8:	00ff012d 	.word	0x00ff012d
 8008ffc:	01030101 	.word	0x01030101
 8009000:	012d012d 	.word	0x012d012d
 8009004:	012d0125 	.word	0x012d0125
 8009008:	012d012d 	.word	0x012d012d
 800900c:	012d012d 	.word	0x012d012d
 8009010:	012d012d 	.word	0x012d012d
 8009014:	0113012d 	.word	0x0113012d
 8009018:	01090105 	.word	0x01090105
 800901c:	010d010b 	.word	0x010d010b
 8009020:	012d010f 	.word	0x012d010f
 8009024:	01150111 	.word	0x01150111
 8009028:	00e90119 	.word	0x00e90119
 800902c:	012b00c1 	.word	0x012b00c1
 8009030:	00cf00b9 	.word	0x00cf00b9
 8009034:	009f00bb 	.word	0x009f00bb
 8009038:	012900a5 	.word	0x012900a5
 800903c:	012d00f7 	.word	0x012d00f7
 8009040:	00c30117 	.word	0x00c30117
 8009044:	011b011d 	.word	0x011b011d
 8009048:	012d012d 	.word	0x012d012d
 800904c:	012d012d 	.word	0x012d012d
 8009050:	00d3012d 	.word	0x00d3012d
 8009054:	012d012d 	.word	0x012d012d
 8009058:	00e5012d 	.word	0x00e5012d
 800905c:	011f0127 	.word	0x011f0127
 8009060:	01230121 	.word	0x01230121
 8009064:	4855      	ldr	r0, [pc, #340]	; (80091bc <_strerror_r+0x288>)
 8009066:	bd10      	pop	{r4, pc}
 8009068:	4855      	ldr	r0, [pc, #340]	; (80091c0 <_strerror_r+0x28c>)
 800906a:	e7fc      	b.n	8009066 <_strerror_r+0x132>
 800906c:	4855      	ldr	r0, [pc, #340]	; (80091c4 <_strerror_r+0x290>)
 800906e:	e7fa      	b.n	8009066 <_strerror_r+0x132>
 8009070:	4855      	ldr	r0, [pc, #340]	; (80091c8 <_strerror_r+0x294>)
 8009072:	e7f8      	b.n	8009066 <_strerror_r+0x132>
 8009074:	4855      	ldr	r0, [pc, #340]	; (80091cc <_strerror_r+0x298>)
 8009076:	e7f6      	b.n	8009066 <_strerror_r+0x132>
 8009078:	4855      	ldr	r0, [pc, #340]	; (80091d0 <_strerror_r+0x29c>)
 800907a:	e7f4      	b.n	8009066 <_strerror_r+0x132>
 800907c:	4855      	ldr	r0, [pc, #340]	; (80091d4 <_strerror_r+0x2a0>)
 800907e:	e7f2      	b.n	8009066 <_strerror_r+0x132>
 8009080:	4855      	ldr	r0, [pc, #340]	; (80091d8 <_strerror_r+0x2a4>)
 8009082:	e7f0      	b.n	8009066 <_strerror_r+0x132>
 8009084:	4855      	ldr	r0, [pc, #340]	; (80091dc <_strerror_r+0x2a8>)
 8009086:	e7ee      	b.n	8009066 <_strerror_r+0x132>
 8009088:	4855      	ldr	r0, [pc, #340]	; (80091e0 <_strerror_r+0x2ac>)
 800908a:	e7ec      	b.n	8009066 <_strerror_r+0x132>
 800908c:	4855      	ldr	r0, [pc, #340]	; (80091e4 <_strerror_r+0x2b0>)
 800908e:	e7ea      	b.n	8009066 <_strerror_r+0x132>
 8009090:	4855      	ldr	r0, [pc, #340]	; (80091e8 <_strerror_r+0x2b4>)
 8009092:	e7e8      	b.n	8009066 <_strerror_r+0x132>
 8009094:	4855      	ldr	r0, [pc, #340]	; (80091ec <_strerror_r+0x2b8>)
 8009096:	e7e6      	b.n	8009066 <_strerror_r+0x132>
 8009098:	4855      	ldr	r0, [pc, #340]	; (80091f0 <_strerror_r+0x2bc>)
 800909a:	e7e4      	b.n	8009066 <_strerror_r+0x132>
 800909c:	4855      	ldr	r0, [pc, #340]	; (80091f4 <_strerror_r+0x2c0>)
 800909e:	e7e2      	b.n	8009066 <_strerror_r+0x132>
 80090a0:	4855      	ldr	r0, [pc, #340]	; (80091f8 <_strerror_r+0x2c4>)
 80090a2:	e7e0      	b.n	8009066 <_strerror_r+0x132>
 80090a4:	4855      	ldr	r0, [pc, #340]	; (80091fc <_strerror_r+0x2c8>)
 80090a6:	e7de      	b.n	8009066 <_strerror_r+0x132>
 80090a8:	4855      	ldr	r0, [pc, #340]	; (8009200 <_strerror_r+0x2cc>)
 80090aa:	e7dc      	b.n	8009066 <_strerror_r+0x132>
 80090ac:	4855      	ldr	r0, [pc, #340]	; (8009204 <_strerror_r+0x2d0>)
 80090ae:	e7da      	b.n	8009066 <_strerror_r+0x132>
 80090b0:	4855      	ldr	r0, [pc, #340]	; (8009208 <_strerror_r+0x2d4>)
 80090b2:	e7d8      	b.n	8009066 <_strerror_r+0x132>
 80090b4:	4855      	ldr	r0, [pc, #340]	; (800920c <_strerror_r+0x2d8>)
 80090b6:	e7d6      	b.n	8009066 <_strerror_r+0x132>
 80090b8:	4855      	ldr	r0, [pc, #340]	; (8009210 <_strerror_r+0x2dc>)
 80090ba:	e7d4      	b.n	8009066 <_strerror_r+0x132>
 80090bc:	4855      	ldr	r0, [pc, #340]	; (8009214 <_strerror_r+0x2e0>)
 80090be:	e7d2      	b.n	8009066 <_strerror_r+0x132>
 80090c0:	4855      	ldr	r0, [pc, #340]	; (8009218 <_strerror_r+0x2e4>)
 80090c2:	e7d0      	b.n	8009066 <_strerror_r+0x132>
 80090c4:	4855      	ldr	r0, [pc, #340]	; (800921c <_strerror_r+0x2e8>)
 80090c6:	e7ce      	b.n	8009066 <_strerror_r+0x132>
 80090c8:	4855      	ldr	r0, [pc, #340]	; (8009220 <_strerror_r+0x2ec>)
 80090ca:	e7cc      	b.n	8009066 <_strerror_r+0x132>
 80090cc:	4855      	ldr	r0, [pc, #340]	; (8009224 <_strerror_r+0x2f0>)
 80090ce:	e7ca      	b.n	8009066 <_strerror_r+0x132>
 80090d0:	4855      	ldr	r0, [pc, #340]	; (8009228 <_strerror_r+0x2f4>)
 80090d2:	e7c8      	b.n	8009066 <_strerror_r+0x132>
 80090d4:	4855      	ldr	r0, [pc, #340]	; (800922c <_strerror_r+0x2f8>)
 80090d6:	e7c6      	b.n	8009066 <_strerror_r+0x132>
 80090d8:	4855      	ldr	r0, [pc, #340]	; (8009230 <_strerror_r+0x2fc>)
 80090da:	e7c4      	b.n	8009066 <_strerror_r+0x132>
 80090dc:	4855      	ldr	r0, [pc, #340]	; (8009234 <_strerror_r+0x300>)
 80090de:	e7c2      	b.n	8009066 <_strerror_r+0x132>
 80090e0:	4855      	ldr	r0, [pc, #340]	; (8009238 <_strerror_r+0x304>)
 80090e2:	e7c0      	b.n	8009066 <_strerror_r+0x132>
 80090e4:	4855      	ldr	r0, [pc, #340]	; (800923c <_strerror_r+0x308>)
 80090e6:	e7be      	b.n	8009066 <_strerror_r+0x132>
 80090e8:	4855      	ldr	r0, [pc, #340]	; (8009240 <_strerror_r+0x30c>)
 80090ea:	e7bc      	b.n	8009066 <_strerror_r+0x132>
 80090ec:	4855      	ldr	r0, [pc, #340]	; (8009244 <_strerror_r+0x310>)
 80090ee:	e7ba      	b.n	8009066 <_strerror_r+0x132>
 80090f0:	4855      	ldr	r0, [pc, #340]	; (8009248 <_strerror_r+0x314>)
 80090f2:	e7b8      	b.n	8009066 <_strerror_r+0x132>
 80090f4:	4855      	ldr	r0, [pc, #340]	; (800924c <_strerror_r+0x318>)
 80090f6:	e7b6      	b.n	8009066 <_strerror_r+0x132>
 80090f8:	4855      	ldr	r0, [pc, #340]	; (8009250 <_strerror_r+0x31c>)
 80090fa:	e7b4      	b.n	8009066 <_strerror_r+0x132>
 80090fc:	4855      	ldr	r0, [pc, #340]	; (8009254 <_strerror_r+0x320>)
 80090fe:	e7b2      	b.n	8009066 <_strerror_r+0x132>
 8009100:	4855      	ldr	r0, [pc, #340]	; (8009258 <_strerror_r+0x324>)
 8009102:	e7b0      	b.n	8009066 <_strerror_r+0x132>
 8009104:	4855      	ldr	r0, [pc, #340]	; (800925c <_strerror_r+0x328>)
 8009106:	e7ae      	b.n	8009066 <_strerror_r+0x132>
 8009108:	4855      	ldr	r0, [pc, #340]	; (8009260 <_strerror_r+0x32c>)
 800910a:	e7ac      	b.n	8009066 <_strerror_r+0x132>
 800910c:	4855      	ldr	r0, [pc, #340]	; (8009264 <_strerror_r+0x330>)
 800910e:	e7aa      	b.n	8009066 <_strerror_r+0x132>
 8009110:	4855      	ldr	r0, [pc, #340]	; (8009268 <_strerror_r+0x334>)
 8009112:	e7a8      	b.n	8009066 <_strerror_r+0x132>
 8009114:	4855      	ldr	r0, [pc, #340]	; (800926c <_strerror_r+0x338>)
 8009116:	e7a6      	b.n	8009066 <_strerror_r+0x132>
 8009118:	4855      	ldr	r0, [pc, #340]	; (8009270 <_strerror_r+0x33c>)
 800911a:	e7a4      	b.n	8009066 <_strerror_r+0x132>
 800911c:	4855      	ldr	r0, [pc, #340]	; (8009274 <_strerror_r+0x340>)
 800911e:	e7a2      	b.n	8009066 <_strerror_r+0x132>
 8009120:	4855      	ldr	r0, [pc, #340]	; (8009278 <_strerror_r+0x344>)
 8009122:	e7a0      	b.n	8009066 <_strerror_r+0x132>
 8009124:	4855      	ldr	r0, [pc, #340]	; (800927c <_strerror_r+0x348>)
 8009126:	e79e      	b.n	8009066 <_strerror_r+0x132>
 8009128:	4855      	ldr	r0, [pc, #340]	; (8009280 <_strerror_r+0x34c>)
 800912a:	e79c      	b.n	8009066 <_strerror_r+0x132>
 800912c:	4855      	ldr	r0, [pc, #340]	; (8009284 <_strerror_r+0x350>)
 800912e:	e79a      	b.n	8009066 <_strerror_r+0x132>
 8009130:	4855      	ldr	r0, [pc, #340]	; (8009288 <_strerror_r+0x354>)
 8009132:	e798      	b.n	8009066 <_strerror_r+0x132>
 8009134:	4855      	ldr	r0, [pc, #340]	; (800928c <_strerror_r+0x358>)
 8009136:	e796      	b.n	8009066 <_strerror_r+0x132>
 8009138:	4855      	ldr	r0, [pc, #340]	; (8009290 <_strerror_r+0x35c>)
 800913a:	e794      	b.n	8009066 <_strerror_r+0x132>
 800913c:	4855      	ldr	r0, [pc, #340]	; (8009294 <_strerror_r+0x360>)
 800913e:	e792      	b.n	8009066 <_strerror_r+0x132>
 8009140:	4855      	ldr	r0, [pc, #340]	; (8009298 <_strerror_r+0x364>)
 8009142:	e790      	b.n	8009066 <_strerror_r+0x132>
 8009144:	4855      	ldr	r0, [pc, #340]	; (800929c <_strerror_r+0x368>)
 8009146:	e78e      	b.n	8009066 <_strerror_r+0x132>
 8009148:	4855      	ldr	r0, [pc, #340]	; (80092a0 <_strerror_r+0x36c>)
 800914a:	e78c      	b.n	8009066 <_strerror_r+0x132>
 800914c:	4855      	ldr	r0, [pc, #340]	; (80092a4 <_strerror_r+0x370>)
 800914e:	e78a      	b.n	8009066 <_strerror_r+0x132>
 8009150:	4855      	ldr	r0, [pc, #340]	; (80092a8 <_strerror_r+0x374>)
 8009152:	e788      	b.n	8009066 <_strerror_r+0x132>
 8009154:	4855      	ldr	r0, [pc, #340]	; (80092ac <_strerror_r+0x378>)
 8009156:	e786      	b.n	8009066 <_strerror_r+0x132>
 8009158:	4855      	ldr	r0, [pc, #340]	; (80092b0 <_strerror_r+0x37c>)
 800915a:	e784      	b.n	8009066 <_strerror_r+0x132>
 800915c:	4855      	ldr	r0, [pc, #340]	; (80092b4 <_strerror_r+0x380>)
 800915e:	e782      	b.n	8009066 <_strerror_r+0x132>
 8009160:	4855      	ldr	r0, [pc, #340]	; (80092b8 <_strerror_r+0x384>)
 8009162:	e780      	b.n	8009066 <_strerror_r+0x132>
 8009164:	4855      	ldr	r0, [pc, #340]	; (80092bc <_strerror_r+0x388>)
 8009166:	e77e      	b.n	8009066 <_strerror_r+0x132>
 8009168:	4855      	ldr	r0, [pc, #340]	; (80092c0 <_strerror_r+0x38c>)
 800916a:	e77c      	b.n	8009066 <_strerror_r+0x132>
 800916c:	4855      	ldr	r0, [pc, #340]	; (80092c4 <_strerror_r+0x390>)
 800916e:	e77a      	b.n	8009066 <_strerror_r+0x132>
 8009170:	4855      	ldr	r0, [pc, #340]	; (80092c8 <_strerror_r+0x394>)
 8009172:	e778      	b.n	8009066 <_strerror_r+0x132>
 8009174:	4855      	ldr	r0, [pc, #340]	; (80092cc <_strerror_r+0x398>)
 8009176:	e776      	b.n	8009066 <_strerror_r+0x132>
 8009178:	4855      	ldr	r0, [pc, #340]	; (80092d0 <_strerror_r+0x39c>)
 800917a:	e774      	b.n	8009066 <_strerror_r+0x132>
 800917c:	4855      	ldr	r0, [pc, #340]	; (80092d4 <_strerror_r+0x3a0>)
 800917e:	e772      	b.n	8009066 <_strerror_r+0x132>
 8009180:	4855      	ldr	r0, [pc, #340]	; (80092d8 <_strerror_r+0x3a4>)
 8009182:	e770      	b.n	8009066 <_strerror_r+0x132>
 8009184:	4855      	ldr	r0, [pc, #340]	; (80092dc <_strerror_r+0x3a8>)
 8009186:	e76e      	b.n	8009066 <_strerror_r+0x132>
 8009188:	4855      	ldr	r0, [pc, #340]	; (80092e0 <_strerror_r+0x3ac>)
 800918a:	e76c      	b.n	8009066 <_strerror_r+0x132>
 800918c:	4855      	ldr	r0, [pc, #340]	; (80092e4 <_strerror_r+0x3b0>)
 800918e:	e76a      	b.n	8009066 <_strerror_r+0x132>
 8009190:	4855      	ldr	r0, [pc, #340]	; (80092e8 <_strerror_r+0x3b4>)
 8009192:	e768      	b.n	8009066 <_strerror_r+0x132>
 8009194:	4855      	ldr	r0, [pc, #340]	; (80092ec <_strerror_r+0x3b8>)
 8009196:	e766      	b.n	8009066 <_strerror_r+0x132>
 8009198:	4855      	ldr	r0, [pc, #340]	; (80092f0 <_strerror_r+0x3bc>)
 800919a:	e764      	b.n	8009066 <_strerror_r+0x132>
 800919c:	4855      	ldr	r0, [pc, #340]	; (80092f4 <_strerror_r+0x3c0>)
 800919e:	e762      	b.n	8009066 <_strerror_r+0x132>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bf14      	ite	ne
 80091a4:	461a      	movne	r2, r3
 80091a6:	4622      	moveq	r2, r4
 80091a8:	f000 f8b4 	bl	8009314 <_user_strerror>
 80091ac:	4b52      	ldr	r3, [pc, #328]	; (80092f8 <_strerror_r+0x3c4>)
 80091ae:	2800      	cmp	r0, #0
 80091b0:	bf08      	it	eq
 80091b2:	4618      	moveq	r0, r3
 80091b4:	e757      	b.n	8009066 <_strerror_r+0x132>
 80091b6:	4851      	ldr	r0, [pc, #324]	; (80092fc <_strerror_r+0x3c8>)
 80091b8:	e755      	b.n	8009066 <_strerror_r+0x132>
 80091ba:	bf00      	nop
 80091bc:	0800ae65 	.word	0x0800ae65
 80091c0:	0800ae6f 	.word	0x0800ae6f
 80091c4:	0800ae89 	.word	0x0800ae89
 80091c8:	0800ae99 	.word	0x0800ae99
 80091cc:	0800aeb1 	.word	0x0800aeb1
 80091d0:	0800aebb 	.word	0x0800aebb
 80091d4:	0800aed5 	.word	0x0800aed5
 80091d8:	0800aee7 	.word	0x0800aee7
 80091dc:	0800aef9 	.word	0x0800aef9
 80091e0:	0800af12 	.word	0x0800af12
 80091e4:	0800af22 	.word	0x0800af22
 80091e8:	0800af2e 	.word	0x0800af2e
 80091ec:	0800af4b 	.word	0x0800af4b
 80091f0:	0800af5d 	.word	0x0800af5d
 80091f4:	0800af6e 	.word	0x0800af6e
 80091f8:	0800af80 	.word	0x0800af80
 80091fc:	0800af8c 	.word	0x0800af8c
 8009200:	0800afa4 	.word	0x0800afa4
 8009204:	0800afb0 	.word	0x0800afb0
 8009208:	0800afc2 	.word	0x0800afc2
 800920c:	0800afd1 	.word	0x0800afd1
 8009210:	0800afe1 	.word	0x0800afe1
 8009214:	0800afee 	.word	0x0800afee
 8009218:	0800b00d 	.word	0x0800b00d
 800921c:	0800b01c 	.word	0x0800b01c
 8009220:	0800b02d 	.word	0x0800b02d
 8009224:	0800b051 	.word	0x0800b051
 8009228:	0800b06f 	.word	0x0800b06f
 800922c:	0800b08d 	.word	0x0800b08d
 8009230:	0800b0ad 	.word	0x0800b0ad
 8009234:	0800b0c4 	.word	0x0800b0c4
 8009238:	0800b0d3 	.word	0x0800b0d3
 800923c:	0800b0e2 	.word	0x0800b0e2
 8009240:	0800b0f6 	.word	0x0800b0f6
 8009244:	0800b10e 	.word	0x0800b10e
 8009248:	0800b11c 	.word	0x0800b11c
 800924c:	0800b129 	.word	0x0800b129
 8009250:	0800b13f 	.word	0x0800b13f
 8009254:	0800b14e 	.word	0x0800b14e
 8009258:	0800b15a 	.word	0x0800b15a
 800925c:	0800b189 	.word	0x0800b189
 8009260:	0800b19a 	.word	0x0800b19a
 8009264:	0800b1b5 	.word	0x0800b1b5
 8009268:	0800b1c8 	.word	0x0800b1c8
 800926c:	0800b1de 	.word	0x0800b1de
 8009270:	0800b1e7 	.word	0x0800b1e7
 8009274:	0800b1fe 	.word	0x0800b1fe
 8009278:	0800b206 	.word	0x0800b206
 800927c:	0800b213 	.word	0x0800b213
 8009280:	0800b228 	.word	0x0800b228
 8009284:	0800b23c 	.word	0x0800b23c
 8009288:	0800b254 	.word	0x0800b254
 800928c:	0800b263 	.word	0x0800b263
 8009290:	0800b274 	.word	0x0800b274
 8009294:	0800b287 	.word	0x0800b287
 8009298:	0800b293 	.word	0x0800b293
 800929c:	0800b2ac 	.word	0x0800b2ac
 80092a0:	0800b2c0 	.word	0x0800b2c0
 80092a4:	0800b2db 	.word	0x0800b2db
 80092a8:	0800b2f3 	.word	0x0800b2f3
 80092ac:	0800b30d 	.word	0x0800b30d
 80092b0:	0800b315 	.word	0x0800b315
 80092b4:	0800b345 	.word	0x0800b345
 80092b8:	0800b364 	.word	0x0800b364
 80092bc:	0800b383 	.word	0x0800b383
 80092c0:	0800b39a 	.word	0x0800b39a
 80092c4:	0800b3ad 	.word	0x0800b3ad
 80092c8:	0800b3c6 	.word	0x0800b3c6
 80092cc:	0800b3dd 	.word	0x0800b3dd
 80092d0:	0800b3f3 	.word	0x0800b3f3
 80092d4:	0800b414 	.word	0x0800b414
 80092d8:	0800b42c 	.word	0x0800b42c
 80092dc:	0800b448 	.word	0x0800b448
 80092e0:	0800b45b 	.word	0x0800b45b
 80092e4:	0800b471 	.word	0x0800b471
 80092e8:	0800b485 	.word	0x0800b485
 80092ec:	0800b4a7 	.word	0x0800b4a7
 80092f0:	0800b4cd 	.word	0x0800b4cd
 80092f4:	0800b4de 	.word	0x0800b4de
 80092f8:	0800ae1d 	.word	0x0800ae1d
 80092fc:	0800ae5d 	.word	0x0800ae5d

08009300 <strerror>:
 8009300:	2300      	movs	r3, #0
 8009302:	4601      	mov	r1, r0
 8009304:	4802      	ldr	r0, [pc, #8]	; (8009310 <strerror+0x10>)
 8009306:	461a      	mov	r2, r3
 8009308:	6800      	ldr	r0, [r0, #0]
 800930a:	f7ff be13 	b.w	8008f34 <_strerror_r>
 800930e:	bf00      	nop
 8009310:	20000184 	.word	0x20000184

08009314 <_user_strerror>:
 8009314:	2000      	movs	r0, #0
 8009316:	4770      	bx	lr

08009318 <__swbuf_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	460e      	mov	r6, r1
 800931c:	4614      	mov	r4, r2
 800931e:	4605      	mov	r5, r0
 8009320:	b118      	cbz	r0, 800932a <__swbuf_r+0x12>
 8009322:	6983      	ldr	r3, [r0, #24]
 8009324:	b90b      	cbnz	r3, 800932a <__swbuf_r+0x12>
 8009326:	f000 ffeb 	bl	800a300 <__sinit>
 800932a:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <__swbuf_r+0x98>)
 800932c:	429c      	cmp	r4, r3
 800932e:	d12a      	bne.n	8009386 <__swbuf_r+0x6e>
 8009330:	686c      	ldr	r4, [r5, #4]
 8009332:	69a3      	ldr	r3, [r4, #24]
 8009334:	60a3      	str	r3, [r4, #8]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	071a      	lsls	r2, r3, #28
 800933a:	d52e      	bpl.n	800939a <__swbuf_r+0x82>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	b363      	cbz	r3, 800939a <__swbuf_r+0x82>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	b2f6      	uxtb	r6, r6
 8009346:	1ac0      	subs	r0, r0, r3
 8009348:	6963      	ldr	r3, [r4, #20]
 800934a:	4637      	mov	r7, r6
 800934c:	4283      	cmp	r3, r0
 800934e:	dc04      	bgt.n	800935a <__swbuf_r+0x42>
 8009350:	4621      	mov	r1, r4
 8009352:	4628      	mov	r0, r5
 8009354:	f000 ff6a 	bl	800a22c <_fflush_r>
 8009358:	bb28      	cbnz	r0, 80093a6 <__swbuf_r+0x8e>
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	3001      	adds	r0, #1
 800935e:	3b01      	subs	r3, #1
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	701e      	strb	r6, [r3, #0]
 800936a:	6963      	ldr	r3, [r4, #20]
 800936c:	4283      	cmp	r3, r0
 800936e:	d004      	beq.n	800937a <__swbuf_r+0x62>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	07db      	lsls	r3, r3, #31
 8009374:	d519      	bpl.n	80093aa <__swbuf_r+0x92>
 8009376:	2e0a      	cmp	r6, #10
 8009378:	d117      	bne.n	80093aa <__swbuf_r+0x92>
 800937a:	4621      	mov	r1, r4
 800937c:	4628      	mov	r0, r5
 800937e:	f000 ff55 	bl	800a22c <_fflush_r>
 8009382:	b190      	cbz	r0, 80093aa <__swbuf_r+0x92>
 8009384:	e00f      	b.n	80093a6 <__swbuf_r+0x8e>
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <__swbuf_r+0x9c>)
 8009388:	429c      	cmp	r4, r3
 800938a:	d101      	bne.n	8009390 <__swbuf_r+0x78>
 800938c:	68ac      	ldr	r4, [r5, #8]
 800938e:	e7d0      	b.n	8009332 <__swbuf_r+0x1a>
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <__swbuf_r+0xa0>)
 8009392:	429c      	cmp	r4, r3
 8009394:	bf08      	it	eq
 8009396:	68ec      	ldreq	r4, [r5, #12]
 8009398:	e7cb      	b.n	8009332 <__swbuf_r+0x1a>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f000 f80d 	bl	80093bc <__swsetup_r>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0cc      	beq.n	8009340 <__swbuf_r+0x28>
 80093a6:	f04f 37ff 	mov.w	r7, #4294967295
 80093aa:	4638      	mov	r0, r7
 80093ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ae:	bf00      	nop
 80093b0:	0800b520 	.word	0x0800b520
 80093b4:	0800b540 	.word	0x0800b540
 80093b8:	0800b500 	.word	0x0800b500

080093bc <__swsetup_r>:
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <__swsetup_r+0xcc>)
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	4606      	mov	r6, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	b125      	cbz	r5, 80093d2 <__swsetup_r+0x16>
 80093c8:	69ab      	ldr	r3, [r5, #24]
 80093ca:	b913      	cbnz	r3, 80093d2 <__swsetup_r+0x16>
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 ff97 	bl	800a300 <__sinit>
 80093d2:	4b2e      	ldr	r3, [pc, #184]	; (800948c <__swsetup_r+0xd0>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d10f      	bne.n	80093f8 <__swsetup_r+0x3c>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	0715      	lsls	r5, r2, #28
 80093e2:	d42c      	bmi.n	800943e <__swsetup_r+0x82>
 80093e4:	06d0      	lsls	r0, r2, #27
 80093e6:	d411      	bmi.n	800940c <__swsetup_r+0x50>
 80093e8:	2209      	movs	r2, #9
 80093ea:	6032      	str	r2, [r6, #0]
 80093ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	e03e      	b.n	8009476 <__swsetup_r+0xba>
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <__swsetup_r+0xd4>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <__swsetup_r+0x46>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7eb      	b.n	80093da <__swsetup_r+0x1e>
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <__swsetup_r+0xd8>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7e6      	b.n	80093da <__swsetup_r+0x1e>
 800940c:	0751      	lsls	r1, r2, #29
 800940e:	d512      	bpl.n	8009436 <__swsetup_r+0x7a>
 8009410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009412:	b141      	cbz	r1, 8009426 <__swsetup_r+0x6a>
 8009414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009418:	4299      	cmp	r1, r3
 800941a:	d002      	beq.n	8009422 <__swsetup_r+0x66>
 800941c:	4630      	mov	r0, r6
 800941e:	f7fe ff3d 	bl	800829c <_free_r>
 8009422:	2300      	movs	r3, #0
 8009424:	6363      	str	r3, [r4, #52]	; 0x34
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	2300      	movs	r3, #0
 8009430:	6063      	str	r3, [r4, #4]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f043 0308 	orr.w	r3, r3, #8
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	b94b      	cbnz	r3, 8009456 <__swsetup_r+0x9a>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944c:	d003      	beq.n	8009456 <__swsetup_r+0x9a>
 800944e:	4621      	mov	r1, r4
 8009450:	4630      	mov	r0, r6
 8009452:	f001 f811 	bl	800a478 <__smakebuf_r>
 8009456:	89a2      	ldrh	r2, [r4, #12]
 8009458:	f012 0301 	ands.w	r3, r2, #1
 800945c:	d00c      	beq.n	8009478 <__swsetup_r+0xbc>
 800945e:	2300      	movs	r3, #0
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	6963      	ldr	r3, [r4, #20]
 8009464:	425b      	negs	r3, r3
 8009466:	61a3      	str	r3, [r4, #24]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b953      	cbnz	r3, 8009482 <__swsetup_r+0xc6>
 800946c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009470:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009474:	d1ba      	bne.n	80093ec <__swsetup_r+0x30>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	0792      	lsls	r2, r2, #30
 800947a:	bf58      	it	pl
 800947c:	6963      	ldrpl	r3, [r4, #20]
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	e7f2      	b.n	8009468 <__swsetup_r+0xac>
 8009482:	2000      	movs	r0, #0
 8009484:	e7f7      	b.n	8009476 <__swsetup_r+0xba>
 8009486:	bf00      	nop
 8009488:	20000184 	.word	0x20000184
 800948c:	0800b520 	.word	0x0800b520
 8009490:	0800b540 	.word	0x0800b540
 8009494:	0800b500 	.word	0x0800b500

08009498 <quorem>:
 8009498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	6903      	ldr	r3, [r0, #16]
 800949e:	690c      	ldr	r4, [r1, #16]
 80094a0:	4680      	mov	r8, r0
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	f2c0 8084 	blt.w	80095b0 <quorem+0x118>
 80094a8:	3c01      	subs	r4, #1
 80094aa:	f101 0714 	add.w	r7, r1, #20
 80094ae:	f100 0614 	add.w	r6, r0, #20
 80094b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094ba:	3501      	adds	r5, #1
 80094bc:	fbb0 f5f5 	udiv	r5, r0, r5
 80094c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80094c4:	eb06 030c 	add.w	r3, r6, ip
 80094c8:	eb07 090c 	add.w	r9, r7, ip
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	b39d      	cbz	r5, 8009538 <quorem+0xa0>
 80094d0:	f04f 0a00 	mov.w	sl, #0
 80094d4:	4638      	mov	r0, r7
 80094d6:	46b6      	mov	lr, r6
 80094d8:	46d3      	mov	fp, sl
 80094da:	f850 2b04 	ldr.w	r2, [r0], #4
 80094de:	b293      	uxth	r3, r2
 80094e0:	fb05 a303 	mla	r3, r5, r3, sl
 80094e4:	0c12      	lsrs	r2, r2, #16
 80094e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ea:	fb05 a202 	mla	r2, r5, r2, sl
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ebab 0303 	sub.w	r3, fp, r3
 80094f4:	f8de b000 	ldr.w	fp, [lr]
 80094f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80094fc:	fa1f fb8b 	uxth.w	fp, fp
 8009500:	445b      	add	r3, fp
 8009502:	fa1f fb82 	uxth.w	fp, r2
 8009506:	f8de 2000 	ldr.w	r2, [lr]
 800950a:	4581      	cmp	r9, r0
 800950c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800951a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800951e:	f84e 3b04 	str.w	r3, [lr], #4
 8009522:	d2da      	bcs.n	80094da <quorem+0x42>
 8009524:	f856 300c 	ldr.w	r3, [r6, ip]
 8009528:	b933      	cbnz	r3, 8009538 <quorem+0xa0>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	3b04      	subs	r3, #4
 800952e:	429e      	cmp	r6, r3
 8009530:	461a      	mov	r2, r3
 8009532:	d331      	bcc.n	8009598 <quorem+0x100>
 8009534:	f8c8 4010 	str.w	r4, [r8, #16]
 8009538:	4640      	mov	r0, r8
 800953a:	f001 fa0d 	bl	800a958 <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	db26      	blt.n	8009590 <quorem+0xf8>
 8009542:	4630      	mov	r0, r6
 8009544:	f04f 0c00 	mov.w	ip, #0
 8009548:	3501      	adds	r5, #1
 800954a:	f857 1b04 	ldr.w	r1, [r7], #4
 800954e:	f8d0 e000 	ldr.w	lr, [r0]
 8009552:	b28b      	uxth	r3, r1
 8009554:	ebac 0303 	sub.w	r3, ip, r3
 8009558:	fa1f f28e 	uxth.w	r2, lr
 800955c:	4413      	add	r3, r2
 800955e:	0c0a      	lsrs	r2, r1, #16
 8009560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800956e:	45b9      	cmp	r9, r7
 8009570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009574:	f840 3b04 	str.w	r3, [r0], #4
 8009578:	d2e7      	bcs.n	800954a <quorem+0xb2>
 800957a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800957e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009582:	b92a      	cbnz	r2, 8009590 <quorem+0xf8>
 8009584:	3b04      	subs	r3, #4
 8009586:	429e      	cmp	r6, r3
 8009588:	461a      	mov	r2, r3
 800958a:	d30b      	bcc.n	80095a4 <quorem+0x10c>
 800958c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009590:	4628      	mov	r0, r5
 8009592:	b003      	add	sp, #12
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	3b04      	subs	r3, #4
 800959c:	2a00      	cmp	r2, #0
 800959e:	d1c9      	bne.n	8009534 <quorem+0x9c>
 80095a0:	3c01      	subs	r4, #1
 80095a2:	e7c4      	b.n	800952e <quorem+0x96>
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	3b04      	subs	r3, #4
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d1ef      	bne.n	800958c <quorem+0xf4>
 80095ac:	3c01      	subs	r4, #1
 80095ae:	e7ea      	b.n	8009586 <quorem+0xee>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7ee      	b.n	8009592 <quorem+0xfa>
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	4616      	mov	r6, r2
 80095be:	461f      	mov	r7, r3
 80095c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095c2:	b095      	sub	sp, #84	; 0x54
 80095c4:	4604      	mov	r4, r0
 80095c6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80095ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80095ce:	b93d      	cbnz	r5, 80095e0 <_dtoa_r+0x28>
 80095d0:	2010      	movs	r0, #16
 80095d2:	f7fe fe4b 	bl	800826c <malloc>
 80095d6:	6260      	str	r0, [r4, #36]	; 0x24
 80095d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095dc:	6005      	str	r5, [r0, #0]
 80095de:	60c5      	str	r5, [r0, #12]
 80095e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	b151      	cbz	r1, 80095fc <_dtoa_r+0x44>
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	2301      	movs	r3, #1
 80095ea:	4093      	lsls	r3, r2
 80095ec:	604a      	str	r2, [r1, #4]
 80095ee:	608b      	str	r3, [r1, #8]
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 ffd0 	bl	800a596 <_Bfree>
 80095f6:	2200      	movs	r2, #0
 80095f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	1e3b      	subs	r3, r7, #0
 80095fe:	bfaf      	iteee	ge
 8009600:	2300      	movge	r3, #0
 8009602:	2201      	movlt	r2, #1
 8009604:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009608:	9303      	strlt	r3, [sp, #12]
 800960a:	bfac      	ite	ge
 800960c:	f8c8 3000 	strge.w	r3, [r8]
 8009610:	f8c8 2000 	strlt.w	r2, [r8]
 8009614:	4bae      	ldr	r3, [pc, #696]	; (80098d0 <_dtoa_r+0x318>)
 8009616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800961a:	ea33 0308 	bics.w	r3, r3, r8
 800961e:	d11b      	bne.n	8009658 <_dtoa_r+0xa0>
 8009620:	f242 730f 	movw	r3, #9999	; 0x270f
 8009624:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	9b02      	ldr	r3, [sp, #8]
 800962a:	b923      	cbnz	r3, 8009636 <_dtoa_r+0x7e>
 800962c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009630:	2800      	cmp	r0, #0
 8009632:	f000 8545 	beq.w	800a0c0 <_dtoa_r+0xb08>
 8009636:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009638:	b953      	cbnz	r3, 8009650 <_dtoa_r+0x98>
 800963a:	4ba6      	ldr	r3, [pc, #664]	; (80098d4 <_dtoa_r+0x31c>)
 800963c:	e021      	b.n	8009682 <_dtoa_r+0xca>
 800963e:	4ba6      	ldr	r3, [pc, #664]	; (80098d8 <_dtoa_r+0x320>)
 8009640:	9306      	str	r3, [sp, #24]
 8009642:	3308      	adds	r3, #8
 8009644:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	9806      	ldr	r0, [sp, #24]
 800964a:	b015      	add	sp, #84	; 0x54
 800964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009650:	4ba0      	ldr	r3, [pc, #640]	; (80098d4 <_dtoa_r+0x31c>)
 8009652:	9306      	str	r3, [sp, #24]
 8009654:	3303      	adds	r3, #3
 8009656:	e7f5      	b.n	8009644 <_dtoa_r+0x8c>
 8009658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800965c:	2200      	movs	r2, #0
 800965e:	2300      	movs	r3, #0
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f7 f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8009668:	4682      	mov	sl, r0
 800966a:	b160      	cbz	r0, 8009686 <_dtoa_r+0xce>
 800966c:	2301      	movs	r3, #1
 800966e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8520 	beq.w	800a0ba <_dtoa_r+0xb02>
 800967a:	4b98      	ldr	r3, [pc, #608]	; (80098dc <_dtoa_r+0x324>)
 800967c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	3b01      	subs	r3, #1
 8009682:	9306      	str	r3, [sp, #24]
 8009684:	e7e0      	b.n	8009648 <_dtoa_r+0x90>
 8009686:	ab12      	add	r3, sp, #72	; 0x48
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	ab13      	add	r3, sp, #76	; 0x4c
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	4632      	mov	r2, r6
 8009690:	463b      	mov	r3, r7
 8009692:	4620      	mov	r0, r4
 8009694:	f001 f9d8 	bl	800aa48 <__d2b>
 8009698:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800969c:	4683      	mov	fp, r0
 800969e:	2d00      	cmp	r5, #0
 80096a0:	d07d      	beq.n	800979e <_dtoa_r+0x1e6>
 80096a2:	46b0      	mov	r8, r6
 80096a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80096ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80096b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80096b8:	2200      	movs	r2, #0
 80096ba:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <_dtoa_r+0x328>)
 80096bc:	4640      	mov	r0, r8
 80096be:	4649      	mov	r1, r9
 80096c0:	f7f6 fd52 	bl	8000168 <__aeabi_dsub>
 80096c4:	a37c      	add	r3, pc, #496	; (adr r3, 80098b8 <_dtoa_r+0x300>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f7f6 ff05 	bl	80004d8 <__aeabi_dmul>
 80096ce:	a37c      	add	r3, pc, #496	; (adr r3, 80098c0 <_dtoa_r+0x308>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fd4a 	bl	800016c <__adddf3>
 80096d8:	4606      	mov	r6, r0
 80096da:	4628      	mov	r0, r5
 80096dc:	460f      	mov	r7, r1
 80096de:	f7f6 fe91 	bl	8000404 <__aeabi_i2d>
 80096e2:	a379      	add	r3, pc, #484	; (adr r3, 80098c8 <_dtoa_r+0x310>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 fef6 	bl	80004d8 <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f6 fd3a 	bl	800016c <__adddf3>
 80096f8:	4606      	mov	r6, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	f7f7 f99c 	bl	8000a38 <__aeabi_d2iz>
 8009700:	2200      	movs	r2, #0
 8009702:	4682      	mov	sl, r0
 8009704:	2300      	movs	r3, #0
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f7 f957 	bl	80009bc <__aeabi_dcmplt>
 800970e:	b148      	cbz	r0, 8009724 <_dtoa_r+0x16c>
 8009710:	4650      	mov	r0, sl
 8009712:	f7f6 fe77 	bl	8000404 <__aeabi_i2d>
 8009716:	4632      	mov	r2, r6
 8009718:	463b      	mov	r3, r7
 800971a:	f7f7 f945 	bl	80009a8 <__aeabi_dcmpeq>
 800971e:	b908      	cbnz	r0, 8009724 <_dtoa_r+0x16c>
 8009720:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009724:	f1ba 0f16 	cmp.w	sl, #22
 8009728:	d85a      	bhi.n	80097e0 <_dtoa_r+0x228>
 800972a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800972e:	496d      	ldr	r1, [pc, #436]	; (80098e4 <_dtoa_r+0x32c>)
 8009730:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009738:	f7f7 f95e 	bl	80009f8 <__aeabi_dcmpgt>
 800973c:	2800      	cmp	r0, #0
 800973e:	d051      	beq.n	80097e4 <_dtoa_r+0x22c>
 8009740:	2300      	movs	r3, #0
 8009742:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009746:	930d      	str	r3, [sp, #52]	; 0x34
 8009748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800974a:	1b5d      	subs	r5, r3, r5
 800974c:	1e6b      	subs	r3, r5, #1
 800974e:	9307      	str	r3, [sp, #28]
 8009750:	bf43      	ittte	mi
 8009752:	2300      	movmi	r3, #0
 8009754:	f1c5 0901 	rsbmi	r9, r5, #1
 8009758:	9307      	strmi	r3, [sp, #28]
 800975a:	f04f 0900 	movpl.w	r9, #0
 800975e:	f1ba 0f00 	cmp.w	sl, #0
 8009762:	db41      	blt.n	80097e8 <_dtoa_r+0x230>
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800976a:	4453      	add	r3, sl
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	2300      	movs	r3, #0
 8009770:	9308      	str	r3, [sp, #32]
 8009772:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009774:	2b09      	cmp	r3, #9
 8009776:	f200 808f 	bhi.w	8009898 <_dtoa_r+0x2e0>
 800977a:	2b05      	cmp	r3, #5
 800977c:	bfc4      	itt	gt
 800977e:	3b04      	subgt	r3, #4
 8009780:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009782:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009784:	bfc8      	it	gt
 8009786:	2500      	movgt	r5, #0
 8009788:	f1a3 0302 	sub.w	r3, r3, #2
 800978c:	bfd8      	it	le
 800978e:	2501      	movle	r5, #1
 8009790:	2b03      	cmp	r3, #3
 8009792:	f200 808d 	bhi.w	80098b0 <_dtoa_r+0x2f8>
 8009796:	e8df f003 	tbb	[pc, r3]
 800979a:	7d7b      	.short	0x7d7b
 800979c:	6f2f      	.short	0x6f2f
 800979e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80097a2:	441d      	add	r5, r3
 80097a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80097a8:	2820      	cmp	r0, #32
 80097aa:	dd13      	ble.n	80097d4 <_dtoa_r+0x21c>
 80097ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	fa08 f800 	lsl.w	r8, r8, r0
 80097b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097ba:	fa23 f000 	lsr.w	r0, r3, r0
 80097be:	ea48 0000 	orr.w	r0, r8, r0
 80097c2:	f7f6 fe0f 	bl	80003e4 <__aeabi_ui2d>
 80097c6:	2301      	movs	r3, #1
 80097c8:	4680      	mov	r8, r0
 80097ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80097ce:	3d01      	subs	r5, #1
 80097d0:	9310      	str	r3, [sp, #64]	; 0x40
 80097d2:	e771      	b.n	80096b8 <_dtoa_r+0x100>
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	f1c0 0020 	rsb	r0, r0, #32
 80097da:	fa03 f000 	lsl.w	r0, r3, r0
 80097de:	e7f0      	b.n	80097c2 <_dtoa_r+0x20a>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e7b0      	b.n	8009746 <_dtoa_r+0x18e>
 80097e4:	900d      	str	r0, [sp, #52]	; 0x34
 80097e6:	e7af      	b.n	8009748 <_dtoa_r+0x190>
 80097e8:	f1ca 0300 	rsb	r3, sl, #0
 80097ec:	9308      	str	r3, [sp, #32]
 80097ee:	2300      	movs	r3, #0
 80097f0:	eba9 090a 	sub.w	r9, r9, sl
 80097f4:	930c      	str	r3, [sp, #48]	; 0x30
 80097f6:	e7bc      	b.n	8009772 <_dtoa_r+0x1ba>
 80097f8:	2301      	movs	r3, #1
 80097fa:	9309      	str	r3, [sp, #36]	; 0x24
 80097fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd74      	ble.n	80098ec <_dtoa_r+0x334>
 8009802:	4698      	mov	r8, r3
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	2200      	movs	r2, #0
 8009808:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800980a:	6072      	str	r2, [r6, #4]
 800980c:	2204      	movs	r2, #4
 800980e:	f102 0014 	add.w	r0, r2, #20
 8009812:	4298      	cmp	r0, r3
 8009814:	6871      	ldr	r1, [r6, #4]
 8009816:	d96e      	bls.n	80098f6 <_dtoa_r+0x33e>
 8009818:	4620      	mov	r0, r4
 800981a:	f000 fe88 	bl	800a52e <_Balloc>
 800981e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009820:	6030      	str	r0, [r6, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f1b8 0f0e 	cmp.w	r8, #14
 8009828:	9306      	str	r3, [sp, #24]
 800982a:	f200 80ed 	bhi.w	8009a08 <_dtoa_r+0x450>
 800982e:	2d00      	cmp	r5, #0
 8009830:	f000 80ea 	beq.w	8009a08 <_dtoa_r+0x450>
 8009834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009838:	f1ba 0f00 	cmp.w	sl, #0
 800983c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009840:	dd77      	ble.n	8009932 <_dtoa_r+0x37a>
 8009842:	4a28      	ldr	r2, [pc, #160]	; (80098e4 <_dtoa_r+0x32c>)
 8009844:	f00a 030f 	and.w	r3, sl, #15
 8009848:	ea4f 162a 	mov.w	r6, sl, asr #4
 800984c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009850:	06f0      	lsls	r0, r6, #27
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800985a:	d568      	bpl.n	800992e <_dtoa_r+0x376>
 800985c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009860:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <_dtoa_r+0x330>)
 8009862:	2503      	movs	r5, #3
 8009864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009868:	f7f6 ff60 	bl	800072c <__aeabi_ddiv>
 800986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009870:	f006 060f 	and.w	r6, r6, #15
 8009874:	4f1c      	ldr	r7, [pc, #112]	; (80098e8 <_dtoa_r+0x330>)
 8009876:	e04f      	b.n	8009918 <_dtoa_r+0x360>
 8009878:	2301      	movs	r3, #1
 800987a:	9309      	str	r3, [sp, #36]	; 0x24
 800987c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800987e:	4453      	add	r3, sl
 8009880:	f103 0801 	add.w	r8, r3, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	4643      	mov	r3, r8
 8009888:	2b01      	cmp	r3, #1
 800988a:	bfb8      	it	lt
 800988c:	2301      	movlt	r3, #1
 800988e:	e7ba      	b.n	8009806 <_dtoa_r+0x24e>
 8009890:	2300      	movs	r3, #0
 8009892:	e7b2      	b.n	80097fa <_dtoa_r+0x242>
 8009894:	2300      	movs	r3, #0
 8009896:	e7f0      	b.n	800987a <_dtoa_r+0x2c2>
 8009898:	2501      	movs	r5, #1
 800989a:	2300      	movs	r3, #0
 800989c:	9509      	str	r5, [sp, #36]	; 0x24
 800989e:	931e      	str	r3, [sp, #120]	; 0x78
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	2200      	movs	r2, #0
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	4698      	mov	r8, r3
 80098aa:	2312      	movs	r3, #18
 80098ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80098ae:	e7aa      	b.n	8009806 <_dtoa_r+0x24e>
 80098b0:	2301      	movs	r3, #1
 80098b2:	9309      	str	r3, [sp, #36]	; 0x24
 80098b4:	e7f4      	b.n	80098a0 <_dtoa_r+0x2e8>
 80098b6:	bf00      	nop
 80098b8:	636f4361 	.word	0x636f4361
 80098bc:	3fd287a7 	.word	0x3fd287a7
 80098c0:	8b60c8b3 	.word	0x8b60c8b3
 80098c4:	3fc68a28 	.word	0x3fc68a28
 80098c8:	509f79fb 	.word	0x509f79fb
 80098cc:	3fd34413 	.word	0x3fd34413
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	0800b4fc 	.word	0x0800b4fc
 80098d8:	0800b4f3 	.word	0x0800b4f3
 80098dc:	0800ae3a 	.word	0x0800ae3a
 80098e0:	3ff80000 	.word	0x3ff80000
 80098e4:	0800b588 	.word	0x0800b588
 80098e8:	0800b560 	.word	0x0800b560
 80098ec:	2301      	movs	r3, #1
 80098ee:	9304      	str	r3, [sp, #16]
 80098f0:	4698      	mov	r8, r3
 80098f2:	461a      	mov	r2, r3
 80098f4:	e7da      	b.n	80098ac <_dtoa_r+0x2f4>
 80098f6:	3101      	adds	r1, #1
 80098f8:	6071      	str	r1, [r6, #4]
 80098fa:	0052      	lsls	r2, r2, #1
 80098fc:	e787      	b.n	800980e <_dtoa_r+0x256>
 80098fe:	07f1      	lsls	r1, r6, #31
 8009900:	d508      	bpl.n	8009914 <_dtoa_r+0x35c>
 8009902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990a:	f7f6 fde5 	bl	80004d8 <__aeabi_dmul>
 800990e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009912:	3501      	adds	r5, #1
 8009914:	1076      	asrs	r6, r6, #1
 8009916:	3708      	adds	r7, #8
 8009918:	2e00      	cmp	r6, #0
 800991a:	d1f0      	bne.n	80098fe <_dtoa_r+0x346>
 800991c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009924:	f7f6 ff02 	bl	800072c <__aeabi_ddiv>
 8009928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800992c:	e01b      	b.n	8009966 <_dtoa_r+0x3ae>
 800992e:	2502      	movs	r5, #2
 8009930:	e7a0      	b.n	8009874 <_dtoa_r+0x2bc>
 8009932:	f000 80a4 	beq.w	8009a7e <_dtoa_r+0x4c6>
 8009936:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800993a:	f1ca 0600 	rsb	r6, sl, #0
 800993e:	4ba0      	ldr	r3, [pc, #640]	; (8009bc0 <_dtoa_r+0x608>)
 8009940:	f006 020f 	and.w	r2, r6, #15
 8009944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7f6 fdc4 	bl	80004d8 <__aeabi_dmul>
 8009950:	2502      	movs	r5, #2
 8009952:	2300      	movs	r3, #0
 8009954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009958:	4f9a      	ldr	r7, [pc, #616]	; (8009bc4 <_dtoa_r+0x60c>)
 800995a:	1136      	asrs	r6, r6, #4
 800995c:	2e00      	cmp	r6, #0
 800995e:	f040 8083 	bne.w	8009a68 <_dtoa_r+0x4b0>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e0      	bne.n	8009928 <_dtoa_r+0x370>
 8009966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 808a 	beq.w	8009a82 <_dtoa_r+0x4ca>
 800996e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009972:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800997a:	2200      	movs	r2, #0
 800997c:	4b92      	ldr	r3, [pc, #584]	; (8009bc8 <_dtoa_r+0x610>)
 800997e:	f7f7 f81d 	bl	80009bc <__aeabi_dcmplt>
 8009982:	2800      	cmp	r0, #0
 8009984:	d07d      	beq.n	8009a82 <_dtoa_r+0x4ca>
 8009986:	f1b8 0f00 	cmp.w	r8, #0
 800998a:	d07a      	beq.n	8009a82 <_dtoa_r+0x4ca>
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd36      	ble.n	8009a00 <_dtoa_r+0x448>
 8009992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009996:	2200      	movs	r2, #0
 8009998:	4b8c      	ldr	r3, [pc, #560]	; (8009bcc <_dtoa_r+0x614>)
 800999a:	f7f6 fd9d 	bl	80004d8 <__aeabi_dmul>
 800999e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a2:	9e04      	ldr	r6, [sp, #16]
 80099a4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80099a8:	3501      	adds	r5, #1
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7f6 fd2a 	bl	8000404 <__aeabi_i2d>
 80099b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	2200      	movs	r2, #0
 80099ba:	4b85      	ldr	r3, [pc, #532]	; (8009bd0 <_dtoa_r+0x618>)
 80099bc:	f7f6 fbd6 	bl	800016c <__adddf3>
 80099c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80099c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80099c8:	950b      	str	r5, [sp, #44]	; 0x2c
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	d15c      	bne.n	8009a88 <_dtoa_r+0x4d0>
 80099ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d2:	2200      	movs	r2, #0
 80099d4:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <_dtoa_r+0x61c>)
 80099d6:	f7f6 fbc7 	bl	8000168 <__aeabi_dsub>
 80099da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099dc:	462b      	mov	r3, r5
 80099de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e2:	f7f7 f809 	bl	80009f8 <__aeabi_dcmpgt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f040 8281 	bne.w	8009eee <_dtoa_r+0x936>
 80099ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80099f6:	f7f6 ffe1 	bl	80009bc <__aeabi_dcmplt>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f040 8275 	bne.w	8009eea <_dtoa_r+0x932>
 8009a00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f2c0 814b 	blt.w	8009ca6 <_dtoa_r+0x6ee>
 8009a10:	f1ba 0f0e 	cmp.w	sl, #14
 8009a14:	f300 8147 	bgt.w	8009ca6 <_dtoa_r+0x6ee>
 8009a18:	4b69      	ldr	r3, [pc, #420]	; (8009bc0 <_dtoa_r+0x608>)
 8009a1a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f280 80d7 	bge.w	8009bdc <_dtoa_r+0x624>
 8009a2e:	f1b8 0f00 	cmp.w	r8, #0
 8009a32:	f300 80d3 	bgt.w	8009bdc <_dtoa_r+0x624>
 8009a36:	f040 8257 	bne.w	8009ee8 <_dtoa_r+0x930>
 8009a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	4b64      	ldr	r3, [pc, #400]	; (8009bd4 <_dtoa_r+0x61c>)
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a4a:	f7f6 ffcb 	bl	80009e4 <__aeabi_dcmpge>
 8009a4e:	4646      	mov	r6, r8
 8009a50:	4647      	mov	r7, r8
 8009a52:	2800      	cmp	r0, #0
 8009a54:	f040 822d 	bne.w	8009eb2 <_dtoa_r+0x8fa>
 8009a58:	9b06      	ldr	r3, [sp, #24]
 8009a5a:	9a06      	ldr	r2, [sp, #24]
 8009a5c:	1c5d      	adds	r5, r3, #1
 8009a5e:	2331      	movs	r3, #49	; 0x31
 8009a60:	f10a 0a01 	add.w	sl, sl, #1
 8009a64:	7013      	strb	r3, [r2, #0]
 8009a66:	e228      	b.n	8009eba <_dtoa_r+0x902>
 8009a68:	07f2      	lsls	r2, r6, #31
 8009a6a:	d505      	bpl.n	8009a78 <_dtoa_r+0x4c0>
 8009a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a70:	f7f6 fd32 	bl	80004d8 <__aeabi_dmul>
 8009a74:	2301      	movs	r3, #1
 8009a76:	3501      	adds	r5, #1
 8009a78:	1076      	asrs	r6, r6, #1
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	e76e      	b.n	800995c <_dtoa_r+0x3a4>
 8009a7e:	2502      	movs	r5, #2
 8009a80:	e771      	b.n	8009966 <_dtoa_r+0x3ae>
 8009a82:	4657      	mov	r7, sl
 8009a84:	4646      	mov	r6, r8
 8009a86:	e790      	b.n	80099aa <_dtoa_r+0x3f2>
 8009a88:	4b4d      	ldr	r3, [pc, #308]	; (8009bc0 <_dtoa_r+0x608>)
 8009a8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a8e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d048      	beq.n	8009b2a <_dtoa_r+0x572>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	494e      	ldr	r1, [pc, #312]	; (8009bd8 <_dtoa_r+0x620>)
 8009aa0:	f7f6 fe44 	bl	800072c <__aeabi_ddiv>
 8009aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009aa8:	f7f6 fb5e 	bl	8000168 <__aeabi_dsub>
 8009aac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ab0:	9d06      	ldr	r5, [sp, #24]
 8009ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab6:	f7f6 ffbf 	bl	8000a38 <__aeabi_d2iz>
 8009aba:	9011      	str	r0, [sp, #68]	; 0x44
 8009abc:	f7f6 fca2 	bl	8000404 <__aeabi_i2d>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac8:	f7f6 fb4e 	bl	8000168 <__aeabi_dsub>
 8009acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad2:	3330      	adds	r3, #48	; 0x30
 8009ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009adc:	f7f6 ff6e 	bl	80009bc <__aeabi_dcmplt>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d163      	bne.n	8009bac <_dtoa_r+0x5f4>
 8009ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae8:	2000      	movs	r0, #0
 8009aea:	4937      	ldr	r1, [pc, #220]	; (8009bc8 <_dtoa_r+0x610>)
 8009aec:	f7f6 fb3c 	bl	8000168 <__aeabi_dsub>
 8009af0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009af4:	f7f6 ff62 	bl	80009bc <__aeabi_dcmplt>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	f040 80b5 	bne.w	8009c68 <_dtoa_r+0x6b0>
 8009afe:	9b06      	ldr	r3, [sp, #24]
 8009b00:	1aeb      	subs	r3, r5, r3
 8009b02:	429e      	cmp	r6, r3
 8009b04:	f77f af7c 	ble.w	8009a00 <_dtoa_r+0x448>
 8009b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <_dtoa_r+0x614>)
 8009b10:	f7f6 fce2 	bl	80004d8 <__aeabi_dmul>
 8009b14:	2200      	movs	r2, #0
 8009b16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b1e:	4b2b      	ldr	r3, [pc, #172]	; (8009bcc <_dtoa_r+0x614>)
 8009b20:	f7f6 fcda 	bl	80004d8 <__aeabi_dmul>
 8009b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b28:	e7c3      	b.n	8009ab2 <_dtoa_r+0x4fa>
 8009b2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b2e:	f7f6 fcd3 	bl	80004d8 <__aeabi_dmul>
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b38:	199d      	adds	r5, r3, r6
 8009b3a:	461e      	mov	r6, r3
 8009b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b40:	f7f6 ff7a 	bl	8000a38 <__aeabi_d2iz>
 8009b44:	9011      	str	r0, [sp, #68]	; 0x44
 8009b46:	f7f6 fc5d 	bl	8000404 <__aeabi_i2d>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b52:	f7f6 fb09 	bl	8000168 <__aeabi_dsub>
 8009b56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b5c:	3330      	adds	r3, #48	; 0x30
 8009b5e:	f806 3b01 	strb.w	r3, [r6], #1
 8009b62:	42ae      	cmp	r6, r5
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	d124      	bne.n	8009bb4 <_dtoa_r+0x5fc>
 8009b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b6e:	4b1a      	ldr	r3, [pc, #104]	; (8009bd8 <_dtoa_r+0x620>)
 8009b70:	f7f6 fafc 	bl	800016c <__adddf3>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7c:	f7f6 ff3c 	bl	80009f8 <__aeabi_dcmpgt>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d171      	bne.n	8009c68 <_dtoa_r+0x6b0>
 8009b84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b88:	2000      	movs	r0, #0
 8009b8a:	4913      	ldr	r1, [pc, #76]	; (8009bd8 <_dtoa_r+0x620>)
 8009b8c:	f7f6 faec 	bl	8000168 <__aeabi_dsub>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b98:	f7f6 ff10 	bl	80009bc <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f43f af2f 	beq.w	8009a00 <_dtoa_r+0x448>
 8009ba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ba6:	1e6a      	subs	r2, r5, #1
 8009ba8:	2b30      	cmp	r3, #48	; 0x30
 8009baa:	d001      	beq.n	8009bb0 <_dtoa_r+0x5f8>
 8009bac:	46ba      	mov	sl, r7
 8009bae:	e04a      	b.n	8009c46 <_dtoa_r+0x68e>
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	e7f6      	b.n	8009ba2 <_dtoa_r+0x5ea>
 8009bb4:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <_dtoa_r+0x614>)
 8009bb6:	f7f6 fc8f 	bl	80004d8 <__aeabi_dmul>
 8009bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bbe:	e7bd      	b.n	8009b3c <_dtoa_r+0x584>
 8009bc0:	0800b588 	.word	0x0800b588
 8009bc4:	0800b560 	.word	0x0800b560
 8009bc8:	3ff00000 	.word	0x3ff00000
 8009bcc:	40240000 	.word	0x40240000
 8009bd0:	401c0000 	.word	0x401c0000
 8009bd4:	40140000 	.word	0x40140000
 8009bd8:	3fe00000 	.word	0x3fe00000
 8009bdc:	9d06      	ldr	r5, [sp, #24]
 8009bde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 fd9f 	bl	800072c <__aeabi_ddiv>
 8009bee:	f7f6 ff23 	bl	8000a38 <__aeabi_d2iz>
 8009bf2:	4681      	mov	r9, r0
 8009bf4:	f7f6 fc06 	bl	8000404 <__aeabi_i2d>
 8009bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bfc:	f7f6 fc6c 	bl	80004d8 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 faae 	bl	8000168 <__aeabi_dsub>
 8009c0c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009c10:	f805 6b01 	strb.w	r6, [r5], #1
 8009c14:	9e06      	ldr	r6, [sp, #24]
 8009c16:	4602      	mov	r2, r0
 8009c18:	1bae      	subs	r6, r5, r6
 8009c1a:	45b0      	cmp	r8, r6
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	d135      	bne.n	8009c8c <_dtoa_r+0x6d4>
 8009c20:	f7f6 faa4 	bl	800016c <__adddf3>
 8009c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c28:	4606      	mov	r6, r0
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	f7f6 fee4 	bl	80009f8 <__aeabi_dcmpgt>
 8009c30:	b9c8      	cbnz	r0, 8009c66 <_dtoa_r+0x6ae>
 8009c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 feb5 	bl	80009a8 <__aeabi_dcmpeq>
 8009c3e:	b110      	cbz	r0, 8009c46 <_dtoa_r+0x68e>
 8009c40:	f019 0f01 	tst.w	r9, #1
 8009c44:	d10f      	bne.n	8009c66 <_dtoa_r+0x6ae>
 8009c46:	4659      	mov	r1, fp
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fca4 	bl	800a596 <_Bfree>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c52:	702b      	strb	r3, [r5, #0]
 8009c54:	f10a 0301 	add.w	r3, sl, #1
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f43f acf3 	beq.w	8009648 <_dtoa_r+0x90>
 8009c62:	601d      	str	r5, [r3, #0]
 8009c64:	e4f0      	b.n	8009648 <_dtoa_r+0x90>
 8009c66:	4657      	mov	r7, sl
 8009c68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c6c:	1e6b      	subs	r3, r5, #1
 8009c6e:	2a39      	cmp	r2, #57	; 0x39
 8009c70:	d106      	bne.n	8009c80 <_dtoa_r+0x6c8>
 8009c72:	9a06      	ldr	r2, [sp, #24]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d107      	bne.n	8009c88 <_dtoa_r+0x6d0>
 8009c78:	2330      	movs	r3, #48	; 0x30
 8009c7a:	7013      	strb	r3, [r2, #0]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	3701      	adds	r7, #1
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	3201      	adds	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e791      	b.n	8009bac <_dtoa_r+0x5f4>
 8009c88:	461d      	mov	r5, r3
 8009c8a:	e7ed      	b.n	8009c68 <_dtoa_r+0x6b0>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4b99      	ldr	r3, [pc, #612]	; (8009ef4 <_dtoa_r+0x93c>)
 8009c90:	f7f6 fc22 	bl	80004d8 <__aeabi_dmul>
 8009c94:	2200      	movs	r2, #0
 8009c96:	2300      	movs	r3, #0
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	f7f6 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d09e      	beq.n	8009be2 <_dtoa_r+0x62a>
 8009ca4:	e7cf      	b.n	8009c46 <_dtoa_r+0x68e>
 8009ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	f000 8088 	beq.w	8009dbe <_dtoa_r+0x806>
 8009cae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cb0:	2a01      	cmp	r2, #1
 8009cb2:	dc6d      	bgt.n	8009d90 <_dtoa_r+0x7d8>
 8009cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	d066      	beq.n	8009d88 <_dtoa_r+0x7d0>
 8009cba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cbe:	464d      	mov	r5, r9
 8009cc0:	9e08      	ldr	r6, [sp, #32]
 8009cc2:	9a07      	ldr	r2, [sp, #28]
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	441a      	add	r2, r3
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4499      	add	r9, r3
 8009ccc:	9207      	str	r2, [sp, #28]
 8009cce:	f000 fd02 	bl	800a6d6 <__i2b>
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	dd0b      	ble.n	8009cf0 <_dtoa_r+0x738>
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd08      	ble.n	8009cf0 <_dtoa_r+0x738>
 8009cde:	42ab      	cmp	r3, r5
 8009ce0:	bfa8      	it	ge
 8009ce2:	462b      	movge	r3, r5
 8009ce4:	9a07      	ldr	r2, [sp, #28]
 8009ce6:	eba9 0903 	sub.w	r9, r9, r3
 8009cea:	1aed      	subs	r5, r5, r3
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	b1eb      	cbz	r3, 8009d30 <_dtoa_r+0x778>
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d065      	beq.n	8009dc6 <_dtoa_r+0x80e>
 8009cfa:	b18e      	cbz	r6, 8009d20 <_dtoa_r+0x768>
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4632      	mov	r2, r6
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 fd87 	bl	800a814 <__pow5mult>
 8009d06:	465a      	mov	r2, fp
 8009d08:	4601      	mov	r1, r0
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 fceb 	bl	800a6e8 <__multiply>
 8009d12:	4659      	mov	r1, fp
 8009d14:	900a      	str	r0, [sp, #40]	; 0x28
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fc3d 	bl	800a596 <_Bfree>
 8009d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1e:	469b      	mov	fp, r3
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	1b9a      	subs	r2, r3, r6
 8009d24:	d004      	beq.n	8009d30 <_dtoa_r+0x778>
 8009d26:	4659      	mov	r1, fp
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fd73 	bl	800a814 <__pow5mult>
 8009d2e:	4683      	mov	fp, r0
 8009d30:	2101      	movs	r1, #1
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fccf 	bl	800a6d6 <__i2b>
 8009d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 81c6 	beq.w	800a0ce <_dtoa_r+0xb16>
 8009d42:	461a      	mov	r2, r3
 8009d44:	4601      	mov	r1, r0
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fd64 	bl	800a814 <__pow5mult>
 8009d4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d4e:	4606      	mov	r6, r0
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	dc3e      	bgt.n	8009dd2 <_dtoa_r+0x81a>
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d137      	bne.n	8009dca <_dtoa_r+0x812>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d134      	bne.n	8009dce <_dtoa_r+0x816>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d6a:	0d1b      	lsrs	r3, r3, #20
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	b12b      	cbz	r3, 8009d7c <_dtoa_r+0x7c4>
 8009d70:	9b07      	ldr	r3, [sp, #28]
 8009d72:	f109 0901 	add.w	r9, r9, #1
 8009d76:	3301      	adds	r3, #1
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	9308      	str	r3, [sp, #32]
 8009d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d128      	bne.n	8009dd6 <_dtoa_r+0x81e>
 8009d84:	2001      	movs	r0, #1
 8009d86:	e02e      	b.n	8009de6 <_dtoa_r+0x82e>
 8009d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d8e:	e796      	b.n	8009cbe <_dtoa_r+0x706>
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	f108 36ff 	add.w	r6, r8, #4294967295
 8009d96:	42b3      	cmp	r3, r6
 8009d98:	bfb7      	itett	lt
 8009d9a:	9b08      	ldrlt	r3, [sp, #32]
 8009d9c:	1b9e      	subge	r6, r3, r6
 8009d9e:	1af2      	sublt	r2, r6, r3
 8009da0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009da2:	bfbf      	itttt	lt
 8009da4:	9608      	strlt	r6, [sp, #32]
 8009da6:	189b      	addlt	r3, r3, r2
 8009da8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009daa:	2600      	movlt	r6, #0
 8009dac:	f1b8 0f00 	cmp.w	r8, #0
 8009db0:	bfb9      	ittee	lt
 8009db2:	eba9 0508 	sublt.w	r5, r9, r8
 8009db6:	2300      	movlt	r3, #0
 8009db8:	464d      	movge	r5, r9
 8009dba:	4643      	movge	r3, r8
 8009dbc:	e781      	b.n	8009cc2 <_dtoa_r+0x70a>
 8009dbe:	9e08      	ldr	r6, [sp, #32]
 8009dc0:	464d      	mov	r5, r9
 8009dc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dc4:	e786      	b.n	8009cd4 <_dtoa_r+0x71c>
 8009dc6:	9a08      	ldr	r2, [sp, #32]
 8009dc8:	e7ad      	b.n	8009d26 <_dtoa_r+0x76e>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e7d6      	b.n	8009d7c <_dtoa_r+0x7c4>
 8009dce:	9b02      	ldr	r3, [sp, #8]
 8009dd0:	e7d4      	b.n	8009d7c <_dtoa_r+0x7c4>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9308      	str	r3, [sp, #32]
 8009dd6:	6933      	ldr	r3, [r6, #16]
 8009dd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ddc:	6918      	ldr	r0, [r3, #16]
 8009dde:	f000 fc2c 	bl	800a63a <__hi0bits>
 8009de2:	f1c0 0020 	rsb	r0, r0, #32
 8009de6:	9b07      	ldr	r3, [sp, #28]
 8009de8:	4418      	add	r0, r3
 8009dea:	f010 001f 	ands.w	r0, r0, #31
 8009dee:	d047      	beq.n	8009e80 <_dtoa_r+0x8c8>
 8009df0:	f1c0 0320 	rsb	r3, r0, #32
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	dd3b      	ble.n	8009e70 <_dtoa_r+0x8b8>
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	f1c0 001c 	rsb	r0, r0, #28
 8009dfe:	4481      	add	r9, r0
 8009e00:	4405      	add	r5, r0
 8009e02:	4403      	add	r3, r0
 8009e04:	9307      	str	r3, [sp, #28]
 8009e06:	f1b9 0f00 	cmp.w	r9, #0
 8009e0a:	dd05      	ble.n	8009e18 <_dtoa_r+0x860>
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	464a      	mov	r2, r9
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fd4d 	bl	800a8b0 <__lshift>
 8009e16:	4683      	mov	fp, r0
 8009e18:	9b07      	ldr	r3, [sp, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dd05      	ble.n	8009e2a <_dtoa_r+0x872>
 8009e1e:	4631      	mov	r1, r6
 8009e20:	461a      	mov	r2, r3
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fd44 	bl	800a8b0 <__lshift>
 8009e28:	4606      	mov	r6, r0
 8009e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e2c:	b353      	cbz	r3, 8009e84 <_dtoa_r+0x8cc>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4658      	mov	r0, fp
 8009e32:	f000 fd91 	bl	800a958 <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	da24      	bge.n	8009e84 <_dtoa_r+0x8cc>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	4659      	mov	r1, fp
 8009e3e:	220a      	movs	r2, #10
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fbbf 	bl	800a5c4 <__multadd>
 8009e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e4c:	4683      	mov	fp, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 8144 	beq.w	800a0dc <_dtoa_r+0xb24>
 8009e54:	2300      	movs	r3, #0
 8009e56:	4639      	mov	r1, r7
 8009e58:	220a      	movs	r2, #10
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 fbb2 	bl	800a5c4 <__multadd>
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	4607      	mov	r7, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dc4d      	bgt.n	8009f04 <_dtoa_r+0x94c>
 8009e68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	dd4a      	ble.n	8009f04 <_dtoa_r+0x94c>
 8009e6e:	e011      	b.n	8009e94 <_dtoa_r+0x8dc>
 8009e70:	d0c9      	beq.n	8009e06 <_dtoa_r+0x84e>
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	331c      	adds	r3, #28
 8009e76:	441a      	add	r2, r3
 8009e78:	4499      	add	r9, r3
 8009e7a:	441d      	add	r5, r3
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	e7c1      	b.n	8009e04 <_dtoa_r+0x84c>
 8009e80:	4603      	mov	r3, r0
 8009e82:	e7f6      	b.n	8009e72 <_dtoa_r+0x8ba>
 8009e84:	f1b8 0f00 	cmp.w	r8, #0
 8009e88:	dc36      	bgt.n	8009ef8 <_dtoa_r+0x940>
 8009e8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	dd33      	ble.n	8009ef8 <_dtoa_r+0x940>
 8009e90:	f8cd 8010 	str.w	r8, [sp, #16]
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	b963      	cbnz	r3, 8009eb2 <_dtoa_r+0x8fa>
 8009e98:	4631      	mov	r1, r6
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fb91 	bl	800a5c4 <__multadd>
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	f000 fd56 	bl	800a958 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f73f add3 	bgt.w	8009a58 <_dtoa_r+0x4a0>
 8009eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009eb4:	9d06      	ldr	r5, [sp, #24]
 8009eb6:	ea6f 0a03 	mvn.w	sl, r3
 8009eba:	f04f 0900 	mov.w	r9, #0
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fb68 	bl	800a596 <_Bfree>
 8009ec6:	2f00      	cmp	r7, #0
 8009ec8:	f43f aebd 	beq.w	8009c46 <_dtoa_r+0x68e>
 8009ecc:	f1b9 0f00 	cmp.w	r9, #0
 8009ed0:	d005      	beq.n	8009ede <_dtoa_r+0x926>
 8009ed2:	45b9      	cmp	r9, r7
 8009ed4:	d003      	beq.n	8009ede <_dtoa_r+0x926>
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fb5c 	bl	800a596 <_Bfree>
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 fb58 	bl	800a596 <_Bfree>
 8009ee6:	e6ae      	b.n	8009c46 <_dtoa_r+0x68e>
 8009ee8:	2600      	movs	r6, #0
 8009eea:	4637      	mov	r7, r6
 8009eec:	e7e1      	b.n	8009eb2 <_dtoa_r+0x8fa>
 8009eee:	46ba      	mov	sl, r7
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	e5b1      	b.n	8009a58 <_dtoa_r+0x4a0>
 8009ef4:	40240000 	.word	0x40240000
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	f8cd 8010 	str.w	r8, [sp, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80f3 	beq.w	800a0ea <_dtoa_r+0xb32>
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	dd05      	ble.n	8009f14 <_dtoa_r+0x95c>
 8009f08:	4639      	mov	r1, r7
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f000 fccf 	bl	800a8b0 <__lshift>
 8009f12:	4607      	mov	r7, r0
 8009f14:	9b08      	ldr	r3, [sp, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d04c      	beq.n	8009fb4 <_dtoa_r+0x9fc>
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fb06 	bl	800a52e <_Balloc>
 8009f22:	4605      	mov	r5, r0
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	f107 010c 	add.w	r1, r7, #12
 8009f2a:	3202      	adds	r2, #2
 8009f2c:	0092      	lsls	r2, r2, #2
 8009f2e:	300c      	adds	r0, #12
 8009f30:	f000 faf0 	bl	800a514 <memcpy>
 8009f34:	2201      	movs	r2, #1
 8009f36:	4629      	mov	r1, r5
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 fcb9 	bl	800a8b0 <__lshift>
 8009f3e:	46b9      	mov	r9, r7
 8009f40:	4607      	mov	r7, r0
 8009f42:	9b06      	ldr	r3, [sp, #24]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	9308      	str	r3, [sp, #32]
 8009f4e:	4631      	mov	r1, r6
 8009f50:	4658      	mov	r0, fp
 8009f52:	f7ff faa1 	bl	8009498 <quorem>
 8009f56:	4649      	mov	r1, r9
 8009f58:	4605      	mov	r5, r0
 8009f5a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f5e:	4658      	mov	r0, fp
 8009f60:	f000 fcfa 	bl	800a958 <__mcmp>
 8009f64:	463a      	mov	r2, r7
 8009f66:	9002      	str	r0, [sp, #8]
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fd0e 	bl	800a98c <__mdiff>
 8009f70:	68c3      	ldr	r3, [r0, #12]
 8009f72:	4602      	mov	r2, r0
 8009f74:	bb03      	cbnz	r3, 8009fb8 <_dtoa_r+0xa00>
 8009f76:	4601      	mov	r1, r0
 8009f78:	9009      	str	r0, [sp, #36]	; 0x24
 8009f7a:	4658      	mov	r0, fp
 8009f7c:	f000 fcec 	bl	800a958 <__mcmp>
 8009f80:	4603      	mov	r3, r0
 8009f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f84:	4611      	mov	r1, r2
 8009f86:	4620      	mov	r0, r4
 8009f88:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8a:	f000 fb04 	bl	800a596 <_Bfree>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f90:	b9a3      	cbnz	r3, 8009fbc <_dtoa_r+0xa04>
 8009f92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009f94:	b992      	cbnz	r2, 8009fbc <_dtoa_r+0xa04>
 8009f96:	9a08      	ldr	r2, [sp, #32]
 8009f98:	b982      	cbnz	r2, 8009fbc <_dtoa_r+0xa04>
 8009f9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f9e:	d029      	beq.n	8009ff4 <_dtoa_r+0xa3c>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dd01      	ble.n	8009faa <_dtoa_r+0x9f2>
 8009fa6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009faa:	9b07      	ldr	r3, [sp, #28]
 8009fac:	1c5d      	adds	r5, r3, #1
 8009fae:	f883 8000 	strb.w	r8, [r3]
 8009fb2:	e784      	b.n	8009ebe <_dtoa_r+0x906>
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	e7c2      	b.n	8009f3e <_dtoa_r+0x986>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e7e3      	b.n	8009f84 <_dtoa_r+0x9cc>
 8009fbc:	9a02      	ldr	r2, [sp, #8]
 8009fbe:	2a00      	cmp	r2, #0
 8009fc0:	db04      	blt.n	8009fcc <_dtoa_r+0xa14>
 8009fc2:	d123      	bne.n	800a00c <_dtoa_r+0xa54>
 8009fc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009fc6:	bb0a      	cbnz	r2, 800a00c <_dtoa_r+0xa54>
 8009fc8:	9a08      	ldr	r2, [sp, #32]
 8009fca:	b9fa      	cbnz	r2, 800a00c <_dtoa_r+0xa54>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	ddec      	ble.n	8009faa <_dtoa_r+0x9f2>
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fc6b 	bl	800a8b0 <__lshift>
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4683      	mov	fp, r0
 8009fde:	f000 fcbb 	bl	800a958 <__mcmp>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	dc03      	bgt.n	8009fee <_dtoa_r+0xa36>
 8009fe6:	d1e0      	bne.n	8009faa <_dtoa_r+0x9f2>
 8009fe8:	f018 0f01 	tst.w	r8, #1
 8009fec:	d0dd      	beq.n	8009faa <_dtoa_r+0x9f2>
 8009fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ff2:	d1d8      	bne.n	8009fa6 <_dtoa_r+0x9ee>
 8009ff4:	9b07      	ldr	r3, [sp, #28]
 8009ff6:	9a07      	ldr	r2, [sp, #28]
 8009ff8:	1c5d      	adds	r5, r3, #1
 8009ffa:	2339      	movs	r3, #57	; 0x39
 8009ffc:	7013      	strb	r3, [r2, #0]
 8009ffe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a002:	1e6a      	subs	r2, r5, #1
 800a004:	2b39      	cmp	r3, #57	; 0x39
 800a006:	d04d      	beq.n	800a0a4 <_dtoa_r+0xaec>
 800a008:	3301      	adds	r3, #1
 800a00a:	e052      	b.n	800a0b2 <_dtoa_r+0xafa>
 800a00c:	9a07      	ldr	r2, [sp, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f102 0501 	add.w	r5, r2, #1
 800a014:	dd06      	ble.n	800a024 <_dtoa_r+0xa6c>
 800a016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a01a:	d0eb      	beq.n	8009ff4 <_dtoa_r+0xa3c>
 800a01c:	f108 0801 	add.w	r8, r8, #1
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	e7c4      	b.n	8009fae <_dtoa_r+0x9f6>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	1aeb      	subs	r3, r5, r3
 800a02a:	4293      	cmp	r3, r2
 800a02c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a030:	d021      	beq.n	800a076 <_dtoa_r+0xabe>
 800a032:	4659      	mov	r1, fp
 800a034:	2300      	movs	r3, #0
 800a036:	220a      	movs	r2, #10
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fac3 	bl	800a5c4 <__multadd>
 800a03e:	45b9      	cmp	r9, r7
 800a040:	4683      	mov	fp, r0
 800a042:	f04f 0300 	mov.w	r3, #0
 800a046:	f04f 020a 	mov.w	r2, #10
 800a04a:	4649      	mov	r1, r9
 800a04c:	4620      	mov	r0, r4
 800a04e:	d105      	bne.n	800a05c <_dtoa_r+0xaa4>
 800a050:	f000 fab8 	bl	800a5c4 <__multadd>
 800a054:	4681      	mov	r9, r0
 800a056:	4607      	mov	r7, r0
 800a058:	9507      	str	r5, [sp, #28]
 800a05a:	e778      	b.n	8009f4e <_dtoa_r+0x996>
 800a05c:	f000 fab2 	bl	800a5c4 <__multadd>
 800a060:	4639      	mov	r1, r7
 800a062:	4681      	mov	r9, r0
 800a064:	2300      	movs	r3, #0
 800a066:	220a      	movs	r2, #10
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 faab 	bl	800a5c4 <__multadd>
 800a06e:	4607      	mov	r7, r0
 800a070:	e7f2      	b.n	800a058 <_dtoa_r+0xaa0>
 800a072:	f04f 0900 	mov.w	r9, #0
 800a076:	4659      	mov	r1, fp
 800a078:	2201      	movs	r2, #1
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fc18 	bl	800a8b0 <__lshift>
 800a080:	4631      	mov	r1, r6
 800a082:	4683      	mov	fp, r0
 800a084:	f000 fc68 	bl	800a958 <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	dcb8      	bgt.n	8009ffe <_dtoa_r+0xa46>
 800a08c:	d102      	bne.n	800a094 <_dtoa_r+0xadc>
 800a08e:	f018 0f01 	tst.w	r8, #1
 800a092:	d1b4      	bne.n	8009ffe <_dtoa_r+0xa46>
 800a094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a098:	1e6a      	subs	r2, r5, #1
 800a09a:	2b30      	cmp	r3, #48	; 0x30
 800a09c:	f47f af0f 	bne.w	8009ebe <_dtoa_r+0x906>
 800a0a0:	4615      	mov	r5, r2
 800a0a2:	e7f7      	b.n	800a094 <_dtoa_r+0xadc>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d105      	bne.n	800a0b6 <_dtoa_r+0xafe>
 800a0aa:	2331      	movs	r3, #49	; 0x31
 800a0ac:	9a06      	ldr	r2, [sp, #24]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	7013      	strb	r3, [r2, #0]
 800a0b4:	e703      	b.n	8009ebe <_dtoa_r+0x906>
 800a0b6:	4615      	mov	r5, r2
 800a0b8:	e7a1      	b.n	8009ffe <_dtoa_r+0xa46>
 800a0ba:	4b17      	ldr	r3, [pc, #92]	; (800a118 <_dtoa_r+0xb60>)
 800a0bc:	f7ff bae1 	b.w	8009682 <_dtoa_r+0xca>
 800a0c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f47f aabb 	bne.w	800963e <_dtoa_r+0x86>
 800a0c8:	4b14      	ldr	r3, [pc, #80]	; (800a11c <_dtoa_r+0xb64>)
 800a0ca:	f7ff bada 	b.w	8009682 <_dtoa_r+0xca>
 800a0ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	f77f ae3f 	ble.w	8009d54 <_dtoa_r+0x79c>
 800a0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d8:	9308      	str	r3, [sp, #32]
 800a0da:	e653      	b.n	8009d84 <_dtoa_r+0x7cc>
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dc03      	bgt.n	800a0ea <_dtoa_r+0xb32>
 800a0e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	f73f aed5 	bgt.w	8009e94 <_dtoa_r+0x8dc>
 800a0ea:	9d06      	ldr	r5, [sp, #24]
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	f7ff f9d2 	bl	8009498 <quorem>
 800a0f4:	9b06      	ldr	r3, [sp, #24]
 800a0f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a0fa:	f805 8b01 	strb.w	r8, [r5], #1
 800a0fe:	9a04      	ldr	r2, [sp, #16]
 800a100:	1aeb      	subs	r3, r5, r3
 800a102:	429a      	cmp	r2, r3
 800a104:	ddb5      	ble.n	800a072 <_dtoa_r+0xaba>
 800a106:	4659      	mov	r1, fp
 800a108:	2300      	movs	r3, #0
 800a10a:	220a      	movs	r2, #10
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 fa59 	bl	800a5c4 <__multadd>
 800a112:	4683      	mov	fp, r0
 800a114:	e7ea      	b.n	800a0ec <_dtoa_r+0xb34>
 800a116:	bf00      	nop
 800a118:	0800ae39 	.word	0x0800ae39
 800a11c:	0800b4f3 	.word	0x0800b4f3

0800a120 <__sflush_r>:
 800a120:	898a      	ldrh	r2, [r1, #12]
 800a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	4605      	mov	r5, r0
 800a128:	0710      	lsls	r0, r2, #28
 800a12a:	460c      	mov	r4, r1
 800a12c:	d458      	bmi.n	800a1e0 <__sflush_r+0xc0>
 800a12e:	684b      	ldr	r3, [r1, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc05      	bgt.n	800a140 <__sflush_r+0x20>
 800a134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	dc02      	bgt.n	800a140 <__sflush_r+0x20>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a142:	2e00      	cmp	r6, #0
 800a144:	d0f9      	beq.n	800a13a <__sflush_r+0x1a>
 800a146:	2300      	movs	r3, #0
 800a148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a14c:	682f      	ldr	r7, [r5, #0]
 800a14e:	6a21      	ldr	r1, [r4, #32]
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	d032      	beq.n	800a1ba <__sflush_r+0x9a>
 800a154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	075a      	lsls	r2, r3, #29
 800a15a:	d505      	bpl.n	800a168 <__sflush_r+0x48>
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	1ac0      	subs	r0, r0, r3
 800a160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a162:	b10b      	cbz	r3, 800a168 <__sflush_r+0x48>
 800a164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a166:	1ac0      	subs	r0, r0, r3
 800a168:	2300      	movs	r3, #0
 800a16a:	4602      	mov	r2, r0
 800a16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16e:	6a21      	ldr	r1, [r4, #32]
 800a170:	4628      	mov	r0, r5
 800a172:	47b0      	blx	r6
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	d106      	bne.n	800a188 <__sflush_r+0x68>
 800a17a:	6829      	ldr	r1, [r5, #0]
 800a17c:	291d      	cmp	r1, #29
 800a17e:	d848      	bhi.n	800a212 <__sflush_r+0xf2>
 800a180:	4a29      	ldr	r2, [pc, #164]	; (800a228 <__sflush_r+0x108>)
 800a182:	40ca      	lsrs	r2, r1
 800a184:	07d6      	lsls	r6, r2, #31
 800a186:	d544      	bpl.n	800a212 <__sflush_r+0xf2>
 800a188:	2200      	movs	r2, #0
 800a18a:	6062      	str	r2, [r4, #4]
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	04d9      	lsls	r1, r3, #19
 800a190:	6022      	str	r2, [r4, #0]
 800a192:	d504      	bpl.n	800a19e <__sflush_r+0x7e>
 800a194:	1c42      	adds	r2, r0, #1
 800a196:	d101      	bne.n	800a19c <__sflush_r+0x7c>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b903      	cbnz	r3, 800a19e <__sflush_r+0x7e>
 800a19c:	6560      	str	r0, [r4, #84]	; 0x54
 800a19e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a0:	602f      	str	r7, [r5, #0]
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d0c9      	beq.n	800a13a <__sflush_r+0x1a>
 800a1a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d002      	beq.n	800a1b4 <__sflush_r+0x94>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f7fe f874 	bl	800829c <_free_r>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	6360      	str	r0, [r4, #52]	; 0x34
 800a1b8:	e7c0      	b.n	800a13c <__sflush_r+0x1c>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b0      	blx	r6
 800a1c0:	1c41      	adds	r1, r0, #1
 800a1c2:	d1c8      	bne.n	800a156 <__sflush_r+0x36>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c5      	beq.n	800a156 <__sflush_r+0x36>
 800a1ca:	2b1d      	cmp	r3, #29
 800a1cc:	d001      	beq.n	800a1d2 <__sflush_r+0xb2>
 800a1ce:	2b16      	cmp	r3, #22
 800a1d0:	d101      	bne.n	800a1d6 <__sflush_r+0xb6>
 800a1d2:	602f      	str	r7, [r5, #0]
 800a1d4:	e7b1      	b.n	800a13a <__sflush_r+0x1a>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e7ad      	b.n	800a13c <__sflush_r+0x1c>
 800a1e0:	690f      	ldr	r7, [r1, #16]
 800a1e2:	2f00      	cmp	r7, #0
 800a1e4:	d0a9      	beq.n	800a13a <__sflush_r+0x1a>
 800a1e6:	0793      	lsls	r3, r2, #30
 800a1e8:	bf18      	it	ne
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	680e      	ldr	r6, [r1, #0]
 800a1ee:	bf08      	it	eq
 800a1f0:	694b      	ldreq	r3, [r1, #20]
 800a1f2:	eba6 0807 	sub.w	r8, r6, r7
 800a1f6:	600f      	str	r7, [r1, #0]
 800a1f8:	608b      	str	r3, [r1, #8]
 800a1fa:	f1b8 0f00 	cmp.w	r8, #0
 800a1fe:	dd9c      	ble.n	800a13a <__sflush_r+0x1a>
 800a200:	4643      	mov	r3, r8
 800a202:	463a      	mov	r2, r7
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	4628      	mov	r0, r5
 800a208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a20a:	47b0      	blx	r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	dc06      	bgt.n	800a21e <__sflush_r+0xfe>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e78e      	b.n	800a13c <__sflush_r+0x1c>
 800a21e:	4407      	add	r7, r0
 800a220:	eba8 0800 	sub.w	r8, r8, r0
 800a224:	e7e9      	b.n	800a1fa <__sflush_r+0xda>
 800a226:	bf00      	nop
 800a228:	20400001 	.word	0x20400001

0800a22c <_fflush_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	b1db      	cbz	r3, 800a26e <_fflush_r+0x42>
 800a236:	b118      	cbz	r0, 800a240 <_fflush_r+0x14>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_fflush_r+0x14>
 800a23c:	f000 f860 	bl	800a300 <__sinit>
 800a240:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <_fflush_r+0x48>)
 800a242:	429c      	cmp	r4, r3
 800a244:	d109      	bne.n	800a25a <_fflush_r+0x2e>
 800a246:	686c      	ldr	r4, [r5, #4]
 800a248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24c:	b17b      	cbz	r3, 800a26e <_fflush_r+0x42>
 800a24e:	4621      	mov	r1, r4
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a256:	f7ff bf63 	b.w	800a120 <__sflush_r>
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <_fflush_r+0x4c>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d101      	bne.n	800a264 <_fflush_r+0x38>
 800a260:	68ac      	ldr	r4, [r5, #8]
 800a262:	e7f1      	b.n	800a248 <_fflush_r+0x1c>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_fflush_r+0x50>)
 800a266:	429c      	cmp	r4, r3
 800a268:	bf08      	it	eq
 800a26a:	68ec      	ldreq	r4, [r5, #12]
 800a26c:	e7ec      	b.n	800a248 <_fflush_r+0x1c>
 800a26e:	2000      	movs	r0, #0
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	0800b520 	.word	0x0800b520
 800a278:	0800b540 	.word	0x0800b540
 800a27c:	0800b500 	.word	0x0800b500

0800a280 <std>:
 800a280:	2300      	movs	r3, #0
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	e9c0 3300 	strd	r3, r3, [r0]
 800a28a:	6083      	str	r3, [r0, #8]
 800a28c:	8181      	strh	r1, [r0, #12]
 800a28e:	6643      	str	r3, [r0, #100]	; 0x64
 800a290:	81c2      	strh	r2, [r0, #14]
 800a292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a296:	6183      	str	r3, [r0, #24]
 800a298:	4619      	mov	r1, r3
 800a29a:	2208      	movs	r2, #8
 800a29c:	305c      	adds	r0, #92	; 0x5c
 800a29e:	f7fd fff5 	bl	800828c <memset>
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <std+0x38>)
 800a2a4:	6224      	str	r4, [r4, #32]
 800a2a6:	6263      	str	r3, [r4, #36]	; 0x24
 800a2a8:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <std+0x3c>)
 800a2aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <std+0x40>)
 800a2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <std+0x44>)
 800a2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800ab03 	.word	0x0800ab03
 800a2bc:	0800ab25 	.word	0x0800ab25
 800a2c0:	0800ab5d 	.word	0x0800ab5d
 800a2c4:	0800ab81 	.word	0x0800ab81

0800a2c8 <_cleanup_r>:
 800a2c8:	4901      	ldr	r1, [pc, #4]	; (800a2d0 <_cleanup_r+0x8>)
 800a2ca:	f000 b885 	b.w	800a3d8 <_fwalk_reent>
 800a2ce:	bf00      	nop
 800a2d0:	0800a22d 	.word	0x0800a22d

0800a2d4 <__sfmoreglue>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	2568      	movs	r5, #104	; 0x68
 800a2d8:	1e4a      	subs	r2, r1, #1
 800a2da:	4355      	muls	r5, r2
 800a2dc:	460e      	mov	r6, r1
 800a2de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2e2:	f7fe f827 	bl	8008334 <_malloc_r>
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	b140      	cbz	r0, 800a2fc <__sfmoreglue+0x28>
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	60a0      	str	r0, [r4, #8]
 800a2f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2f8:	f7fd ffc8 	bl	800828c <memset>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}

0800a300 <__sinit>:
 800a300:	6983      	ldr	r3, [r0, #24]
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	bb33      	cbnz	r3, 800a356 <__sinit+0x56>
 800a308:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a30c:	6503      	str	r3, [r0, #80]	; 0x50
 800a30e:	4b12      	ldr	r3, [pc, #72]	; (800a358 <__sinit+0x58>)
 800a310:	4a12      	ldr	r2, [pc, #72]	; (800a35c <__sinit+0x5c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6282      	str	r2, [r0, #40]	; 0x28
 800a316:	4298      	cmp	r0, r3
 800a318:	bf04      	itt	eq
 800a31a:	2301      	moveq	r3, #1
 800a31c:	6183      	streq	r3, [r0, #24]
 800a31e:	f000 f81f 	bl	800a360 <__sfp>
 800a322:	6060      	str	r0, [r4, #4]
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f81b 	bl	800a360 <__sfp>
 800a32a:	60a0      	str	r0, [r4, #8]
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f817 	bl	800a360 <__sfp>
 800a332:	2200      	movs	r2, #0
 800a334:	60e0      	str	r0, [r4, #12]
 800a336:	2104      	movs	r1, #4
 800a338:	6860      	ldr	r0, [r4, #4]
 800a33a:	f7ff ffa1 	bl	800a280 <std>
 800a33e:	2201      	movs	r2, #1
 800a340:	2109      	movs	r1, #9
 800a342:	68a0      	ldr	r0, [r4, #8]
 800a344:	f7ff ff9c 	bl	800a280 <std>
 800a348:	2202      	movs	r2, #2
 800a34a:	2112      	movs	r1, #18
 800a34c:	68e0      	ldr	r0, [r4, #12]
 800a34e:	f7ff ff97 	bl	800a280 <std>
 800a352:	2301      	movs	r3, #1
 800a354:	61a3      	str	r3, [r4, #24]
 800a356:	bd10      	pop	{r4, pc}
 800a358:	0800ae14 	.word	0x0800ae14
 800a35c:	0800a2c9 	.word	0x0800a2c9

0800a360 <__sfp>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	4b1b      	ldr	r3, [pc, #108]	; (800a3d0 <__sfp+0x70>)
 800a364:	4607      	mov	r7, r0
 800a366:	681e      	ldr	r6, [r3, #0]
 800a368:	69b3      	ldr	r3, [r6, #24]
 800a36a:	b913      	cbnz	r3, 800a372 <__sfp+0x12>
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff ffc7 	bl	800a300 <__sinit>
 800a372:	3648      	adds	r6, #72	; 0x48
 800a374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	d503      	bpl.n	800a384 <__sfp+0x24>
 800a37c:	6833      	ldr	r3, [r6, #0]
 800a37e:	b133      	cbz	r3, 800a38e <__sfp+0x2e>
 800a380:	6836      	ldr	r6, [r6, #0]
 800a382:	e7f7      	b.n	800a374 <__sfp+0x14>
 800a384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a388:	b16d      	cbz	r5, 800a3a6 <__sfp+0x46>
 800a38a:	3468      	adds	r4, #104	; 0x68
 800a38c:	e7f4      	b.n	800a378 <__sfp+0x18>
 800a38e:	2104      	movs	r1, #4
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff ff9f 	bl	800a2d4 <__sfmoreglue>
 800a396:	6030      	str	r0, [r6, #0]
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1f1      	bne.n	800a380 <__sfp+0x20>
 800a39c:	230c      	movs	r3, #12
 800a39e:	4604      	mov	r4, r0
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <__sfp+0x74>)
 800a3a8:	6665      	str	r5, [r4, #100]	; 0x64
 800a3aa:	e9c4 5500 	strd	r5, r5, [r4]
 800a3ae:	60a5      	str	r5, [r4, #8]
 800a3b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a3b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3c0:	f7fd ff64 	bl	800828c <memset>
 800a3c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3cc:	e7e9      	b.n	800a3a2 <__sfp+0x42>
 800a3ce:	bf00      	nop
 800a3d0:	0800ae14 	.word	0x0800ae14
 800a3d4:	ffff0001 	.word	0xffff0001

0800a3d8 <_fwalk_reent>:
 800a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3e6:	b914      	cbnz	r4, 800a3ee <_fwalk_reent+0x16>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a3f2:	3f01      	subs	r7, #1
 800a3f4:	d501      	bpl.n	800a3fa <_fwalk_reent+0x22>
 800a3f6:	6824      	ldr	r4, [r4, #0]
 800a3f8:	e7f5      	b.n	800a3e6 <_fwalk_reent+0xe>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d907      	bls.n	800a410 <_fwalk_reent+0x38>
 800a400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a404:	3301      	adds	r3, #1
 800a406:	d003      	beq.n	800a410 <_fwalk_reent+0x38>
 800a408:	4629      	mov	r1, r5
 800a40a:	4640      	mov	r0, r8
 800a40c:	47c8      	blx	r9
 800a40e:	4306      	orrs	r6, r0
 800a410:	3568      	adds	r5, #104	; 0x68
 800a412:	e7ee      	b.n	800a3f2 <_fwalk_reent+0x1a>

0800a414 <_localeconv_r>:
 800a414:	4b04      	ldr	r3, [pc, #16]	; (800a428 <_localeconv_r+0x14>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6a18      	ldr	r0, [r3, #32]
 800a41a:	4b04      	ldr	r3, [pc, #16]	; (800a42c <_localeconv_r+0x18>)
 800a41c:	2800      	cmp	r0, #0
 800a41e:	bf08      	it	eq
 800a420:	4618      	moveq	r0, r3
 800a422:	30f0      	adds	r0, #240	; 0xf0
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000184 	.word	0x20000184
 800a42c:	200001e8 	.word	0x200001e8

0800a430 <__swhatbuf_r>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	460e      	mov	r6, r1
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	b096      	sub	sp, #88	; 0x58
 800a43a:	2900      	cmp	r1, #0
 800a43c:	4614      	mov	r4, r2
 800a43e:	461d      	mov	r5, r3
 800a440:	da07      	bge.n	800a452 <__swhatbuf_r+0x22>
 800a442:	2300      	movs	r3, #0
 800a444:	602b      	str	r3, [r5, #0]
 800a446:	89b3      	ldrh	r3, [r6, #12]
 800a448:	061a      	lsls	r2, r3, #24
 800a44a:	d410      	bmi.n	800a46e <__swhatbuf_r+0x3e>
 800a44c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a450:	e00e      	b.n	800a470 <__swhatbuf_r+0x40>
 800a452:	466a      	mov	r2, sp
 800a454:	f000 fbba 	bl	800abcc <_fstat_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	dbf2      	blt.n	800a442 <__swhatbuf_r+0x12>
 800a45c:	9a01      	ldr	r2, [sp, #4]
 800a45e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a466:	425a      	negs	r2, r3
 800a468:	415a      	adcs	r2, r3
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	e7ee      	b.n	800a44c <__swhatbuf_r+0x1c>
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	2000      	movs	r0, #0
 800a472:	6023      	str	r3, [r4, #0]
 800a474:	b016      	add	sp, #88	; 0x58
 800a476:	bd70      	pop	{r4, r5, r6, pc}

0800a478 <__smakebuf_r>:
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a47c:	079d      	lsls	r5, r3, #30
 800a47e:	4606      	mov	r6, r0
 800a480:	460c      	mov	r4, r1
 800a482:	d507      	bpl.n	800a494 <__smakebuf_r+0x1c>
 800a484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	2301      	movs	r3, #1
 800a48e:	6163      	str	r3, [r4, #20]
 800a490:	b002      	add	sp, #8
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	ab01      	add	r3, sp, #4
 800a496:	466a      	mov	r2, sp
 800a498:	f7ff ffca 	bl	800a430 <__swhatbuf_r>
 800a49c:	9900      	ldr	r1, [sp, #0]
 800a49e:	4605      	mov	r5, r0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7fd ff47 	bl	8008334 <_malloc_r>
 800a4a6:	b948      	cbnz	r0, 800a4bc <__smakebuf_r+0x44>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	059a      	lsls	r2, r3, #22
 800a4ae:	d4ef      	bmi.n	800a490 <__smakebuf_r+0x18>
 800a4b0:	f023 0303 	bic.w	r3, r3, #3
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7e3      	b.n	800a484 <__smakebuf_r+0xc>
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <__smakebuf_r+0x7c>)
 800a4be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	6020      	str	r0, [r4, #0]
 800a4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	6120      	str	r0, [r4, #16]
 800a4ce:	6163      	str	r3, [r4, #20]
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	b15b      	cbz	r3, 800a4ec <__smakebuf_r+0x74>
 800a4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 fb89 	bl	800abf0 <_isatty_r>
 800a4de:	b128      	cbz	r0, 800a4ec <__smakebuf_r+0x74>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	f043 0301 	orr.w	r3, r3, #1
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	431d      	orrs	r5, r3
 800a4f0:	81a5      	strh	r5, [r4, #12]
 800a4f2:	e7cd      	b.n	800a490 <__smakebuf_r+0x18>
 800a4f4:	0800a2c9 	.word	0x0800a2c9

0800a4f8 <memchr>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	b2c9      	uxtb	r1, r1
 800a4fc:	4402      	add	r2, r0
 800a4fe:	4290      	cmp	r0, r2
 800a500:	4603      	mov	r3, r0
 800a502:	d101      	bne.n	800a508 <memchr+0x10>
 800a504:	2300      	movs	r3, #0
 800a506:	e003      	b.n	800a510 <memchr+0x18>
 800a508:	781c      	ldrb	r4, [r3, #0]
 800a50a:	3001      	adds	r0, #1
 800a50c:	428c      	cmp	r4, r1
 800a50e:	d1f6      	bne.n	800a4fe <memchr+0x6>
 800a510:	4618      	mov	r0, r3
 800a512:	bd10      	pop	{r4, pc}

0800a514 <memcpy>:
 800a514:	b510      	push	{r4, lr}
 800a516:	1e43      	subs	r3, r0, #1
 800a518:	440a      	add	r2, r1
 800a51a:	4291      	cmp	r1, r2
 800a51c:	d100      	bne.n	800a520 <memcpy+0xc>
 800a51e:	bd10      	pop	{r4, pc}
 800a520:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a524:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a528:	e7f7      	b.n	800a51a <memcpy+0x6>

0800a52a <__malloc_lock>:
 800a52a:	4770      	bx	lr

0800a52c <__malloc_unlock>:
 800a52c:	4770      	bx	lr

0800a52e <_Balloc>:
 800a52e:	b570      	push	{r4, r5, r6, lr}
 800a530:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a532:	4604      	mov	r4, r0
 800a534:	460e      	mov	r6, r1
 800a536:	b93d      	cbnz	r5, 800a548 <_Balloc+0x1a>
 800a538:	2010      	movs	r0, #16
 800a53a:	f7fd fe97 	bl	800826c <malloc>
 800a53e:	6260      	str	r0, [r4, #36]	; 0x24
 800a540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a544:	6005      	str	r5, [r0, #0]
 800a546:	60c5      	str	r5, [r0, #12]
 800a548:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a54a:	68eb      	ldr	r3, [r5, #12]
 800a54c:	b183      	cbz	r3, 800a570 <_Balloc+0x42>
 800a54e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a556:	b9b8      	cbnz	r0, 800a588 <_Balloc+0x5a>
 800a558:	2101      	movs	r1, #1
 800a55a:	fa01 f506 	lsl.w	r5, r1, r6
 800a55e:	1d6a      	adds	r2, r5, #5
 800a560:	0092      	lsls	r2, r2, #2
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fabf 	bl	800aae6 <_calloc_r>
 800a568:	b160      	cbz	r0, 800a584 <_Balloc+0x56>
 800a56a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a56e:	e00e      	b.n	800a58e <_Balloc+0x60>
 800a570:	2221      	movs	r2, #33	; 0x21
 800a572:	2104      	movs	r1, #4
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fab6 	bl	800aae6 <_calloc_r>
 800a57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a57c:	60e8      	str	r0, [r5, #12]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e4      	bne.n	800a54e <_Balloc+0x20>
 800a584:	2000      	movs	r0, #0
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	6802      	ldr	r2, [r0, #0]
 800a58a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a58e:	2300      	movs	r3, #0
 800a590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a594:	e7f7      	b.n	800a586 <_Balloc+0x58>

0800a596 <_Bfree>:
 800a596:	b570      	push	{r4, r5, r6, lr}
 800a598:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a59a:	4606      	mov	r6, r0
 800a59c:	460d      	mov	r5, r1
 800a59e:	b93c      	cbnz	r4, 800a5b0 <_Bfree+0x1a>
 800a5a0:	2010      	movs	r0, #16
 800a5a2:	f7fd fe63 	bl	800826c <malloc>
 800a5a6:	6270      	str	r0, [r6, #36]	; 0x24
 800a5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5ac:	6004      	str	r4, [r0, #0]
 800a5ae:	60c4      	str	r4, [r0, #12]
 800a5b0:	b13d      	cbz	r5, 800a5c2 <_Bfree+0x2c>
 800a5b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a5b4:	686a      	ldr	r2, [r5, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5bc:	6029      	str	r1, [r5, #0]
 800a5be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}

0800a5c4 <__multadd>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	461f      	mov	r7, r3
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	690d      	ldr	r5, [r1, #16]
 800a5d2:	f101 0c14 	add.w	ip, r1, #20
 800a5d6:	f8dc 0000 	ldr.w	r0, [ip]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	b281      	uxth	r1, r0
 800a5de:	fb02 7101 	mla	r1, r2, r1, r7
 800a5e2:	0c00      	lsrs	r0, r0, #16
 800a5e4:	0c0f      	lsrs	r7, r1, #16
 800a5e6:	fb02 7000 	mla	r0, r2, r0, r7
 800a5ea:	b289      	uxth	r1, r1
 800a5ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a5f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5fa:	dcec      	bgt.n	800a5d6 <__multadd+0x12>
 800a5fc:	b1d7      	cbz	r7, 800a634 <__multadd+0x70>
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	42ab      	cmp	r3, r5
 800a602:	dc12      	bgt.n	800a62a <__multadd+0x66>
 800a604:	6861      	ldr	r1, [r4, #4]
 800a606:	4630      	mov	r0, r6
 800a608:	3101      	adds	r1, #1
 800a60a:	f7ff ff90 	bl	800a52e <_Balloc>
 800a60e:	4680      	mov	r8, r0
 800a610:	6922      	ldr	r2, [r4, #16]
 800a612:	f104 010c 	add.w	r1, r4, #12
 800a616:	3202      	adds	r2, #2
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	300c      	adds	r0, #12
 800a61c:	f7ff ff7a 	bl	800a514 <memcpy>
 800a620:	4621      	mov	r1, r4
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffb7 	bl	800a596 <_Bfree>
 800a628:	4644      	mov	r4, r8
 800a62a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a62e:	3501      	adds	r5, #1
 800a630:	615f      	str	r7, [r3, #20]
 800a632:	6125      	str	r5, [r4, #16]
 800a634:	4620      	mov	r0, r4
 800a636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a63a <__hi0bits>:
 800a63a:	0c02      	lsrs	r2, r0, #16
 800a63c:	0412      	lsls	r2, r2, #16
 800a63e:	4603      	mov	r3, r0
 800a640:	b9b2      	cbnz	r2, 800a670 <__hi0bits+0x36>
 800a642:	0403      	lsls	r3, r0, #16
 800a644:	2010      	movs	r0, #16
 800a646:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a64a:	bf04      	itt	eq
 800a64c:	021b      	lsleq	r3, r3, #8
 800a64e:	3008      	addeq	r0, #8
 800a650:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a654:	bf04      	itt	eq
 800a656:	011b      	lsleq	r3, r3, #4
 800a658:	3004      	addeq	r0, #4
 800a65a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a65e:	bf04      	itt	eq
 800a660:	009b      	lsleq	r3, r3, #2
 800a662:	3002      	addeq	r0, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	db06      	blt.n	800a676 <__hi0bits+0x3c>
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	d503      	bpl.n	800a674 <__hi0bits+0x3a>
 800a66c:	3001      	adds	r0, #1
 800a66e:	4770      	bx	lr
 800a670:	2000      	movs	r0, #0
 800a672:	e7e8      	b.n	800a646 <__hi0bits+0xc>
 800a674:	2020      	movs	r0, #32
 800a676:	4770      	bx	lr

0800a678 <__lo0bits>:
 800a678:	6803      	ldr	r3, [r0, #0]
 800a67a:	4601      	mov	r1, r0
 800a67c:	f013 0207 	ands.w	r2, r3, #7
 800a680:	d00b      	beq.n	800a69a <__lo0bits+0x22>
 800a682:	07da      	lsls	r2, r3, #31
 800a684:	d423      	bmi.n	800a6ce <__lo0bits+0x56>
 800a686:	0798      	lsls	r0, r3, #30
 800a688:	bf49      	itett	mi
 800a68a:	085b      	lsrmi	r3, r3, #1
 800a68c:	089b      	lsrpl	r3, r3, #2
 800a68e:	2001      	movmi	r0, #1
 800a690:	600b      	strmi	r3, [r1, #0]
 800a692:	bf5c      	itt	pl
 800a694:	600b      	strpl	r3, [r1, #0]
 800a696:	2002      	movpl	r0, #2
 800a698:	4770      	bx	lr
 800a69a:	b298      	uxth	r0, r3
 800a69c:	b9a8      	cbnz	r0, 800a6ca <__lo0bits+0x52>
 800a69e:	2010      	movs	r0, #16
 800a6a0:	0c1b      	lsrs	r3, r3, #16
 800a6a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a6a6:	bf04      	itt	eq
 800a6a8:	0a1b      	lsreq	r3, r3, #8
 800a6aa:	3008      	addeq	r0, #8
 800a6ac:	071a      	lsls	r2, r3, #28
 800a6ae:	bf04      	itt	eq
 800a6b0:	091b      	lsreq	r3, r3, #4
 800a6b2:	3004      	addeq	r0, #4
 800a6b4:	079a      	lsls	r2, r3, #30
 800a6b6:	bf04      	itt	eq
 800a6b8:	089b      	lsreq	r3, r3, #2
 800a6ba:	3002      	addeq	r0, #2
 800a6bc:	07da      	lsls	r2, r3, #31
 800a6be:	d402      	bmi.n	800a6c6 <__lo0bits+0x4e>
 800a6c0:	085b      	lsrs	r3, r3, #1
 800a6c2:	d006      	beq.n	800a6d2 <__lo0bits+0x5a>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	600b      	str	r3, [r1, #0]
 800a6c8:	4770      	bx	lr
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	e7e9      	b.n	800a6a2 <__lo0bits+0x2a>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	4770      	bx	lr
 800a6d2:	2020      	movs	r0, #32
 800a6d4:	4770      	bx	lr

0800a6d6 <__i2b>:
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	460c      	mov	r4, r1
 800a6da:	2101      	movs	r1, #1
 800a6dc:	f7ff ff27 	bl	800a52e <_Balloc>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	6144      	str	r4, [r0, #20]
 800a6e4:	6102      	str	r2, [r0, #16]
 800a6e6:	bd10      	pop	{r4, pc}

0800a6e8 <__multiply>:
 800a6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	690a      	ldr	r2, [r1, #16]
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	4688      	mov	r8, r1
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	bfbe      	ittt	lt
 800a6f8:	460b      	movlt	r3, r1
 800a6fa:	46a0      	movlt	r8, r4
 800a6fc:	461c      	movlt	r4, r3
 800a6fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a702:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a70a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a70e:	eb07 0609 	add.w	r6, r7, r9
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfb8      	it	lt
 800a716:	3101      	addlt	r1, #1
 800a718:	f7ff ff09 	bl	800a52e <_Balloc>
 800a71c:	f100 0514 	add.w	r5, r0, #20
 800a720:	462b      	mov	r3, r5
 800a722:	2200      	movs	r2, #0
 800a724:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a728:	4573      	cmp	r3, lr
 800a72a:	d316      	bcc.n	800a75a <__multiply+0x72>
 800a72c:	f104 0214 	add.w	r2, r4, #20
 800a730:	f108 0114 	add.w	r1, r8, #20
 800a734:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a738:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	4293      	cmp	r3, r2
 800a744:	d80c      	bhi.n	800a760 <__multiply+0x78>
 800a746:	2e00      	cmp	r6, #0
 800a748:	dd03      	ble.n	800a752 <__multiply+0x6a>
 800a74a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d05d      	beq.n	800a80e <__multiply+0x126>
 800a752:	6106      	str	r6, [r0, #16]
 800a754:	b003      	add	sp, #12
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	f843 2b04 	str.w	r2, [r3], #4
 800a75e:	e7e3      	b.n	800a728 <__multiply+0x40>
 800a760:	f8b2 b000 	ldrh.w	fp, [r2]
 800a764:	f1bb 0f00 	cmp.w	fp, #0
 800a768:	d023      	beq.n	800a7b2 <__multiply+0xca>
 800a76a:	4689      	mov	r9, r1
 800a76c:	46ac      	mov	ip, r5
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f859 4b04 	ldr.w	r4, [r9], #4
 800a776:	f8dc a000 	ldr.w	sl, [ip]
 800a77a:	b2a3      	uxth	r3, r4
 800a77c:	fa1f fa8a 	uxth.w	sl, sl
 800a780:	fb0b a303 	mla	r3, fp, r3, sl
 800a784:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a788:	f8dc 4000 	ldr.w	r4, [ip]
 800a78c:	4443      	add	r3, r8
 800a78e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a792:	fb0b 840a 	mla	r4, fp, sl, r8
 800a796:	46e2      	mov	sl, ip
 800a798:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a7a2:	454f      	cmp	r7, r9
 800a7a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a7a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a7ac:	d82b      	bhi.n	800a806 <__multiply+0x11e>
 800a7ae:	f8cc 8004 	str.w	r8, [ip, #4]
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	3204      	adds	r2, #4
 800a7b6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a7ba:	f1ba 0f00 	cmp.w	sl, #0
 800a7be:	d020      	beq.n	800a802 <__multiply+0x11a>
 800a7c0:	4689      	mov	r9, r1
 800a7c2:	46a8      	mov	r8, r5
 800a7c4:	f04f 0b00 	mov.w	fp, #0
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	f8b9 c000 	ldrh.w	ip, [r9]
 800a7ce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	fb0a 440c 	mla	r4, sl, ip, r4
 800a7d8:	46c4      	mov	ip, r8
 800a7da:	445c      	add	r4, fp
 800a7dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a7e0:	f84c 3b04 	str.w	r3, [ip], #4
 800a7e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7e8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	fb0a b303 	mla	r3, sl, r3, fp
 800a7f2:	454f      	cmp	r7, r9
 800a7f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a7f8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a7fc:	d805      	bhi.n	800a80a <__multiply+0x122>
 800a7fe:	f8c8 3004 	str.w	r3, [r8, #4]
 800a802:	3504      	adds	r5, #4
 800a804:	e79b      	b.n	800a73e <__multiply+0x56>
 800a806:	46d4      	mov	ip, sl
 800a808:	e7b3      	b.n	800a772 <__multiply+0x8a>
 800a80a:	46e0      	mov	r8, ip
 800a80c:	e7dd      	b.n	800a7ca <__multiply+0xe2>
 800a80e:	3e01      	subs	r6, #1
 800a810:	e799      	b.n	800a746 <__multiply+0x5e>
	...

0800a814 <__pow5mult>:
 800a814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a818:	4615      	mov	r5, r2
 800a81a:	f012 0203 	ands.w	r2, r2, #3
 800a81e:	4606      	mov	r6, r0
 800a820:	460f      	mov	r7, r1
 800a822:	d007      	beq.n	800a834 <__pow5mult+0x20>
 800a824:	4c21      	ldr	r4, [pc, #132]	; (800a8ac <__pow5mult+0x98>)
 800a826:	3a01      	subs	r2, #1
 800a828:	2300      	movs	r3, #0
 800a82a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a82e:	f7ff fec9 	bl	800a5c4 <__multadd>
 800a832:	4607      	mov	r7, r0
 800a834:	10ad      	asrs	r5, r5, #2
 800a836:	d035      	beq.n	800a8a4 <__pow5mult+0x90>
 800a838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a83a:	b93c      	cbnz	r4, 800a84c <__pow5mult+0x38>
 800a83c:	2010      	movs	r0, #16
 800a83e:	f7fd fd15 	bl	800826c <malloc>
 800a842:	6270      	str	r0, [r6, #36]	; 0x24
 800a844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a848:	6004      	str	r4, [r0, #0]
 800a84a:	60c4      	str	r4, [r0, #12]
 800a84c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a854:	b94c      	cbnz	r4, 800a86a <__pow5mult+0x56>
 800a856:	f240 2171 	movw	r1, #625	; 0x271
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ff3b 	bl	800a6d6 <__i2b>
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	f8c8 0008 	str.w	r0, [r8, #8]
 800a868:	6003      	str	r3, [r0, #0]
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	07eb      	lsls	r3, r5, #31
 800a870:	d50a      	bpl.n	800a888 <__pow5mult+0x74>
 800a872:	4639      	mov	r1, r7
 800a874:	4622      	mov	r2, r4
 800a876:	4630      	mov	r0, r6
 800a878:	f7ff ff36 	bl	800a6e8 <__multiply>
 800a87c:	4681      	mov	r9, r0
 800a87e:	4639      	mov	r1, r7
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff fe88 	bl	800a596 <_Bfree>
 800a886:	464f      	mov	r7, r9
 800a888:	106d      	asrs	r5, r5, #1
 800a88a:	d00b      	beq.n	800a8a4 <__pow5mult+0x90>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	b938      	cbnz	r0, 800a8a0 <__pow5mult+0x8c>
 800a890:	4622      	mov	r2, r4
 800a892:	4621      	mov	r1, r4
 800a894:	4630      	mov	r0, r6
 800a896:	f7ff ff27 	bl	800a6e8 <__multiply>
 800a89a:	6020      	str	r0, [r4, #0]
 800a89c:	f8c0 8000 	str.w	r8, [r0]
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	e7e4      	b.n	800a86e <__pow5mult+0x5a>
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800b650 	.word	0x0800b650

0800a8b0 <__lshift>:
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8c0:	eb0a 0903 	add.w	r9, sl, r3
 800a8c4:	6849      	ldr	r1, [r1, #4]
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	f109 0501 	add.w	r5, r9, #1
 800a8cc:	42ab      	cmp	r3, r5
 800a8ce:	db32      	blt.n	800a936 <__lshift+0x86>
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff fe2c 	bl	800a52e <_Balloc>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4680      	mov	r8, r0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f100 0114 	add.w	r1, r0, #20
 800a8e0:	4553      	cmp	r3, sl
 800a8e2:	db2b      	blt.n	800a93c <__lshift+0x8c>
 800a8e4:	6920      	ldr	r0, [r4, #16]
 800a8e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ea:	f104 0314 	add.w	r3, r4, #20
 800a8ee:	f016 021f 	ands.w	r2, r6, #31
 800a8f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8fa:	d025      	beq.n	800a948 <__lshift+0x98>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f1c2 0e20 	rsb	lr, r2, #32
 800a902:	468a      	mov	sl, r1
 800a904:	681e      	ldr	r6, [r3, #0]
 800a906:	4096      	lsls	r6, r2
 800a908:	4330      	orrs	r0, r6
 800a90a:	f84a 0b04 	str.w	r0, [sl], #4
 800a90e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a912:	459c      	cmp	ip, r3
 800a914:	fa20 f00e 	lsr.w	r0, r0, lr
 800a918:	d814      	bhi.n	800a944 <__lshift+0x94>
 800a91a:	6048      	str	r0, [r1, #4]
 800a91c:	b108      	cbz	r0, 800a922 <__lshift+0x72>
 800a91e:	f109 0502 	add.w	r5, r9, #2
 800a922:	3d01      	subs	r5, #1
 800a924:	4638      	mov	r0, r7
 800a926:	f8c8 5010 	str.w	r5, [r8, #16]
 800a92a:	4621      	mov	r1, r4
 800a92c:	f7ff fe33 	bl	800a596 <_Bfree>
 800a930:	4640      	mov	r0, r8
 800a932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a936:	3101      	adds	r1, #1
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	e7c7      	b.n	800a8cc <__lshift+0x1c>
 800a93c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a940:	3301      	adds	r3, #1
 800a942:	e7cd      	b.n	800a8e0 <__lshift+0x30>
 800a944:	4651      	mov	r1, sl
 800a946:	e7dc      	b.n	800a902 <__lshift+0x52>
 800a948:	3904      	subs	r1, #4
 800a94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94e:	459c      	cmp	ip, r3
 800a950:	f841 2f04 	str.w	r2, [r1, #4]!
 800a954:	d8f9      	bhi.n	800a94a <__lshift+0x9a>
 800a956:	e7e4      	b.n	800a922 <__lshift+0x72>

0800a958 <__mcmp>:
 800a958:	6903      	ldr	r3, [r0, #16]
 800a95a:	690a      	ldr	r2, [r1, #16]
 800a95c:	b530      	push	{r4, r5, lr}
 800a95e:	1a9b      	subs	r3, r3, r2
 800a960:	d10c      	bne.n	800a97c <__mcmp+0x24>
 800a962:	0092      	lsls	r2, r2, #2
 800a964:	3014      	adds	r0, #20
 800a966:	3114      	adds	r1, #20
 800a968:	1884      	adds	r4, r0, r2
 800a96a:	4411      	add	r1, r2
 800a96c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a974:	4295      	cmp	r5, r2
 800a976:	d003      	beq.n	800a980 <__mcmp+0x28>
 800a978:	d305      	bcc.n	800a986 <__mcmp+0x2e>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4618      	mov	r0, r3
 800a97e:	bd30      	pop	{r4, r5, pc}
 800a980:	42a0      	cmp	r0, r4
 800a982:	d3f3      	bcc.n	800a96c <__mcmp+0x14>
 800a984:	e7fa      	b.n	800a97c <__mcmp+0x24>
 800a986:	f04f 33ff 	mov.w	r3, #4294967295
 800a98a:	e7f7      	b.n	800a97c <__mcmp+0x24>

0800a98c <__mdiff>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	460d      	mov	r5, r1
 800a992:	4607      	mov	r7, r0
 800a994:	4611      	mov	r1, r2
 800a996:	4628      	mov	r0, r5
 800a998:	4614      	mov	r4, r2
 800a99a:	f7ff ffdd 	bl	800a958 <__mcmp>
 800a99e:	1e06      	subs	r6, r0, #0
 800a9a0:	d108      	bne.n	800a9b4 <__mdiff+0x28>
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	f7ff fdc2 	bl	800a52e <_Balloc>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b4:	bfa4      	itt	ge
 800a9b6:	4623      	movge	r3, r4
 800a9b8:	462c      	movge	r4, r5
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	6861      	ldr	r1, [r4, #4]
 800a9be:	bfa6      	itte	ge
 800a9c0:	461d      	movge	r5, r3
 800a9c2:	2600      	movge	r6, #0
 800a9c4:	2601      	movlt	r6, #1
 800a9c6:	f7ff fdb2 	bl	800a52e <_Balloc>
 800a9ca:	f04f 0e00 	mov.w	lr, #0
 800a9ce:	60c6      	str	r6, [r0, #12]
 800a9d0:	692b      	ldr	r3, [r5, #16]
 800a9d2:	6926      	ldr	r6, [r4, #16]
 800a9d4:	f104 0214 	add.w	r2, r4, #20
 800a9d8:	f105 0914 	add.w	r9, r5, #20
 800a9dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a9e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a9e4:	f100 0114 	add.w	r1, r0, #20
 800a9e8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a9ec:	f859 5b04 	ldr.w	r5, [r9], #4
 800a9f0:	fa1f f38a 	uxth.w	r3, sl
 800a9f4:	4473      	add	r3, lr
 800a9f6:	b2ac      	uxth	r4, r5
 800a9f8:	1b1b      	subs	r3, r3, r4
 800a9fa:	0c2c      	lsrs	r4, r5, #16
 800a9fc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800aa00:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800aa0a:	45c8      	cmp	r8, r9
 800aa0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800aa10:	4694      	mov	ip, r2
 800aa12:	f841 4b04 	str.w	r4, [r1], #4
 800aa16:	d8e7      	bhi.n	800a9e8 <__mdiff+0x5c>
 800aa18:	45bc      	cmp	ip, r7
 800aa1a:	d304      	bcc.n	800aa26 <__mdiff+0x9a>
 800aa1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aa20:	b183      	cbz	r3, 800aa44 <__mdiff+0xb8>
 800aa22:	6106      	str	r6, [r0, #16]
 800aa24:	e7c4      	b.n	800a9b0 <__mdiff+0x24>
 800aa26:	f85c 4b04 	ldr.w	r4, [ip], #4
 800aa2a:	b2a2      	uxth	r2, r4
 800aa2c:	4472      	add	r2, lr
 800aa2e:	1413      	asrs	r3, r2, #16
 800aa30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa34:	b292      	uxth	r2, r2
 800aa36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa3a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aa3e:	f841 2b04 	str.w	r2, [r1], #4
 800aa42:	e7e9      	b.n	800aa18 <__mdiff+0x8c>
 800aa44:	3e01      	subs	r6, #1
 800aa46:	e7e9      	b.n	800aa1c <__mdiff+0x90>

0800aa48 <__d2b>:
 800aa48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800aa52:	2101      	movs	r1, #1
 800aa54:	4690      	mov	r8, r2
 800aa56:	f7ff fd6a 	bl	800a52e <_Balloc>
 800aa5a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800aa5e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aa62:	4607      	mov	r7, r0
 800aa64:	bb34      	cbnz	r4, 800aab4 <__d2b+0x6c>
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	f1b8 0200 	subs.w	r2, r8, #0
 800aa6c:	d027      	beq.n	800aabe <__d2b+0x76>
 800aa6e:	a802      	add	r0, sp, #8
 800aa70:	f840 2d08 	str.w	r2, [r0, #-8]!
 800aa74:	f7ff fe00 	bl	800a678 <__lo0bits>
 800aa78:	9900      	ldr	r1, [sp, #0]
 800aa7a:	b1f0      	cbz	r0, 800aaba <__d2b+0x72>
 800aa7c:	9a01      	ldr	r2, [sp, #4]
 800aa7e:	f1c0 0320 	rsb	r3, r0, #32
 800aa82:	fa02 f303 	lsl.w	r3, r2, r3
 800aa86:	430b      	orrs	r3, r1
 800aa88:	40c2      	lsrs	r2, r0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	9201      	str	r2, [sp, #4]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bf14      	ite	ne
 800aa94:	2102      	movne	r1, #2
 800aa96:	2101      	moveq	r1, #1
 800aa98:	61bb      	str	r3, [r7, #24]
 800aa9a:	6139      	str	r1, [r7, #16]
 800aa9c:	b1c4      	cbz	r4, 800aad0 <__d2b+0x88>
 800aa9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aaa2:	4404      	add	r4, r0
 800aaa4:	6034      	str	r4, [r6, #0]
 800aaa6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaaa:	6028      	str	r0, [r5, #0]
 800aaac:	4638      	mov	r0, r7
 800aaae:	b002      	add	sp, #8
 800aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aab8:	e7d5      	b.n	800aa66 <__d2b+0x1e>
 800aaba:	6179      	str	r1, [r7, #20]
 800aabc:	e7e7      	b.n	800aa8e <__d2b+0x46>
 800aabe:	a801      	add	r0, sp, #4
 800aac0:	f7ff fdda 	bl	800a678 <__lo0bits>
 800aac4:	2101      	movs	r1, #1
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	6139      	str	r1, [r7, #16]
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	3020      	adds	r0, #32
 800aace:	e7e5      	b.n	800aa9c <__d2b+0x54>
 800aad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aad4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800aad8:	6030      	str	r0, [r6, #0]
 800aada:	6918      	ldr	r0, [r3, #16]
 800aadc:	f7ff fdad 	bl	800a63a <__hi0bits>
 800aae0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aae4:	e7e1      	b.n	800aaaa <__d2b+0x62>

0800aae6 <_calloc_r>:
 800aae6:	b538      	push	{r3, r4, r5, lr}
 800aae8:	fb02 f401 	mul.w	r4, r2, r1
 800aaec:	4621      	mov	r1, r4
 800aaee:	f7fd fc21 	bl	8008334 <_malloc_r>
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	b118      	cbz	r0, 800aafe <_calloc_r+0x18>
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	2100      	movs	r1, #0
 800aafa:	f7fd fbc7 	bl	800828c <memset>
 800aafe:	4628      	mov	r0, r5
 800ab00:	bd38      	pop	{r3, r4, r5, pc}

0800ab02 <__sread>:
 800ab02:	b510      	push	{r4, lr}
 800ab04:	460c      	mov	r4, r1
 800ab06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab0a:	f000 f8a5 	bl	800ac58 <_read_r>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	bfab      	itete	ge
 800ab12:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab14:	89a3      	ldrhlt	r3, [r4, #12]
 800ab16:	181b      	addge	r3, r3, r0
 800ab18:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab1c:	bfac      	ite	ge
 800ab1e:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab20:	81a3      	strhlt	r3, [r4, #12]
 800ab22:	bd10      	pop	{r4, pc}

0800ab24 <__swrite>:
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	461f      	mov	r7, r3
 800ab2a:	898b      	ldrh	r3, [r1, #12]
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	05db      	lsls	r3, r3, #23
 800ab30:	460c      	mov	r4, r1
 800ab32:	4616      	mov	r6, r2
 800ab34:	d505      	bpl.n	800ab42 <__swrite+0x1e>
 800ab36:	2302      	movs	r3, #2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3e:	f000 f867 	bl	800ac10 <_lseek_r>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	4632      	mov	r2, r6
 800ab46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab50:	463b      	mov	r3, r7
 800ab52:	4628      	mov	r0, r5
 800ab54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab58:	f000 b816 	b.w	800ab88 <_write_r>

0800ab5c <__sseek>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	460c      	mov	r4, r1
 800ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab64:	f000 f854 	bl	800ac10 <_lseek_r>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	bf15      	itete	ne
 800ab6e:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab70:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab74:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab78:	81a3      	strheq	r3, [r4, #12]
 800ab7a:	bf18      	it	ne
 800ab7c:	81a3      	strhne	r3, [r4, #12]
 800ab7e:	bd10      	pop	{r4, pc}

0800ab80 <__sclose>:
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	f000 b812 	b.w	800abac <_close_r>

0800ab88 <_write_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	2200      	movs	r2, #0
 800ab92:	4c05      	ldr	r4, [pc, #20]	; (800aba8 <_write_r+0x20>)
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7f6 facd 	bl	8001136 <_write>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_write_r+0x1e>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_write_r+0x1e>
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	20002080 	.word	0x20002080

0800abac <_close_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	2300      	movs	r3, #0
 800abb0:	4c05      	ldr	r4, [pc, #20]	; (800abc8 <_close_r+0x1c>)
 800abb2:	4605      	mov	r5, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	f7f6 fad9 	bl	800116e <_close>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_close_r+0x1a>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_close_r+0x1a>
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20002080 	.word	0x20002080

0800abcc <_fstat_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	2300      	movs	r3, #0
 800abd0:	4c06      	ldr	r4, [pc, #24]	; (800abec <_fstat_r+0x20>)
 800abd2:	4605      	mov	r5, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	4611      	mov	r1, r2
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	f7f6 fad3 	bl	8001184 <_fstat>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	d102      	bne.n	800abe8 <_fstat_r+0x1c>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	b103      	cbz	r3, 800abe8 <_fstat_r+0x1c>
 800abe6:	602b      	str	r3, [r5, #0]
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
 800abea:	bf00      	nop
 800abec:	20002080 	.word	0x20002080

0800abf0 <_isatty_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	2300      	movs	r3, #0
 800abf4:	4c05      	ldr	r4, [pc, #20]	; (800ac0c <_isatty_r+0x1c>)
 800abf6:	4605      	mov	r5, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	f7f6 fad1 	bl	80011a2 <_isatty>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_isatty_r+0x1a>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_isatty_r+0x1a>
 800ac08:	602b      	str	r3, [r5, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20002080 	.word	0x20002080

0800ac10 <_lseek_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4605      	mov	r5, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	4611      	mov	r1, r2
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4c05      	ldr	r4, [pc, #20]	; (800ac30 <_lseek_r+0x20>)
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f7f6 fac9 	bl	80011b6 <_lseek>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_lseek_r+0x1e>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_lseek_r+0x1e>
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20002080 	.word	0x20002080

0800ac34 <__ascii_mbtowc>:
 800ac34:	b082      	sub	sp, #8
 800ac36:	b901      	cbnz	r1, 800ac3a <__ascii_mbtowc+0x6>
 800ac38:	a901      	add	r1, sp, #4
 800ac3a:	b142      	cbz	r2, 800ac4e <__ascii_mbtowc+0x1a>
 800ac3c:	b14b      	cbz	r3, 800ac52 <__ascii_mbtowc+0x1e>
 800ac3e:	7813      	ldrb	r3, [r2, #0]
 800ac40:	600b      	str	r3, [r1, #0]
 800ac42:	7812      	ldrb	r2, [r2, #0]
 800ac44:	1c10      	adds	r0, r2, #0
 800ac46:	bf18      	it	ne
 800ac48:	2001      	movne	r0, #1
 800ac4a:	b002      	add	sp, #8
 800ac4c:	4770      	bx	lr
 800ac4e:	4610      	mov	r0, r2
 800ac50:	e7fb      	b.n	800ac4a <__ascii_mbtowc+0x16>
 800ac52:	f06f 0001 	mvn.w	r0, #1
 800ac56:	e7f8      	b.n	800ac4a <__ascii_mbtowc+0x16>

0800ac58 <_read_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	4611      	mov	r1, r2
 800ac60:	2200      	movs	r2, #0
 800ac62:	4c05      	ldr	r4, [pc, #20]	; (800ac78 <_read_r+0x20>)
 800ac64:	6022      	str	r2, [r4, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f7f6 fa48 	bl	80010fc <_read>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_read_r+0x1e>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_read_r+0x1e>
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	20002080 	.word	0x20002080

0800ac7c <__ascii_wctomb>:
 800ac7c:	b149      	cbz	r1, 800ac92 <__ascii_wctomb+0x16>
 800ac7e:	2aff      	cmp	r2, #255	; 0xff
 800ac80:	bf8b      	itete	hi
 800ac82:	238a      	movhi	r3, #138	; 0x8a
 800ac84:	700a      	strbls	r2, [r1, #0]
 800ac86:	6003      	strhi	r3, [r0, #0]
 800ac88:	2001      	movls	r0, #1
 800ac8a:	bf88      	it	hi
 800ac8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac90:	4770      	bx	lr
 800ac92:	4608      	mov	r0, r1
 800ac94:	4770      	bx	lr
	...

0800ac98 <_init>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr

0800aca4 <_fini>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	bf00      	nop
 800aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acaa:	bc08      	pop	{r3}
 800acac:	469e      	mov	lr, r3
 800acae:	4770      	bx	lr
